
EXAMPL_ADE7758.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003924  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003a30  08003a30  00004a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b2c  08003b2c  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003b2c  08003b2c  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b2c  08003b2c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b2c  08003b2c  00004b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b30  08003b30  00004b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003b34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  08003b9c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003b9c  00005284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b10  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9d  00000000  00000000  0000eba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00010840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000725  00000000  00000000  000111a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183c0  00000000  00000000  000118c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbf6  00000000  00000000  00029c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085c0d  00000000  00000000  0003587b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000bb488  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cbc  00000000  00000000  000bb510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000be1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a18 	.word	0x08003a18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003a18 	.word	0x08003a18

0800014c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb80 	bl	8000854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f8bc 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f956 	bl	8000408 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f8f4 	bl	8000348 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f928 	bl	80003b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ADE7758_Init(&ade7758_1, &hspi1, GPIOB, GPIO_PIN_0);
 8000164:	2301      	movs	r3, #1
 8000166:	4a4f      	ldr	r2, [pc, #316]	@ (80002a4 <main+0x158>)
 8000168:	494f      	ldr	r1, [pc, #316]	@ (80002a8 <main+0x15c>)
 800016a:	4850      	ldr	r0, [pc, #320]	@ (80002ac <main+0x160>)
 800016c:	f002 fc60 	bl	8002a30 <ADE7758_Init>

  ADE7758_Write(&ade7758_1, 0x05, SAGCYC, 1);
 8000170:	2301      	movs	r3, #1
 8000172:	221d      	movs	r2, #29
 8000174:	2105      	movs	r1, #5
 8000176:	484d      	ldr	r0, [pc, #308]	@ (80002ac <main+0x160>)
 8000178:	f002 fc6f 	bl	8002a5a <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0x30, SAGLVL, 1);
 800017c:	2301      	movs	r3, #1
 800017e:	221e      	movs	r2, #30
 8000180:	2130      	movs	r1, #48	@ 0x30
 8000182:	484a      	ldr	r0, [pc, #296]	@ (80002ac <main+0x160>)
 8000184:	f002 fc69 	bl	8002a5a <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0x1C0, MASK, 3);
 8000188:	2303      	movs	r3, #3
 800018a:	2218      	movs	r2, #24
 800018c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000190:	4846      	ldr	r0, [pc, #280]	@ (80002ac <main+0x160>)
 8000192:	f002 fc62 	bl	8002a5a <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0x40, LCYCMODE, 1);
 8000196:	2301      	movs	r3, #1
 8000198:	2217      	movs	r2, #23
 800019a:	2140      	movs	r1, #64	@ 0x40
 800019c:	4843      	ldr	r0, [pc, #268]	@ (80002ac <main+0x160>)
 800019e:	f002 fc5c 	bl	8002a5a <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0x9C, COMPMODE, 1);
 80001a2:	2301      	movs	r3, #1
 80001a4:	2216      	movs	r2, #22
 80001a6:	219c      	movs	r1, #156	@ 0x9c
 80001a8:	4840      	ldr	r0, [pc, #256]	@ (80002ac <main+0x160>)
 80001aa:	f002 fc56 	bl	8002a5a <ADE7758_Write>

  ADE7758_Write(&ade7758_1, 0xF8, AVRMSOS, 2);
 80001ae:	2302      	movs	r3, #2
 80001b0:	2233      	movs	r2, #51	@ 0x33
 80001b2:	21f8      	movs	r1, #248	@ 0xf8
 80001b4:	483d      	ldr	r0, [pc, #244]	@ (80002ac <main+0x160>)
 80001b6:	f002 fc50 	bl	8002a5a <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0x19, AIRMSOS, 2);
 80001ba:	2302      	movs	r3, #2
 80001bc:	2236      	movs	r2, #54	@ 0x36
 80001be:	2119      	movs	r1, #25
 80001c0:	483a      	ldr	r0, [pc, #232]	@ (80002ac <main+0x160>)
 80001c2:	f002 fc4a 	bl	8002a5a <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0x04, AWG, 2);
 80001c6:	2302      	movs	r3, #2
 80001c8:	222a      	movs	r2, #42	@ 0x2a
 80001ca:	2104      	movs	r1, #4
 80001cc:	4837      	ldr	r0, [pc, #220]	@ (80002ac <main+0x160>)
 80001ce:	f002 fc44 	bl	8002a5a <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0x04, AVAG, 2);
 80001d2:	2302      	movs	r3, #2
 80001d4:	2230      	movs	r2, #48	@ 0x30
 80001d6:	2104      	movs	r1, #4
 80001d8:	4834      	ldr	r0, [pc, #208]	@ (80002ac <main+0x160>)
 80001da:	f002 fc3e 	bl	8002a5a <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0xF6, APHCAL, 2);
 80001de:	2302      	movs	r3, #2
 80001e0:	223f      	movs	r2, #63	@ 0x3f
 80001e2:	21f6      	movs	r1, #246	@ 0xf6
 80001e4:	4831      	ldr	r0, [pc, #196]	@ (80002ac <main+0x160>)
 80001e6:	f002 fc38 	bl	8002a5a <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0xF8, AWAITOS, 2);
 80001ea:	2302      	movs	r3, #2
 80001ec:	2239      	movs	r2, #57	@ 0x39
 80001ee:	21f8      	movs	r1, #248	@ 0xf8
 80001f0:	482e      	ldr	r0, [pc, #184]	@ (80002ac <main+0x160>)
 80001f2:	f002 fc32 	bl	8002a5a <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0xF8, AVAROS, 2);
 80001f6:	2302      	movs	r3, #2
 80001f8:	223c      	movs	r2, #60	@ 0x3c
 80001fa:	21f8      	movs	r1, #248	@ 0xf8
 80001fc:	482b      	ldr	r0, [pc, #172]	@ (80002ac <main+0x160>)
 80001fe:	f002 fc2c 	bl	8002a5a <ADE7758_Write>
    // dummy[0] = (int32_t)ADE7758_Read(&ade7758_1, AIRMS, 3) * 170 / 7432;
    // dummy[1] = (int32_t)ADE7758_Read(&ade7758_1, AVRMS, 3) * 220 / 1078302;
    // dummy[2] = (int32_t)ADE7758_Read(&ade7758_1, AWATTHR, 2) * 40 / 9;
    // dummy[3] = (int32_t)ADE7758_Read(&ade7758_1, AVARHR, 2);
    // dummy[4] = (int32_t)ADE7758_Read(&ade7758_1, AVAHR, 2);
    printf("Gia Tri Dien Ap: %d \n\r", (int32_t)ADE7758_Read(&ade7758_1, AIRMS, 3) * 170 / 7432);
 8000202:	2203      	movs	r2, #3
 8000204:	210a      	movs	r1, #10
 8000206:	4829      	ldr	r0, [pc, #164]	@ (80002ac <main+0x160>)
 8000208:	f002 fc7d 	bl	8002b06 <ADE7758_Read>
 800020c:	4603      	mov	r3, r0
 800020e:	22aa      	movs	r2, #170	@ 0xaa
 8000210:	fb02 f303 	mul.w	r3, r2, r3
 8000214:	4a26      	ldr	r2, [pc, #152]	@ (80002b0 <main+0x164>)
 8000216:	fb82 1203 	smull	r1, r2, r2, r3
 800021a:	12d2      	asrs	r2, r2, #11
 800021c:	17db      	asrs	r3, r3, #31
 800021e:	1ad3      	subs	r3, r2, r3
 8000220:	4619      	mov	r1, r3
 8000222:	4824      	ldr	r0, [pc, #144]	@ (80002b4 <main+0x168>)
 8000224:	f002 fd80 	bl	8002d28 <iprintf>
    printf("Gia Tri Dong Dien: %d \n\r", (int32_t)ADE7758_Read(&ade7758_1, AVRMS, 3) * 220 / 1078302);
 8000228:	2203      	movs	r2, #3
 800022a:	210d      	movs	r1, #13
 800022c:	481f      	ldr	r0, [pc, #124]	@ (80002ac <main+0x160>)
 800022e:	f002 fc6a 	bl	8002b06 <ADE7758_Read>
 8000232:	4603      	mov	r3, r0
 8000234:	22dc      	movs	r2, #220	@ 0xdc
 8000236:	fb02 f303 	mul.w	r3, r2, r3
 800023a:	4a1f      	ldr	r2, [pc, #124]	@ (80002b8 <main+0x16c>)
 800023c:	fb82 1203 	smull	r1, r2, r2, r3
 8000240:	14d2      	asrs	r2, r2, #19
 8000242:	17db      	asrs	r3, r3, #31
 8000244:	1ad3      	subs	r3, r2, r3
 8000246:	4619      	mov	r1, r3
 8000248:	481c      	ldr	r0, [pc, #112]	@ (80002bc <main+0x170>)
 800024a:	f002 fd6d 	bl	8002d28 <iprintf>
    printf("Gia Tri Cong Suat: %d \n\r", ADE7758_Read(&ade7758_1, AWATTHR, 2) * 40 / 9);
 800024e:	2202      	movs	r2, #2
 8000250:	2101      	movs	r1, #1
 8000252:	4816      	ldr	r0, [pc, #88]	@ (80002ac <main+0x160>)
 8000254:	f002 fc57 	bl	8002b06 <ADE7758_Read>
 8000258:	4602      	mov	r2, r0
 800025a:	4613      	mov	r3, r2
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	4413      	add	r3, r2
 8000260:	00db      	lsls	r3, r3, #3
 8000262:	4a17      	ldr	r2, [pc, #92]	@ (80002c0 <main+0x174>)
 8000264:	fb82 1203 	smull	r1, r2, r2, r3
 8000268:	1052      	asrs	r2, r2, #1
 800026a:	17db      	asrs	r3, r3, #31
 800026c:	1ad3      	subs	r3, r2, r3
 800026e:	4619      	mov	r1, r3
 8000270:	4814      	ldr	r0, [pc, #80]	@ (80002c4 <main+0x178>)
 8000272:	f002 fd59 	bl	8002d28 <iprintf>
    printf("Gia Tri Cong Suat Phan Khang: %d \n\r", (int32_t)ADE7758_Read(&ade7758_1, AVARHR, 2));
 8000276:	2202      	movs	r2, #2
 8000278:	2104      	movs	r1, #4
 800027a:	480c      	ldr	r0, [pc, #48]	@ (80002ac <main+0x160>)
 800027c:	f002 fc43 	bl	8002b06 <ADE7758_Read>
 8000280:	4603      	mov	r3, r0
 8000282:	4619      	mov	r1, r3
 8000284:	4810      	ldr	r0, [pc, #64]	@ (80002c8 <main+0x17c>)
 8000286:	f002 fd4f 	bl	8002d28 <iprintf>
    printf("Gia Tri Cong Suat Toan Phan ADC: %d \n\r", (int32_t)ADE7758_Read(&ade7758_1, AVAHR, 2));
 800028a:	2202      	movs	r2, #2
 800028c:	2107      	movs	r1, #7
 800028e:	4807      	ldr	r0, [pc, #28]	@ (80002ac <main+0x160>)
 8000290:	f002 fc39 	bl	8002b06 <ADE7758_Read>
 8000294:	4603      	mov	r3, r0
 8000296:	4619      	mov	r1, r3
 8000298:	480c      	ldr	r0, [pc, #48]	@ (80002cc <main+0x180>)
 800029a:	f002 fd45 	bl	8002d28 <iprintf>
    printf("Gia Tri Dien Ap: %d \n\r", (int32_t)ADE7758_Read(&ade7758_1, AIRMS, 3) * 170 / 7432);
 800029e:	bf00      	nop
 80002a0:	e7af      	b.n	8000202 <main+0xb6>
 80002a2:	bf00      	nop
 80002a4:	40010c00 	.word	0x40010c00
 80002a8:	20000084 	.word	0x20000084
 80002ac:	20000124 	.word	0x20000124
 80002b0:	468b6f9b 	.word	0x468b6f9b
 80002b4:	08003a30 	.word	0x08003a30
 80002b8:	7c78abc1 	.word	0x7c78abc1
 80002bc:	08003a48 	.word	0x08003a48
 80002c0:	38e38e39 	.word	0x38e38e39
 80002c4:	08003a64 	.word	0x08003a64
 80002c8:	08003a80 	.word	0x08003a80
 80002cc:	08003aa4 	.word	0x08003aa4

080002d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	@ 0x40
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	@ 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fd77 	bl	8002dd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	2310      	movs	r3, #16
 80002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fe:	2300      	movs	r3, #0
 8000300:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fe86 	bl	8001018 <HAL_RCC_OscConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000312:	f000 f8c9 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000316:	230f      	movs	r3, #15
 8000318:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f001 f8f4 	bl	800151c <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033a:	f000 f8b5 	bl	80004a8 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3740      	adds	r7, #64	@ 0x40
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800034c:	4b17      	ldr	r3, [pc, #92]	@ (80003ac <MX_SPI1_Init+0x64>)
 800034e:	4a18      	ldr	r2, [pc, #96]	@ (80003b0 <MX_SPI1_Init+0x68>)
 8000350:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000352:	4b16      	ldr	r3, [pc, #88]	@ (80003ac <MX_SPI1_Init+0x64>)
 8000354:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000358:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800035a:	4b14      	ldr	r3, [pc, #80]	@ (80003ac <MX_SPI1_Init+0x64>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000360:	4b12      	ldr	r3, [pc, #72]	@ (80003ac <MX_SPI1_Init+0x64>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000366:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <MX_SPI1_Init+0x64>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800036c:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <MX_SPI1_Init+0x64>)
 800036e:	2201      	movs	r2, #1
 8000370:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <MX_SPI1_Init+0x64>)
 8000374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000378:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800037a:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <MX_SPI1_Init+0x64>)
 800037c:	2228      	movs	r2, #40	@ 0x28
 800037e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000380:	4b0a      	ldr	r3, [pc, #40]	@ (80003ac <MX_SPI1_Init+0x64>)
 8000382:	2200      	movs	r2, #0
 8000384:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000386:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <MX_SPI1_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800038c:	4b07      	ldr	r3, [pc, #28]	@ (80003ac <MX_SPI1_Init+0x64>)
 800038e:	2200      	movs	r2, #0
 8000390:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <MX_SPI1_Init+0x64>)
 8000394:	220a      	movs	r2, #10
 8000396:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000398:	4804      	ldr	r0, [pc, #16]	@ (80003ac <MX_SPI1_Init+0x64>)
 800039a:	f001 fa4d 	bl	8001838 <HAL_SPI_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003a4:	f000 f880 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000084 	.word	0x20000084
 80003b0:	40013000 	.word	0x40013000

080003b4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <MX_USART2_UART_Init+0x4c>)
 80003ba:	4a12      	ldr	r2, [pc, #72]	@ (8000404 <MX_USART2_UART_Init+0x50>)
 80003bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <MX_USART2_UART_Init+0x4c>)
 80003c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <MX_USART2_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <MX_USART2_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000400 <MX_USART2_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d8:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <MX_USART2_UART_Init+0x4c>)
 80003da:	220c      	movs	r2, #12
 80003dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003de:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <MX_USART2_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <MX_USART2_UART_Init+0x4c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	@ (8000400 <MX_USART2_UART_Init+0x4c>)
 80003ec:	f001 fd0b 	bl	8001e06 <HAL_UART_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003f6:	f000 f857 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	200000dc 	.word	0x200000dc
 8000404:	40004400 	.word	0x40004400

08000408 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	4b17      	ldr	r3, [pc, #92]	@ (800047c <MX_GPIO_Init+0x74>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a16      	ldr	r2, [pc, #88]	@ (800047c <MX_GPIO_Init+0x74>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b14      	ldr	r3, [pc, #80]	@ (800047c <MX_GPIO_Init+0x74>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0304 	and.w	r3, r3, #4
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000434:	4b11      	ldr	r3, [pc, #68]	@ (800047c <MX_GPIO_Init+0x74>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a10      	ldr	r2, [pc, #64]	@ (800047c <MX_GPIO_Init+0x74>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b0e      	ldr	r3, [pc, #56]	@ (800047c <MX_GPIO_Init+0x74>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	603b      	str	r3, [r7, #0]
 800044a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2101      	movs	r1, #1
 8000450:	480b      	ldr	r0, [pc, #44]	@ (8000480 <MX_GPIO_Init+0x78>)
 8000452:	f000 fdc9 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000456:	2301      	movs	r3, #1
 8000458:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800045a:	2311      	movs	r3, #17
 800045c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	2302      	movs	r3, #2
 8000464:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000466:	f107 0308 	add.w	r3, r7, #8
 800046a:	4619      	mov	r1, r3
 800046c:	4804      	ldr	r0, [pc, #16]	@ (8000480 <MX_GPIO_Init+0x78>)
 800046e:	f000 fc37 	bl	8000ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000472:	bf00      	nop
 8000474:	3718      	adds	r7, #24
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	40010c00 	.word	0x40010c00

08000484 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 800048c:	1d39      	adds	r1, r7, #4
 800048e:	2364      	movs	r3, #100	@ 0x64
 8000490:	2201      	movs	r2, #1
 8000492:	4804      	ldr	r0, [pc, #16]	@ (80004a4 <__io_putchar+0x20>)
 8000494:	f001 fd07 	bl	8001ea6 <HAL_UART_Transmit>

  return ch;
 8000498:	687b      	ldr	r3, [r7, #4]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000dc 	.word	0x200000dc

080004a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ba:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <HAL_MspInit+0x5c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <HAL_MspInit+0x5c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <HAL_MspInit+0x5c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <HAL_MspInit+0x5c>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <HAL_MspInit+0x60>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <HAL_MspInit+0x60>)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000
 8000514:	40010000 	.word	0x40010000

08000518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a1b      	ldr	r2, [pc, #108]	@ (80005a0 <HAL_SPI_MspInit+0x88>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d12f      	bne.n	8000598 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000538:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <HAL_SPI_MspInit+0x8c>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a19      	ldr	r2, [pc, #100]	@ (80005a4 <HAL_SPI_MspInit+0x8c>)
 800053e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <HAL_SPI_MspInit+0x8c>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <HAL_SPI_MspInit+0x8c>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a13      	ldr	r2, [pc, #76]	@ (80005a4 <HAL_SPI_MspInit+0x8c>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <HAL_SPI_MspInit+0x8c>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0304 	and.w	r3, r3, #4
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000568:	23a0      	movs	r3, #160	@ 0xa0
 800056a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056c:	2302      	movs	r3, #2
 800056e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000570:	2303      	movs	r3, #3
 8000572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	480b      	ldr	r0, [pc, #44]	@ (80005a8 <HAL_SPI_MspInit+0x90>)
 800057c:	f000 fbb0 	bl	8000ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000580:	2340      	movs	r3, #64	@ 0x40
 8000582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4619      	mov	r1, r3
 8000592:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <HAL_SPI_MspInit+0x90>)
 8000594:	f000 fba4 	bl	8000ce0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000598:	bf00      	nop
 800059a:	3720      	adds	r7, #32
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40013000 	.word	0x40013000
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40010800 	.word	0x40010800

080005ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000644 <HAL_UART_MspInit+0x98>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d137      	bne.n	800063c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <HAL_UART_MspInit+0x9c>)
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000648 <HAL_UART_MspInit+0x9c>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d6:	61d3      	str	r3, [r2, #28]
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <HAL_UART_MspInit+0x9c>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <HAL_UART_MspInit+0x9c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <HAL_UART_MspInit+0x9c>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <HAL_UART_MspInit+0x9c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005fc:	2304      	movs	r3, #4
 80005fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000604:	2303      	movs	r3, #3
 8000606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4619      	mov	r1, r3
 800060e:	480f      	ldr	r0, [pc, #60]	@ (800064c <HAL_UART_MspInit+0xa0>)
 8000610:	f000 fb66 	bl	8000ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000614:	2308      	movs	r3, #8
 8000616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4809      	ldr	r0, [pc, #36]	@ (800064c <HAL_UART_MspInit+0xa0>)
 8000628:	f000 fb5a 	bl	8000ce0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	2026      	movs	r0, #38	@ 0x26
 8000632:	f000 fa6c 	bl	8000b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000636:	2026      	movs	r0, #38	@ 0x26
 8000638:	f000 fa85 	bl	8000b46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40004400 	.word	0x40004400
 8000648:	40021000 	.word	0x40021000
 800064c:	40010800 	.word	0x40010800

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <NMI_Handler+0x4>

08000658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <MemManage_Handler+0x4>

08000668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <UsageFault_Handler+0x4>

08000678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a0:	f000 f91e 	bl	80008e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006ac:	4802      	ldr	r0, [pc, #8]	@ (80006b8 <USART2_IRQHandler+0x10>)
 80006ae:	f001 fc85 	bl	8001fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000dc 	.word	0x200000dc

080006bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e00a      	b.n	80006e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006ce:	f3af 8000 	nop.w
 80006d2:	4601      	mov	r1, r0
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	60ba      	str	r2, [r7, #8]
 80006da:	b2ca      	uxtb	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	3301      	adds	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dbf0      	blt.n	80006ce <_read+0x12>
  }

  return len;
 80006ec:	687b      	ldr	r3, [r7, #4]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b086      	sub	sp, #24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	e009      	b.n	800071c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	60ba      	str	r2, [r7, #8]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff feb7 	bl	8000484 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	dbf1      	blt.n	8000708 <_write+0x12>
  }
  return len;
 8000724:	687b      	ldr	r3, [r7, #4]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_close>:

int _close(int file)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800073a:	4618      	mov	r0, r3
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000754:	605a      	str	r2, [r3, #4]
  return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <_isatty>:

int _isatty(int file)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000776:	b480      	push	{r7}
 8000778:	b085      	sub	sp, #20
 800077a:	af00      	add	r7, sp, #0
 800077c:	60f8      	str	r0, [r7, #12]
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
	...

08000790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000798:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <_sbrk+0x5c>)
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <_sbrk+0x60>)
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <_sbrk+0x64>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	@ (80007f8 <_sbrk+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d207      	bcs.n	80007d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c0:	f002 fb56 	bl	8002e70 <__errno>
 80007c4:	4603      	mov	r3, r0
 80007c6:	220c      	movs	r2, #12
 80007c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	e009      	b.n	80007e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <_sbrk+0x64>)
 80007e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20005000 	.word	0x20005000
 80007f0:	00000400 	.word	0x00000400
 80007f4:	20000130 	.word	0x20000130
 80007f8:	20000288 	.word	0x20000288

080007fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000808:	f7ff fff8 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480b      	ldr	r0, [pc, #44]	@ (800083c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800080e:	490c      	ldr	r1, [pc, #48]	@ (8000840 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000810:	4a0c      	ldr	r2, [pc, #48]	@ (8000844 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a09      	ldr	r2, [pc, #36]	@ (8000848 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000824:	4c09      	ldr	r4, [pc, #36]	@ (800084c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000832:	f002 fb23 	bl	8002e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff fc89 	bl	800014c <main>
  bx lr
 800083a:	4770      	bx	lr
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000844:	08003b34 	.word	0x08003b34
  ldr r2, =_sbss
 8000848:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800084c:	20000284 	.word	0x20000284

08000850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_2_IRQHandler>
	...

08000854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000858:	4b08      	ldr	r3, [pc, #32]	@ (800087c <HAL_Init+0x28>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a07      	ldr	r2, [pc, #28]	@ (800087c <HAL_Init+0x28>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f947 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086a:	200f      	movs	r0, #15
 800086c:	f000 f808 	bl	8000880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000870:	f7ff fe20 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40022000 	.word	0x40022000

08000880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_InitTick+0x54>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_InitTick+0x58>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000896:	fbb3 f3f1 	udiv	r3, r3, r1
 800089a:	fbb2 f3f3 	udiv	r3, r2, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f95f 	bl	8000b62 <HAL_SYSTICK_Config>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00e      	b.n	80008cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d80a      	bhi.n	80008ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b4:	2200      	movs	r2, #0
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f000 f927 	bl	8000b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c0:	4a06      	ldr	r2, [pc, #24]	@ (80008dc <HAL_InitTick+0x5c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	e000      	b.n	80008cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000004 	.word	0x20000004

080008e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_IncTick+0x1c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_IncTick+0x20>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a03      	ldr	r2, [pc, #12]	@ (8000900 <HAL_IncTick+0x20>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000134 	.word	0x20000134

08000904 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b02      	ldr	r3, [pc, #8]	@ (8000914 <HAL_GetTick+0x10>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	20000134 	.word	0x20000134

08000918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000920:	f7ff fff0 	bl	8000904 <HAL_GetTick>
 8000924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000930:	d005      	beq.n	800093e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000932:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <HAL_Delay+0x44>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800093e:	bf00      	nop
 8000940:	f7ff ffe0 	bl	8000904 <HAL_GetTick>
 8000944:	4602      	mov	r2, r0
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d8f7      	bhi.n	8000940 <HAL_Delay+0x28>
  {
  }
}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000008 	.word	0x20000008

08000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000988:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800098c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	@ (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0b      	blt.n	80009ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 021f 	and.w	r2, r3, #31
 80009dc:	4906      	ldr	r1, [pc, #24]	@ (80009f8 <__NVIC_EnableIRQ+0x34>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	@ (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	@ (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	@ 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	@ 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f7ff ff90 	bl	80009fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff2d 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff42 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff90 	bl	8000a50 <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5f 	bl	80009fc <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff35 	bl	80009c4 <__NVIC_EnableIRQ>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffa2 	bl	8000ab4 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b085      	sub	sp, #20
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d008      	beq.n	8000ba4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2204      	movs	r2, #4
 8000b96:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e020      	b.n	8000be6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 020e 	bic.w	r2, r2, #14
 8000bb2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 0201 	bic.w	r2, r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d005      	beq.n	8000c14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e051      	b.n	8000cb8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 020e 	bic.w	r2, r2, #14
 8000c22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f022 0201 	bic.w	r2, r2, #1
 8000c32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a22      	ldr	r2, [pc, #136]	@ (8000cc4 <HAL_DMA_Abort_IT+0xd4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d029      	beq.n	8000c92 <HAL_DMA_Abort_IT+0xa2>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a21      	ldr	r2, [pc, #132]	@ (8000cc8 <HAL_DMA_Abort_IT+0xd8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d022      	beq.n	8000c8e <HAL_DMA_Abort_IT+0x9e>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000ccc <HAL_DMA_Abort_IT+0xdc>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d01a      	beq.n	8000c88 <HAL_DMA_Abort_IT+0x98>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd0 <HAL_DMA_Abort_IT+0xe0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d012      	beq.n	8000c82 <HAL_DMA_Abort_IT+0x92>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd4 <HAL_DMA_Abort_IT+0xe4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00a      	beq.n	8000c7c <HAL_DMA_Abort_IT+0x8c>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <HAL_DMA_Abort_IT+0xe8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d102      	bne.n	8000c76 <HAL_DMA_Abort_IT+0x86>
 8000c70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c74:	e00e      	b.n	8000c94 <HAL_DMA_Abort_IT+0xa4>
 8000c76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c7a:	e00b      	b.n	8000c94 <HAL_DMA_Abort_IT+0xa4>
 8000c7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c80:	e008      	b.n	8000c94 <HAL_DMA_Abort_IT+0xa4>
 8000c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c86:	e005      	b.n	8000c94 <HAL_DMA_Abort_IT+0xa4>
 8000c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8c:	e002      	b.n	8000c94 <HAL_DMA_Abort_IT+0xa4>
 8000c8e:	2310      	movs	r3, #16
 8000c90:	e000      	b.n	8000c94 <HAL_DMA_Abort_IT+0xa4>
 8000c92:	2301      	movs	r3, #1
 8000c94:	4a11      	ldr	r2, [pc, #68]	@ (8000cdc <HAL_DMA_Abort_IT+0xec>)
 8000c96:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	4798      	blx	r3
    } 
  }
  return status;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40020008 	.word	0x40020008
 8000cc8:	4002001c 	.word	0x4002001c
 8000ccc:	40020030 	.word	0x40020030
 8000cd0:	40020044 	.word	0x40020044
 8000cd4:	40020058 	.word	0x40020058
 8000cd8:	4002006c 	.word	0x4002006c
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b08b      	sub	sp, #44	@ 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf2:	e169      	b.n	8000fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	69fa      	ldr	r2, [r7, #28]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	f040 8158 	bne.w	8000fc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	4a9a      	ldr	r2, [pc, #616]	@ (8000f80 <HAL_GPIO_Init+0x2a0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d05e      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d1c:	4a98      	ldr	r2, [pc, #608]	@ (8000f80 <HAL_GPIO_Init+0x2a0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d875      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d22:	4a98      	ldr	r2, [pc, #608]	@ (8000f84 <HAL_GPIO_Init+0x2a4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d058      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d28:	4a96      	ldr	r2, [pc, #600]	@ (8000f84 <HAL_GPIO_Init+0x2a4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d86f      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d2e:	4a96      	ldr	r2, [pc, #600]	@ (8000f88 <HAL_GPIO_Init+0x2a8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d052      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d34:	4a94      	ldr	r2, [pc, #592]	@ (8000f88 <HAL_GPIO_Init+0x2a8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d869      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d3a:	4a94      	ldr	r2, [pc, #592]	@ (8000f8c <HAL_GPIO_Init+0x2ac>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d04c      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d40:	4a92      	ldr	r2, [pc, #584]	@ (8000f8c <HAL_GPIO_Init+0x2ac>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d863      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d46:	4a92      	ldr	r2, [pc, #584]	@ (8000f90 <HAL_GPIO_Init+0x2b0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d046      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d4c:	4a90      	ldr	r2, [pc, #576]	@ (8000f90 <HAL_GPIO_Init+0x2b0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d85d      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d52:	2b12      	cmp	r3, #18
 8000d54:	d82a      	bhi.n	8000dac <HAL_GPIO_Init+0xcc>
 8000d56:	2b12      	cmp	r3, #18
 8000d58:	d859      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d60 <HAL_GPIO_Init+0x80>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000ddb 	.word	0x08000ddb
 8000d64:	08000db5 	.word	0x08000db5
 8000d68:	08000dc7 	.word	0x08000dc7
 8000d6c:	08000e09 	.word	0x08000e09
 8000d70:	08000e0f 	.word	0x08000e0f
 8000d74:	08000e0f 	.word	0x08000e0f
 8000d78:	08000e0f 	.word	0x08000e0f
 8000d7c:	08000e0f 	.word	0x08000e0f
 8000d80:	08000e0f 	.word	0x08000e0f
 8000d84:	08000e0f 	.word	0x08000e0f
 8000d88:	08000e0f 	.word	0x08000e0f
 8000d8c:	08000e0f 	.word	0x08000e0f
 8000d90:	08000e0f 	.word	0x08000e0f
 8000d94:	08000e0f 	.word	0x08000e0f
 8000d98:	08000e0f 	.word	0x08000e0f
 8000d9c:	08000e0f 	.word	0x08000e0f
 8000da0:	08000e0f 	.word	0x08000e0f
 8000da4:	08000dbd 	.word	0x08000dbd
 8000da8:	08000dd1 	.word	0x08000dd1
 8000dac:	4a79      	ldr	r2, [pc, #484]	@ (8000f94 <HAL_GPIO_Init+0x2b4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d013      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000db2:	e02c      	b.n	8000e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	623b      	str	r3, [r7, #32]
          break;
 8000dba:	e029      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	623b      	str	r3, [r7, #32]
          break;
 8000dc4:	e024      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	3308      	adds	r3, #8
 8000dcc:	623b      	str	r3, [r7, #32]
          break;
 8000dce:	e01f      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	330c      	adds	r3, #12
 8000dd6:	623b      	str	r3, [r7, #32]
          break;
 8000dd8:	e01a      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000de2:	2304      	movs	r3, #4
 8000de4:	623b      	str	r3, [r7, #32]
          break;
 8000de6:	e013      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d105      	bne.n	8000dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df0:	2308      	movs	r3, #8
 8000df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	611a      	str	r2, [r3, #16]
          break;
 8000dfa:	e009      	b.n	8000e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	615a      	str	r2, [r3, #20]
          break;
 8000e06:	e003      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
          break;
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          break;
 8000e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	2bff      	cmp	r3, #255	@ 0xff
 8000e14:	d801      	bhi.n	8000e1a <HAL_GPIO_Init+0x13a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	e001      	b.n	8000e1e <HAL_GPIO_Init+0x13e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2bff      	cmp	r3, #255	@ 0xff
 8000e24:	d802      	bhi.n	8000e2c <HAL_GPIO_Init+0x14c>
 8000e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	e002      	b.n	8000e32 <HAL_GPIO_Init+0x152>
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2e:	3b08      	subs	r3, #8
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	210f      	movs	r1, #15
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	401a      	ands	r2, r3
 8000e44:	6a39      	ldr	r1, [r7, #32]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 80b1 	beq.w	8000fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e60:	4b4d      	ldr	r3, [pc, #308]	@ (8000f98 <HAL_GPIO_Init+0x2b8>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a4c      	ldr	r2, [pc, #304]	@ (8000f98 <HAL_GPIO_Init+0x2b8>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8000f98 <HAL_GPIO_Init+0x2b8>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e78:	4a48      	ldr	r2, [pc, #288]	@ (8000f9c <HAL_GPIO_Init+0x2bc>)
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a40      	ldr	r2, [pc, #256]	@ (8000fa0 <HAL_GPIO_Init+0x2c0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d013      	beq.n	8000ecc <HAL_GPIO_Init+0x1ec>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8000fa4 <HAL_GPIO_Init+0x2c4>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d00d      	beq.n	8000ec8 <HAL_GPIO_Init+0x1e8>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a3e      	ldr	r2, [pc, #248]	@ (8000fa8 <HAL_GPIO_Init+0x2c8>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d007      	beq.n	8000ec4 <HAL_GPIO_Init+0x1e4>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fac <HAL_GPIO_Init+0x2cc>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d101      	bne.n	8000ec0 <HAL_GPIO_Init+0x1e0>
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ede:	492f      	ldr	r1, [pc, #188]	@ (8000f9c <HAL_GPIO_Init+0x2bc>)
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	492c      	ldr	r1, [pc, #176]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	608b      	str	r3, [r1, #8]
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f06:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4928      	ldr	r1, [pc, #160]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f20:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	4922      	ldr	r1, [pc, #136]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	60cb      	str	r3, [r1, #12]
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	491e      	ldr	r1, [pc, #120]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	4918      	ldr	r1, [pc, #96]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	604b      	str	r3, [r1, #4]
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f56:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4914      	ldr	r1, [pc, #80]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d021      	beq.n	8000fb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	490e      	ldr	r1, [pc, #56]	@ (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
 8000f7c:	e021      	b.n	8000fc2 <HAL_GPIO_Init+0x2e2>
 8000f7e:	bf00      	nop
 8000f80:	10320000 	.word	0x10320000
 8000f84:	10310000 	.word	0x10310000
 8000f88:	10220000 	.word	0x10220000
 8000f8c:	10210000 	.word	0x10210000
 8000f90:	10120000 	.word	0x10120000
 8000f94:	10110000 	.word	0x10110000
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40011400 	.word	0x40011400
 8000fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <HAL_GPIO_Init+0x304>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	4909      	ldr	r1, [pc, #36]	@ (8000fe4 <HAL_GPIO_Init+0x304>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fce:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f47f ae8e 	bne.w	8000cf4 <HAL_GPIO_Init+0x14>
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	372c      	adds	r7, #44	@ 0x2c
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001004:	e003      	b.n	800100e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	041a      	lsls	r2, r3, #16
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	611a      	str	r2, [r3, #16]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e272      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8087 	beq.w	8001146 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001038:	4b92      	ldr	r3, [pc, #584]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 030c 	and.w	r3, r3, #12
 8001040:	2b04      	cmp	r3, #4
 8001042:	d00c      	beq.n	800105e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001044:	4b8f      	ldr	r3, [pc, #572]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 030c 	and.w	r3, r3, #12
 800104c:	2b08      	cmp	r3, #8
 800104e:	d112      	bne.n	8001076 <HAL_RCC_OscConfig+0x5e>
 8001050:	4b8c      	ldr	r3, [pc, #560]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800105c:	d10b      	bne.n	8001076 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105e:	4b89      	ldr	r3, [pc, #548]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d06c      	beq.n	8001144 <HAL_RCC_OscConfig+0x12c>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d168      	bne.n	8001144 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e24c      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800107e:	d106      	bne.n	800108e <HAL_RCC_OscConfig+0x76>
 8001080:	4b80      	ldr	r3, [pc, #512]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a7f      	ldr	r2, [pc, #508]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	e02e      	b.n	80010ec <HAL_RCC_OscConfig+0xd4>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x98>
 8001096:	4b7b      	ldr	r3, [pc, #492]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a7a      	ldr	r2, [pc, #488]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 800109c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b78      	ldr	r3, [pc, #480]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a77      	ldr	r2, [pc, #476]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e01d      	b.n	80010ec <HAL_RCC_OscConfig+0xd4>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0xbc>
 80010ba:	4b72      	ldr	r3, [pc, #456]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a71      	ldr	r2, [pc, #452]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e00b      	b.n	80010ec <HAL_RCC_OscConfig+0xd4>
 80010d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b68      	ldr	r3, [pc, #416]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a67      	ldr	r2, [pc, #412]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d013      	beq.n	800111c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fc06 	bl	8000904 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fc02 	bl	8000904 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	@ 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e200      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	4b5d      	ldr	r3, [pc, #372]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0xe4>
 800111a:	e014      	b.n	8001146 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fbf2 	bl	8000904 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001124:	f7ff fbee 	bl	8000904 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	@ 0x64
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1ec      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001136:	4b53      	ldr	r3, [pc, #332]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0x10c>
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d063      	beq.n	800121a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001152:	4b4c      	ldr	r3, [pc, #304]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00b      	beq.n	8001176 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800115e:	4b49      	ldr	r3, [pc, #292]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b08      	cmp	r3, #8
 8001168:	d11c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x18c>
 800116a:	4b46      	ldr	r3, [pc, #280]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d116      	bne.n	80011a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001176:	4b43      	ldr	r3, [pc, #268]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <HAL_RCC_OscConfig+0x176>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d001      	beq.n	800118e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e1c0      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	4b3d      	ldr	r3, [pc, #244]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4939      	ldr	r1, [pc, #228]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	e03a      	b.n	800121a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d020      	beq.n	80011ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ac:	4b36      	ldr	r3, [pc, #216]	@ (8001288 <HAL_RCC_OscConfig+0x270>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fba7 	bl	8000904 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ba:	f7ff fba3 	bl	8000904 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e1a1      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4927      	ldr	r1, [pc, #156]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	600b      	str	r3, [r1, #0]
 80011ec:	e015      	b.n	800121a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ee:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <HAL_RCC_OscConfig+0x270>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fb86 	bl	8000904 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fc:	f7ff fb82 	bl	8000904 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e180      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d03a      	beq.n	800129c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d019      	beq.n	8001262 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <HAL_RCC_OscConfig+0x274>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001234:	f7ff fb66 	bl	8000904 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff fb62 	bl	8000904 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e160      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 face 	bl	80017fc <RCC_Delay>
 8001260:	e01c      	b.n	800129c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_RCC_OscConfig+0x274>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fb4c 	bl	8000904 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126e:	e00f      	b.n	8001290 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fb48 	bl	8000904 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d908      	bls.n	8001290 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e146      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	42420000 	.word	0x42420000
 800128c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001290:	4b92      	ldr	r3, [pc, #584]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1e9      	bne.n	8001270 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80a6 	beq.w	80013f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ae:	4b8b      	ldr	r3, [pc, #556]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10d      	bne.n	80012d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b88      	ldr	r3, [pc, #544]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a87      	ldr	r2, [pc, #540]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b85      	ldr	r3, [pc, #532]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d2:	2301      	movs	r3, #1
 80012d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d6:	4b82      	ldr	r3, [pc, #520]	@ (80014e0 <HAL_RCC_OscConfig+0x4c8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d118      	bne.n	8001314 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e2:	4b7f      	ldr	r3, [pc, #508]	@ (80014e0 <HAL_RCC_OscConfig+0x4c8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a7e      	ldr	r2, [pc, #504]	@ (80014e0 <HAL_RCC_OscConfig+0x4c8>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fb09 	bl	8000904 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f6:	f7ff fb05 	bl	8000904 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b64      	cmp	r3, #100	@ 0x64
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e103      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	4b75      	ldr	r3, [pc, #468]	@ (80014e0 <HAL_RCC_OscConfig+0x4c8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d106      	bne.n	800132a <HAL_RCC_OscConfig+0x312>
 800131c:	4b6f      	ldr	r3, [pc, #444]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4a6e      	ldr	r2, [pc, #440]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6213      	str	r3, [r2, #32]
 8001328:	e02d      	b.n	8001386 <HAL_RCC_OscConfig+0x36e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10c      	bne.n	800134c <HAL_RCC_OscConfig+0x334>
 8001332:	4b6a      	ldr	r3, [pc, #424]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4a69      	ldr	r2, [pc, #420]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6213      	str	r3, [r2, #32]
 800133e:	4b67      	ldr	r3, [pc, #412]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	4a66      	ldr	r2, [pc, #408]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001344:	f023 0304 	bic.w	r3, r3, #4
 8001348:	6213      	str	r3, [r2, #32]
 800134a:	e01c      	b.n	8001386 <HAL_RCC_OscConfig+0x36e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d10c      	bne.n	800136e <HAL_RCC_OscConfig+0x356>
 8001354:	4b61      	ldr	r3, [pc, #388]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a60      	ldr	r2, [pc, #384]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	4b5e      	ldr	r3, [pc, #376]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4a5d      	ldr	r2, [pc, #372]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6213      	str	r3, [r2, #32]
 800136c:	e00b      	b.n	8001386 <HAL_RCC_OscConfig+0x36e>
 800136e:	4b5b      	ldr	r3, [pc, #364]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4a5a      	ldr	r2, [pc, #360]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6213      	str	r3, [r2, #32]
 800137a:	4b58      	ldr	r3, [pc, #352]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4a57      	ldr	r2, [pc, #348]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d015      	beq.n	80013ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff fab9 	bl	8000904 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001394:	e00a      	b.n	80013ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff fab5 	bl	8000904 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0b1      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ac:	4b4b      	ldr	r3, [pc, #300]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ee      	beq.n	8001396 <HAL_RCC_OscConfig+0x37e>
 80013b8:	e014      	b.n	80013e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff faa3 	bl	8000904 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff fa9f 	bl	8000904 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e09b      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d8:	4b40      	ldr	r3, [pc, #256]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ee      	bne.n	80013c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d105      	bne.n	80013f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ea:	4b3c      	ldr	r3, [pc, #240]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a3b      	ldr	r2, [pc, #236]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8087 	beq.w	800150e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001400:	4b36      	ldr	r3, [pc, #216]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d061      	beq.n	80014d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d146      	bne.n	80014a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001414:	4b33      	ldr	r3, [pc, #204]	@ (80014e4 <HAL_RCC_OscConfig+0x4cc>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fa73 	bl	8000904 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff fa6f 	bl	8000904 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e06d      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001434:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001448:	d108      	bne.n	800145c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800144a:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	4921      	ldr	r1, [pc, #132]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a19      	ldr	r1, [r3, #32]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	430b      	orrs	r3, r1
 800146e:	491b      	ldr	r1, [pc, #108]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <HAL_RCC_OscConfig+0x4cc>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fa43 	bl	8000904 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fa3f 	bl	8000904 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e03d      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x46a>
 80014a0:	e035      	b.n	800150e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <HAL_RCC_OscConfig+0x4cc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fa2c 	bl	8000904 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fa28 	bl	8000904 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e026      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x498>
 80014ce:	e01e      	b.n	800150e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e019      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40007000 	.word	0x40007000
 80014e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <HAL_RCC_OscConfig+0x500>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0d0      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b6a      	ldr	r3, [pc, #424]	@ (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d910      	bls.n	8001560 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b67      	ldr	r3, [pc, #412]	@ (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 0207 	bic.w	r2, r3, #7
 8001546:	4965      	ldr	r1, [pc, #404]	@ (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154e:	4b63      	ldr	r3, [pc, #396]	@ (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0b8      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001578:	4b59      	ldr	r3, [pc, #356]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a58      	ldr	r2, [pc, #352]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001582:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001590:	4b53      	ldr	r3, [pc, #332]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a52      	ldr	r2, [pc, #328]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800159a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159c:	4b50      	ldr	r3, [pc, #320]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	494d      	ldr	r1, [pc, #308]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d040      	beq.n	800163c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	4b47      	ldr	r3, [pc, #284]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d115      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e07f      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015da:	4b41      	ldr	r3, [pc, #260]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e073      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ea:	4b3d      	ldr	r3, [pc, #244]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06b      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	4b39      	ldr	r3, [pc, #228]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f023 0203 	bic.w	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4936      	ldr	r1, [pc, #216]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800160c:	f7ff f97a 	bl	8000904 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	e00a      	b.n	800162a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff f976 	bl	8000904 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e053      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 020c 	and.w	r2, r3, #12
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	429a      	cmp	r2, r3
 800163a:	d1eb      	bne.n	8001614 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800163c:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d210      	bcs.n	800166c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 0207 	bic.w	r2, r3, #7
 8001652:	4922      	ldr	r1, [pc, #136]	@ (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e032      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001678:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4916      	ldr	r1, [pc, #88]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d009      	beq.n	80016aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001696:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	490e      	ldr	r1, [pc, #56]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016aa:	f000 f821 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	490a      	ldr	r1, [pc, #40]	@ (80016e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016bc:	5ccb      	ldrb	r3, [r1, r3]
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	4a09      	ldr	r2, [pc, #36]	@ (80016e8 <HAL_RCC_ClockConfig+0x1cc>)
 80016c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <HAL_RCC_ClockConfig+0x1d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f8d8 	bl	8000880 <HAL_InitTick>

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	08003acc 	.word	0x08003acc
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800170a:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x94>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b04      	cmp	r3, #4
 8001718:	d002      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x30>
 800171a:	2b08      	cmp	r3, #8
 800171c:	d003      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x36>
 800171e:	e027      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_RCC_GetSysClockFreq+0x98>)
 8001722:	613b      	str	r3, [r7, #16]
      break;
 8001724:	e027      	b.n	8001776 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d010      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x94>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	0c5b      	lsrs	r3, r3, #17
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	4a11      	ldr	r2, [pc, #68]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xa0>)
 800174a:	5cd3      	ldrb	r3, [r2, r3]
 800174c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a0d      	ldr	r2, [pc, #52]	@ (8001788 <HAL_RCC_GetSysClockFreq+0x98>)
 8001752:	fb03 f202 	mul.w	r2, r3, r2
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	fbb2 f3f3 	udiv	r3, r2, r3
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	e004      	b.n	800176a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a0c      	ldr	r2, [pc, #48]	@ (8001794 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001764:	fb02 f303 	mul.w	r3, r2, r3
 8001768:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	613b      	str	r3, [r7, #16]
      break;
 800176e:	e002      	b.n	8001776 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001770:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <HAL_RCC_GetSysClockFreq+0x98>)
 8001772:	613b      	str	r3, [r7, #16]
      break;
 8001774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001776:	693b      	ldr	r3, [r7, #16]
}
 8001778:	4618      	mov	r0, r3
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	007a1200 	.word	0x007a1200
 800178c:	08003ae4 	.word	0x08003ae4
 8001790:	08003af4 	.word	0x08003af4
 8001794:	003d0900 	.word	0x003d0900

08001798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800179c:	4b02      	ldr	r3, [pc, #8]	@ (80017a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	20000000 	.word	0x20000000

080017ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017b0:	f7ff fff2 	bl	8001798 <HAL_RCC_GetHCLKFreq>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	4903      	ldr	r1, [pc, #12]	@ (80017d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017c2:	5ccb      	ldrb	r3, [r1, r3]
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	08003adc 	.word	0x08003adc

080017d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017d8:	f7ff ffde 	bl	8001798 <HAL_RCC_GetHCLKFreq>
 80017dc:	4602      	mov	r2, r0
 80017de:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	0adb      	lsrs	r3, r3, #11
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	4903      	ldr	r1, [pc, #12]	@ (80017f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017ea:	5ccb      	ldrb	r3, [r1, r3]
 80017ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000
 80017f8:	08003adc 	.word	0x08003adc

080017fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <RCC_Delay+0x34>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <RCC_Delay+0x38>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0a5b      	lsrs	r3, r3, #9
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001818:	bf00      	nop
  }
  while (Delay --);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1e5a      	subs	r2, r3, #1
 800181e:	60fa      	str	r2, [r7, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f9      	bne.n	8001818 <RCC_Delay+0x1c>
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	20000000 	.word	0x20000000
 8001834:	10624dd3 	.word	0x10624dd3

08001838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e076      	b.n	8001938 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	2b00      	cmp	r3, #0
 8001850:	d108      	bne.n	8001864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800185a:	d009      	beq.n	8001870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
 8001862:	e005      	b.n	8001870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7fe fe44 	bl	8000518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f4:	ea42 0103 	orr.w	r1, r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	0c1a      	lsrs	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f002 0204 	and.w	r2, r2, #4
 8001916:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001926:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	@ 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800194e:	2301      	movs	r3, #1
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001952:	f7fe ffd7 	bl	8000904 <HAL_GetTick>
 8001956:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800195e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800196a:	7ffb      	ldrb	r3, [r7, #31]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d00c      	beq.n	800198a <HAL_SPI_TransmitReceive+0x4a>
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001976:	d106      	bne.n	8001986 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <HAL_SPI_TransmitReceive+0x46>
 8001980:	7ffb      	ldrb	r3, [r7, #31]
 8001982:	2b04      	cmp	r3, #4
 8001984:	d001      	beq.n	800198a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001986:	2302      	movs	r3, #2
 8001988:	e17f      	b.n	8001c8a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_SPI_TransmitReceive+0x5c>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <HAL_SPI_TransmitReceive+0x5c>
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e174      	b.n	8001c8a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_SPI_TransmitReceive+0x6e>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e16d      	b.n	8001c8a <HAL_SPI_TransmitReceive+0x34a>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d003      	beq.n	80019ca <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2205      	movs	r2, #5
 80019c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	887a      	ldrh	r2, [r7, #2]
 80019da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	887a      	ldrh	r2, [r7, #2]
 80019f2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a0a:	2b40      	cmp	r3, #64	@ 0x40
 8001a0c:	d007      	beq.n	8001a1e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a26:	d17e      	bne.n	8001b26 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <HAL_SPI_TransmitReceive+0xf6>
 8001a30:	8afb      	ldrh	r3, [r7, #22]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d16c      	bne.n	8001b10 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	1c9a      	adds	r2, r3, #2
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a5a:	e059      	b.n	8001b10 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d11b      	bne.n	8001aa2 <HAL_SPI_TransmitReceive+0x162>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d016      	beq.n	8001aa2 <HAL_SPI_TransmitReceive+0x162>
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d113      	bne.n	8001aa2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	881a      	ldrh	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	1c9a      	adds	r2, r3, #2
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d119      	bne.n	8001ae4 <HAL_SPI_TransmitReceive+0x1a4>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d014      	beq.n	8001ae4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001acc:	1c9a      	adds	r2, r3, #2
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ae4:	f7fe ff0e 	bl	8000904 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d80d      	bhi.n	8001b10 <HAL_SPI_TransmitReceive+0x1d0>
 8001af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afa:	d009      	beq.n	8001b10 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e0bc      	b.n	8001c8a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1a0      	bne.n	8001a5c <HAL_SPI_TransmitReceive+0x11c>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d19b      	bne.n	8001a5c <HAL_SPI_TransmitReceive+0x11c>
 8001b24:	e082      	b.n	8001c2c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_SPI_TransmitReceive+0x1f4>
 8001b2e:	8afb      	ldrh	r3, [r7, #22]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d171      	bne.n	8001c18 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	7812      	ldrb	r2, [r2, #0]
 8001b40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b5a:	e05d      	b.n	8001c18 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d11c      	bne.n	8001ba4 <HAL_SPI_TransmitReceive+0x264>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d017      	beq.n	8001ba4 <HAL_SPI_TransmitReceive+0x264>
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d114      	bne.n	8001ba4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	330c      	adds	r3, #12
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d119      	bne.n	8001be6 <HAL_SPI_TransmitReceive+0x2a6>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d014      	beq.n	8001be6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001be2:	2301      	movs	r3, #1
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001be6:	f7fe fe8d 	bl	8000904 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d803      	bhi.n	8001bfe <HAL_SPI_TransmitReceive+0x2be>
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfc:	d102      	bne.n	8001c04 <HAL_SPI_TransmitReceive+0x2c4>
 8001bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e038      	b.n	8001c8a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d19c      	bne.n	8001b5c <HAL_SPI_TransmitReceive+0x21c>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d197      	bne.n	8001b5c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f8b7 	bl	8001da4 <SPI_EndRxTxTransaction>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e01d      	b.n	8001c8a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8001c88:	2300      	movs	r3, #0
  }
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3728      	adds	r7, #40	@ 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ca4:	f7fe fe2e 	bl	8000904 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001cb4:	f7fe fe26 	bl	8000904 <HAL_GetTick>
 8001cb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001cba:	4b39      	ldr	r3, [pc, #228]	@ (8001da0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	015b      	lsls	r3, r3, #5
 8001cc0:	0d1b      	lsrs	r3, r3, #20
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cca:	e054      	b.n	8001d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd2:	d050      	beq.n	8001d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001cd4:	f7fe fe16 	bl	8000904 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d902      	bls.n	8001cea <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d13d      	bne.n	8001d66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001cf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d02:	d111      	bne.n	8001d28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d0c:	d004      	beq.n	8001d18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d16:	d107      	bne.n	8001d28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d30:	d10f      	bne.n	8001d52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e017      	b.n	8001d96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	bf0c      	ite	eq
 8001d86:	2301      	moveq	r3, #1
 8001d88:	2300      	movne	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d19b      	bne.n	8001ccc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000

08001da4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2201      	movs	r2, #1
 8001db8:	2102      	movs	r1, #2
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7ff ff6a 	bl	8001c94 <SPI_WaitFlagStateUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dca:	f043 0220 	orr.w	r2, r3, #32
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e013      	b.n	8001dfe <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2180      	movs	r1, #128	@ 0x80
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7ff ff57 	bl	8001c94 <SPI_WaitFlagStateUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e042      	b.n	8001e9e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d106      	bne.n	8001e32 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7fe fbbd 	bl	80005ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2224      	movs	r2, #36	@ 0x24
 8001e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fd62 	bl	8002914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e6e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e7e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b08a      	sub	sp, #40	@ 0x28
 8001eaa:	af02      	add	r7, sp, #8
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d175      	bne.n	8001fb2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_UART_Transmit+0x2c>
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06e      	b.n	8001fb4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2221      	movs	r2, #33	@ 0x21
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ee4:	f7fe fd0e 	bl	8000904 <HAL_GetTick>
 8001ee8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	88fa      	ldrh	r2, [r7, #6]
 8001eee:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	88fa      	ldrh	r2, [r7, #6]
 8001ef4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001efe:	d108      	bne.n	8001f12 <HAL_UART_Transmit+0x6c>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d104      	bne.n	8001f12 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	e003      	b.n	8001f1a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f1a:	e02e      	b.n	8001f7a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2200      	movs	r2, #0
 8001f24:	2180      	movs	r1, #128	@ 0x80
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fb00 	bl	800252c <UART_WaitOnFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e03a      	b.n	8001fb4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10b      	bne.n	8001f5c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f52:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	3302      	adds	r3, #2
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	e007      	b.n	8001f6c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1cb      	bne.n	8001f1c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2140      	movs	r1, #64	@ 0x40
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 facc 	bl	800252c <UART_WaitOnFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e006      	b.n	8001fb4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
  }
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0ba      	sub	sp, #232	@ 0xe8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10f      	bne.n	8002022 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <HAL_UART_IRQHandler+0x66>
 800200e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fbbc 	bl	8002798 <UART_Receive_IT>
      return;
 8002020:	e25b      	b.n	80024da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80de 	beq.w	80021e8 <HAL_UART_IRQHandler+0x22c>
 800202c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800203c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80d1 	beq.w	80021e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_UART_IRQHandler+0xae>
 8002052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800206a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_UART_IRQHandler+0xd2>
 8002076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	f043 0202 	orr.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800208e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_UART_IRQHandler+0xf6>
 800209a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020aa:	f043 0204 	orr.w	r2, r3, #4
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d011      	beq.n	80020e2 <HAL_UART_IRQHandler+0x126>
 80020be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d105      	bne.n	80020d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	f043 0208 	orr.w	r2, r3, #8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 81f2 	beq.w	80024d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_UART_IRQHandler+0x14e>
 80020f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 fb47 	bl	8002798 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf14      	ite	ne
 8002118:	2301      	movne	r3, #1
 800211a:	2300      	moveq	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <HAL_UART_IRQHandler+0x17a>
 800212e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d04f      	beq.n	80021d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fa51 	bl	80025de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d041      	beq.n	80021ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3314      	adds	r3, #20
 8002150:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002154:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002158:	e853 3f00 	ldrex	r3, [r3]
 800215c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3314      	adds	r3, #20
 8002172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002176:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800217a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002186:	e841 2300 	strex	r3, r2, [r1]
 800218a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800218e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1d9      	bne.n	800214a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d013      	beq.n	80021c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a2:	4a7e      	ldr	r2, [pc, #504]	@ (800239c <HAL_UART_IRQHandler+0x3e0>)
 80021a4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fd20 	bl	8000bf0 <HAL_DMA_Abort_IT>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021c0:	4610      	mov	r0, r2
 80021c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c4:	e00e      	b.n	80021e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f99c 	bl	8002504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021cc:	e00a      	b.n	80021e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f998 	bl	8002504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d4:	e006      	b.n	80021e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f994 	bl	8002504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80021e2:	e175      	b.n	80024d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e4:	bf00      	nop
    return;
 80021e6:	e173      	b.n	80024d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	f040 814f 	bne.w	8002490 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8148 	beq.w	8002490 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8141 	beq.w	8002490 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80b6 	beq.w	80023a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8145 	beq.w	80024d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800224e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002252:	429a      	cmp	r2, r3
 8002254:	f080 813e 	bcs.w	80024d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800225e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b20      	cmp	r3, #32
 8002268:	f000 8088 	beq.w	800237c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	330c      	adds	r3, #12
 8002272:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002276:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800227a:	e853 3f00 	ldrex	r3, [r3]
 800227e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002282:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002286:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800228a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	330c      	adds	r3, #12
 8002294:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002298:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800229c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022a8:	e841 2300 	strex	r3, r2, [r1]
 80022ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80022b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1d9      	bne.n	800226c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3314      	adds	r3, #20
 80022be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022c2:	e853 3f00 	ldrex	r3, [r3]
 80022c6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80022c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3314      	adds	r3, #20
 80022d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022dc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80022e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80022e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022e8:	e841 2300 	strex	r3, r2, [r1]
 80022ec:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80022ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e1      	bne.n	80022b8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3314      	adds	r3, #20
 80022fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022fe:	e853 3f00 	ldrex	r3, [r3]
 8002302:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800230a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3314      	adds	r3, #20
 8002314:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002318:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800231a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800231e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002320:	e841 2300 	strex	r3, r2, [r1]
 8002324:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002326:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e3      	bne.n	80022f4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	330c      	adds	r3, #12
 8002340:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002344:	e853 3f00 	ldrex	r3, [r3]
 8002348:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800234a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800234c:	f023 0310 	bic.w	r3, r3, #16
 8002350:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	330c      	adds	r3, #12
 800235a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800235e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002360:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002362:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002364:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002366:	e841 2300 	strex	r3, r2, [r1]
 800236a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800236c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1e3      	bne.n	800233a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fbff 	bl	8000b7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800238a:	b29b      	uxth	r3, r3
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	b29b      	uxth	r3, r3
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8bf 	bl	8002516 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002398:	e09c      	b.n	80024d4 <HAL_UART_IRQHandler+0x518>
 800239a:	bf00      	nop
 800239c:	080026a3 	.word	0x080026a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 808e 	beq.w	80024d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8089 	beq.w	80024d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	330c      	adds	r3, #12
 80023cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d0:	e853 3f00 	ldrex	r3, [r3]
 80023d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	330c      	adds	r3, #12
 80023e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80023ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80023ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023f2:	e841 2300 	strex	r3, r2, [r1]
 80023f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e3      	bne.n	80023c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3314      	adds	r3, #20
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	e853 3f00 	ldrex	r3, [r3]
 800240c:	623b      	str	r3, [r7, #32]
   return(result);
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3314      	adds	r3, #20
 800241e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002422:	633a      	str	r2, [r7, #48]	@ 0x30
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800242a:	e841 2300 	strex	r3, r2, [r1]
 800242e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e3      	bne.n	80023fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	330c      	adds	r3, #12
 800244a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	e853 3f00 	ldrex	r3, [r3]
 8002452:	60fb      	str	r3, [r7, #12]
   return(result);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0310 	bic.w	r3, r3, #16
 800245a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	330c      	adds	r3, #12
 8002464:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002468:	61fa      	str	r2, [r7, #28]
 800246a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246c:	69b9      	ldr	r1, [r7, #24]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	e841 2300 	strex	r3, r2, [r1]
 8002474:	617b      	str	r3, [r7, #20]
   return(result);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e3      	bne.n	8002444 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002482:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f844 	bl	8002516 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800248e:	e023      	b.n	80024d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002498:	2b00      	cmp	r3, #0
 800249a:	d009      	beq.n	80024b0 <HAL_UART_IRQHandler+0x4f4>
 800249c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f90e 	bl	80026ca <UART_Transmit_IT>
    return;
 80024ae:	e014      	b.n	80024da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00e      	beq.n	80024da <HAL_UART_IRQHandler+0x51e>
 80024bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f94d 	bl	8002768 <UART_EndTransmit_IT>
    return;
 80024ce:	e004      	b.n	80024da <HAL_UART_IRQHandler+0x51e>
    return;
 80024d0:	bf00      	nop
 80024d2:	e002      	b.n	80024da <HAL_UART_IRQHandler+0x51e>
      return;
 80024d4:	bf00      	nop
 80024d6:	e000      	b.n	80024da <HAL_UART_IRQHandler+0x51e>
      return;
 80024d8:	bf00      	nop
  }
}
 80024da:	37e8      	adds	r7, #232	@ 0xe8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800253c:	e03b      	b.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d037      	beq.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7fe f9dd 	bl	8000904 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	6a3a      	ldr	r2, [r7, #32]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <UART_WaitOnFlagUntilTimeout+0x30>
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e03a      	b.n	80025d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d023      	beq.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b80      	cmp	r3, #128	@ 0x80
 8002572:	d020      	beq.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b40      	cmp	r3, #64	@ 0x40
 8002578:	d01d      	beq.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b08      	cmp	r3, #8
 8002586:	d116      	bne.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f81d 	bl	80025de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2208      	movs	r2, #8
 80025a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e00f      	b.n	80025d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4013      	ands	r3, r2
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	bf0c      	ite	eq
 80025c6:	2301      	moveq	r3, #1
 80025c8:	2300      	movne	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d0b4      	beq.n	800253e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025de:	b480      	push	{r7}
 80025e0:	b095      	sub	sp, #84	@ 0x54
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	330c      	adds	r3, #12
 80025ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f0:	e853 3f00 	ldrex	r3, [r3]
 80025f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	330c      	adds	r3, #12
 8002604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002606:	643a      	str	r2, [r7, #64]	@ 0x40
 8002608:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800260c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800260e:	e841 2300 	strex	r3, r2, [r1]
 8002612:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1e5      	bne.n	80025e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3314      	adds	r3, #20
 8002620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	e853 3f00 	ldrex	r3, [r3]
 8002628:	61fb      	str	r3, [r7, #28]
   return(result);
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3314      	adds	r3, #20
 8002638:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800263a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002642:	e841 2300 	strex	r3, r2, [r1]
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1e5      	bne.n	800261a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	2b01      	cmp	r3, #1
 8002654:	d119      	bne.n	800268a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	330c      	adds	r3, #12
 800265c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	e853 3f00 	ldrex	r3, [r3]
 8002664:	60bb      	str	r3, [r7, #8]
   return(result);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f023 0310 	bic.w	r3, r3, #16
 800266c:	647b      	str	r3, [r7, #68]	@ 0x44
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	330c      	adds	r3, #12
 8002674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002676:	61ba      	str	r2, [r7, #24]
 8002678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267a:	6979      	ldr	r1, [r7, #20]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	e841 2300 	strex	r3, r2, [r1]
 8002682:	613b      	str	r3, [r7, #16]
   return(result);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1e5      	bne.n	8002656 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002698:	bf00      	nop
 800269a:	3754      	adds	r7, #84	@ 0x54
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7ff ff21 	bl	8002504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b21      	cmp	r3, #33	@ 0x21
 80026dc:	d13e      	bne.n	800275c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e6:	d114      	bne.n	8002712 <UART_Transmit_IT+0x48>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d110      	bne.n	8002712 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002704:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	1c9a      	adds	r2, r3, #2
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	621a      	str	r2, [r3, #32]
 8002710:	e008      	b.n	8002724 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	1c59      	adds	r1, r3, #1
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6211      	str	r1, [r2, #32]
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29b      	uxth	r3, r3
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4619      	mov	r1, r3
 8002732:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10f      	bne.n	8002758 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002746:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002756:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	e000      	b.n	800275e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800275c:	2302      	movs	r3, #2
  }
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800277e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff fea9 	bl	80024e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	@ 0x30
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b22      	cmp	r3, #34	@ 0x22
 80027aa:	f040 80ae 	bne.w	800290a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027b6:	d117      	bne.n	80027e8 <UART_Receive_IT+0x50>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d113      	bne.n	80027e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	1c9a      	adds	r2, r3, #2
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80027e6:	e026      	b.n	8002836 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027fa:	d007      	beq.n	800280c <UART_Receive_IT+0x74>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <UART_Receive_IT+0x82>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	e008      	b.n	800282c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002826:	b2da      	uxtb	r2, r3
 8002828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29b      	uxth	r3, r3
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4619      	mov	r1, r3
 8002844:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002846:	2b00      	cmp	r3, #0
 8002848:	d15d      	bne.n	8002906 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0220 	bic.w	r2, r2, #32
 8002858:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002868:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288c:	2b01      	cmp	r3, #1
 800288e:	d135      	bne.n	80028fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	330c      	adds	r3, #12
 800289c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	e853 3f00 	ldrex	r3, [r3]
 80028a4:	613b      	str	r3, [r7, #16]
   return(result);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f023 0310 	bic.w	r3, r3, #16
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	330c      	adds	r3, #12
 80028b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b6:	623a      	str	r2, [r7, #32]
 80028b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ba:	69f9      	ldr	r1, [r7, #28]
 80028bc:	6a3a      	ldr	r2, [r7, #32]
 80028be:	e841 2300 	strex	r3, r2, [r1]
 80028c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1e5      	bne.n	8002896 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d10a      	bne.n	80028ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff fe0e 	bl	8002516 <HAL_UARTEx_RxEventCallback>
 80028fa:	e002      	b.n	8002902 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fdf8 	bl	80024f2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e002      	b.n	800290c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3730      	adds	r7, #48	@ 0x30
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800294e:	f023 030c 	bic.w	r3, r3, #12
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	430b      	orrs	r3, r1
 800295a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2c      	ldr	r2, [pc, #176]	@ (8002a28 <UART_SetConfig+0x114>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d103      	bne.n	8002984 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800297c:	f7fe ff2a 	bl	80017d4 <HAL_RCC_GetPCLK2Freq>
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	e002      	b.n	800298a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002984:	f7fe ff12 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 8002988:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009a      	lsls	r2, r3, #2
 8002994:	441a      	add	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	4a22      	ldr	r2, [pc, #136]	@ (8002a2c <UART_SetConfig+0x118>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	0119      	lsls	r1, r3, #4
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009a      	lsls	r2, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <UART_SetConfig+0x118>)
 80029c2:	fba3 0302 	umull	r0, r3, r3, r2
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2064      	movs	r0, #100	@ 0x64
 80029ca:	fb00 f303 	mul.w	r3, r0, r3
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	3332      	adds	r3, #50	@ 0x32
 80029d4:	4a15      	ldr	r2, [pc, #84]	@ (8002a2c <UART_SetConfig+0x118>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029e0:	4419      	add	r1, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	009a      	lsls	r2, r3, #2
 80029ec:	441a      	add	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <UART_SetConfig+0x118>)
 80029fa:	fba3 0302 	umull	r0, r3, r3, r2
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2064      	movs	r0, #100	@ 0x64
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	3332      	adds	r3, #50	@ 0x32
 8002a0c:	4a07      	ldr	r2, [pc, #28]	@ (8002a2c <UART_SetConfig+0x118>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	f003 020f 	and.w	r2, r3, #15
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	440a      	add	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	51eb851f 	.word	0x51eb851f

08002a30 <ADE7758_Init>:
 * Prescaler = 8
 * First bit = MBS first
 * CPOL = Low
 */
void ADE7758_Init(ADE7758_SPI *spi, SPI_HandleTypeDef *hspi, GPIO_TypeDef *CS_PORT, uint16_t CS_PIN)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	807b      	strh	r3, [r7, #2]
    spi->hspi = hspi;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	609a      	str	r2, [r3, #8]
    spi->CS_PORT = CS_PORT;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	601a      	str	r2, [r3, #0]
    spi->CS_PIN = CS_PIN;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	887a      	ldrh	r2, [r7, #2]
 8002a4e:	809a      	strh	r2, [r3, #4]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <ADE7758_Write>:
 * @note  CLK: |       7       |  6 |  5 |  4 |  3 |  2 | 1  |  0  |       |  7   | 6  |  5 | 4  | 3  | 2  | 1  | 0  |   ...
 * @note MOSI: | START BIT = 1 | A6 | A5 | A4 | A3 | A2 | A1 | A0  |       |  D7  | D6 | D5 | D4 | D3 | D2 | D1 | D0 |   ...
 * @note MISO: |       X       |  x |  x |  x |  x |  x |  x |  x  |       |  X   | X  | X  | X  | X  | X  | X  | X  |   ...
 */
void ADE7758_Write(ADE7758_SPI *spi, int32_t value, uint8_t address, uint8_t length)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b088      	sub	sp, #32
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	4611      	mov	r1, r2
 8002a66:	461a      	mov	r2, r3
 8002a68:	460b      	mov	r3, r1
 8002a6a:	71fb      	strb	r3, [r7, #7]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	71bb      	strb	r3, [r7, #6]
    /*Declare ADDRESS that we will send*/
    uint8_t pTxData[4] = {0};
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
    pTxData[0] = address | 0x80;
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	753b      	strb	r3, [r7, #20]

    switch (length)
 8002a7e:	79bb      	ldrb	r3, [r7, #6]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d012      	beq.n	8002aaa <ADE7758_Write+0x50>
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	dc1c      	bgt.n	8002ac2 <ADE7758_Write+0x68>
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d002      	beq.n	8002a92 <ADE7758_Write+0x38>
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d004      	beq.n	8002a9a <ADE7758_Write+0x40>
        pTxData[1] = (uint8_t)((value >> 16) & 0xFF);
        pTxData[2] = (uint8_t)((value >> 8) & 0xFF);
        pTxData[3] = (uint8_t)(value & 0xFF);
        break;
    default:
        break;
 8002a90:	e017      	b.n	8002ac2 <ADE7758_Write+0x68>
        pTxData[1] = (uint8_t)(value & 0xFF);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	757b      	strb	r3, [r7, #21]
        break;
 8002a98:	e014      	b.n	8002ac4 <ADE7758_Write+0x6a>
        pTxData[1] = (uint8_t)((value >> 8) & 0xFF);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	121b      	asrs	r3, r3, #8
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	757b      	strb	r3, [r7, #21]
        pTxData[2] = (uint8_t)(value & 0xFF);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	75bb      	strb	r3, [r7, #22]
        break;
 8002aa8:	e00c      	b.n	8002ac4 <ADE7758_Write+0x6a>
        pTxData[1] = (uint8_t)((value >> 16) & 0xFF);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	141b      	asrs	r3, r3, #16
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	757b      	strb	r3, [r7, #21]
        pTxData[2] = (uint8_t)((value >> 8) & 0xFF);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	121b      	asrs	r3, r3, #8
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	75bb      	strb	r3, [r7, #22]
        pTxData[3] = (uint8_t)(value & 0xFF);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	75fb      	strb	r3, [r7, #23]
        break;
 8002ac0:	e000      	b.n	8002ac4 <ADE7758_Write+0x6a>
        break;
 8002ac2:	bf00      	nop
    }

    /*Data that we will get*/
    uint8_t pRxData[4] = {0};
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]

    /*CS low, Send and receive, CS high*/
    HAL_GPIO_WritePin(spi->CS_PORT, spi->CS_PIN, GPIO_PIN_RESET);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	889b      	ldrh	r3, [r3, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f7fe fa88 	bl	8000fe8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(spi->hspi, pTxData, pRxData, 4, 10);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6898      	ldr	r0, [r3, #8]
 8002adc:	f107 0210 	add.w	r2, r7, #16
 8002ae0:	f107 0114 	add.w	r1, r7, #20
 8002ae4:	230a      	movs	r3, #10
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2304      	movs	r3, #4
 8002aea:	f7fe ff29 	bl	8001940 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(spi->CS_PORT, spi->CS_PIN, GPIO_PIN_SET);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	889b      	ldrh	r3, [r3, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7fe fa75 	bl	8000fe8 <HAL_GPIO_WritePin>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <ADE7758_Read>:

int32_t ADE7758_Read(ADE7758_SPI *spi, uint8_t address, uint8_t length)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af02      	add	r7, sp, #8
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70fb      	strb	r3, [r7, #3]
 8002b12:	4613      	mov	r3, r2
 8002b14:	70bb      	strb	r3, [r7, #2]
    /*Declare ADDRESS that we will send*/
    uint8_t pTxData[4] = {0};
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
    pTxData[0] = address;
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	733b      	strb	r3, [r7, #12]

    /*Data that we will get*/
    uint8_t pRxData[4] = {0};
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]

    /*CS low, Send and receive, CS high*/
    HAL_GPIO_WritePin(spi->CS_PORT, spi->CS_PIN, GPIO_PIN_RESET);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	889b      	ldrh	r3, [r3, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe fa5b 	bl	8000fe8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(spi->hspi, pTxData, pRxData, 4, 10);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6898      	ldr	r0, [r3, #8]
 8002b36:	f107 0208 	add.w	r2, r7, #8
 8002b3a:	f107 010c 	add.w	r1, r7, #12
 8002b3e:	230a      	movs	r3, #10
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	2304      	movs	r3, #4
 8002b44:	f7fe fefc 	bl	8001940 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(spi->CS_PORT, spi->CS_PIN, GPIO_PIN_SET);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	889b      	ldrh	r3, [r3, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fe fa48 	bl	8000fe8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002b58:	200a      	movs	r0, #10
 8002b5a:	f7fd fedd 	bl	8000918 <HAL_Delay>

    switch (length)
 8002b5e:	78bb      	ldrb	r3, [r7, #2]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d00e      	beq.n	8002b82 <ADE7758_Read+0x7c>
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	dc16      	bgt.n	8002b96 <ADE7758_Read+0x90>
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d002      	beq.n	8002b72 <ADE7758_Read+0x6c>
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d002      	beq.n	8002b76 <ADE7758_Read+0x70>
    case 3: // Length = 3bytes
        /* code */
        return 0xFFFFFF & (((pRxData[1] & 0xFF) << 16) | ((pRxData[2] & 0xFF) << 8) | (pRxData[3] & 0xFF));
        break;
    default:
        break;
 8002b70:	e011      	b.n	8002b96 <ADE7758_Read+0x90>
        return 0x0000FF & (pRxData[1] & 0xFF);
 8002b72:	7a7b      	ldrb	r3, [r7, #9]
 8002b74:	e012      	b.n	8002b9c <ADE7758_Read+0x96>
        return 0x00FFFF & (((pRxData[1] & 0xFF) << 8) | (pRxData[2] & 0xFF));
 8002b76:	7a7b      	ldrb	r3, [r7, #9]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	7aba      	ldrb	r2, [r7, #10]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	e00c      	b.n	8002b9c <ADE7758_Read+0x96>
        return 0xFFFFFF & (((pRxData[1] & 0xFF) << 16) | ((pRxData[2] & 0xFF) << 8) | (pRxData[3] & 0xFF));
 8002b82:	7a7b      	ldrb	r3, [r7, #9]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	7abb      	ldrb	r3, [r7, #10]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	7afa      	ldrb	r2, [r7, #11]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b94:	e002      	b.n	8002b9c <ADE7758_Read+0x96>
        break;
 8002b96:	bf00      	nop
    }
    return -1;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <std>:
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	b510      	push	{r4, lr}
 8002ba8:	4604      	mov	r4, r0
 8002baa:	e9c0 3300 	strd	r3, r3, [r0]
 8002bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bb2:	6083      	str	r3, [r0, #8]
 8002bb4:	8181      	strh	r1, [r0, #12]
 8002bb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002bb8:	81c2      	strh	r2, [r0, #14]
 8002bba:	6183      	str	r3, [r0, #24]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	305c      	adds	r0, #92	@ 0x5c
 8002bc2:	f000 f906 	bl	8002dd2 <memset>
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <std+0x58>)
 8002bc8:	6224      	str	r4, [r4, #32]
 8002bca:	6263      	str	r3, [r4, #36]	@ 0x24
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <std+0x5c>)
 8002bce:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <std+0x60>)
 8002bd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <std+0x64>)
 8002bd6:	6323      	str	r3, [r4, #48]	@ 0x30
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <std+0x68>)
 8002bda:	429c      	cmp	r4, r3
 8002bdc:	d006      	beq.n	8002bec <std+0x48>
 8002bde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002be2:	4294      	cmp	r4, r2
 8002be4:	d002      	beq.n	8002bec <std+0x48>
 8002be6:	33d0      	adds	r3, #208	@ 0xd0
 8002be8:	429c      	cmp	r4, r3
 8002bea:	d105      	bne.n	8002bf8 <std+0x54>
 8002bec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bf4:	f000 b966 	b.w	8002ec4 <__retarget_lock_init_recursive>
 8002bf8:	bd10      	pop	{r4, pc}
 8002bfa:	bf00      	nop
 8002bfc:	08002d4d 	.word	0x08002d4d
 8002c00:	08002d6f 	.word	0x08002d6f
 8002c04:	08002da7 	.word	0x08002da7
 8002c08:	08002dcb 	.word	0x08002dcb
 8002c0c:	20000138 	.word	0x20000138

08002c10 <stdio_exit_handler>:
 8002c10:	4a02      	ldr	r2, [pc, #8]	@ (8002c1c <stdio_exit_handler+0xc>)
 8002c12:	4903      	ldr	r1, [pc, #12]	@ (8002c20 <stdio_exit_handler+0x10>)
 8002c14:	4803      	ldr	r0, [pc, #12]	@ (8002c24 <stdio_exit_handler+0x14>)
 8002c16:	f000 b869 	b.w	8002cec <_fwalk_sglue>
 8002c1a:	bf00      	nop
 8002c1c:	2000000c 	.word	0x2000000c
 8002c20:	0800375d 	.word	0x0800375d
 8002c24:	2000001c 	.word	0x2000001c

08002c28 <cleanup_stdio>:
 8002c28:	6841      	ldr	r1, [r0, #4]
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <cleanup_stdio+0x34>)
 8002c2c:	b510      	push	{r4, lr}
 8002c2e:	4299      	cmp	r1, r3
 8002c30:	4604      	mov	r4, r0
 8002c32:	d001      	beq.n	8002c38 <cleanup_stdio+0x10>
 8002c34:	f000 fd92 	bl	800375c <_fflush_r>
 8002c38:	68a1      	ldr	r1, [r4, #8]
 8002c3a:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <cleanup_stdio+0x38>)
 8002c3c:	4299      	cmp	r1, r3
 8002c3e:	d002      	beq.n	8002c46 <cleanup_stdio+0x1e>
 8002c40:	4620      	mov	r0, r4
 8002c42:	f000 fd8b 	bl	800375c <_fflush_r>
 8002c46:	68e1      	ldr	r1, [r4, #12]
 8002c48:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <cleanup_stdio+0x3c>)
 8002c4a:	4299      	cmp	r1, r3
 8002c4c:	d004      	beq.n	8002c58 <cleanup_stdio+0x30>
 8002c4e:	4620      	mov	r0, r4
 8002c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c54:	f000 bd82 	b.w	800375c <_fflush_r>
 8002c58:	bd10      	pop	{r4, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000138 	.word	0x20000138
 8002c60:	200001a0 	.word	0x200001a0
 8002c64:	20000208 	.word	0x20000208

08002c68 <global_stdio_init.part.0>:
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <global_stdio_init.part.0+0x30>)
 8002c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8002c9c <global_stdio_init.part.0+0x34>)
 8002c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca0 <global_stdio_init.part.0+0x38>)
 8002c70:	4620      	mov	r0, r4
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	2104      	movs	r1, #4
 8002c76:	2200      	movs	r2, #0
 8002c78:	f7ff ff94 	bl	8002ba4 <std>
 8002c7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c80:	2201      	movs	r2, #1
 8002c82:	2109      	movs	r1, #9
 8002c84:	f7ff ff8e 	bl	8002ba4 <std>
 8002c88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c92:	2112      	movs	r1, #18
 8002c94:	f7ff bf86 	b.w	8002ba4 <std>
 8002c98:	20000270 	.word	0x20000270
 8002c9c:	20000138 	.word	0x20000138
 8002ca0:	08002c11 	.word	0x08002c11

08002ca4 <__sfp_lock_acquire>:
 8002ca4:	4801      	ldr	r0, [pc, #4]	@ (8002cac <__sfp_lock_acquire+0x8>)
 8002ca6:	f000 b90e 	b.w	8002ec6 <__retarget_lock_acquire_recursive>
 8002caa:	bf00      	nop
 8002cac:	20000279 	.word	0x20000279

08002cb0 <__sfp_lock_release>:
 8002cb0:	4801      	ldr	r0, [pc, #4]	@ (8002cb8 <__sfp_lock_release+0x8>)
 8002cb2:	f000 b909 	b.w	8002ec8 <__retarget_lock_release_recursive>
 8002cb6:	bf00      	nop
 8002cb8:	20000279 	.word	0x20000279

08002cbc <__sinit>:
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	f7ff fff0 	bl	8002ca4 <__sfp_lock_acquire>
 8002cc4:	6a23      	ldr	r3, [r4, #32]
 8002cc6:	b11b      	cbz	r3, 8002cd0 <__sinit+0x14>
 8002cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ccc:	f7ff bff0 	b.w	8002cb0 <__sfp_lock_release>
 8002cd0:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <__sinit+0x28>)
 8002cd2:	6223      	str	r3, [r4, #32]
 8002cd4:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <__sinit+0x2c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f5      	bne.n	8002cc8 <__sinit+0xc>
 8002cdc:	f7ff ffc4 	bl	8002c68 <global_stdio_init.part.0>
 8002ce0:	e7f2      	b.n	8002cc8 <__sinit+0xc>
 8002ce2:	bf00      	nop
 8002ce4:	08002c29 	.word	0x08002c29
 8002ce8:	20000270 	.word	0x20000270

08002cec <_fwalk_sglue>:
 8002cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cf0:	4607      	mov	r7, r0
 8002cf2:	4688      	mov	r8, r1
 8002cf4:	4614      	mov	r4, r2
 8002cf6:	2600      	movs	r6, #0
 8002cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8002d00:	d505      	bpl.n	8002d0e <_fwalk_sglue+0x22>
 8002d02:	6824      	ldr	r4, [r4, #0]
 8002d04:	2c00      	cmp	r4, #0
 8002d06:	d1f7      	bne.n	8002cf8 <_fwalk_sglue+0xc>
 8002d08:	4630      	mov	r0, r6
 8002d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d0e:	89ab      	ldrh	r3, [r5, #12]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d907      	bls.n	8002d24 <_fwalk_sglue+0x38>
 8002d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	d003      	beq.n	8002d24 <_fwalk_sglue+0x38>
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	4638      	mov	r0, r7
 8002d20:	47c0      	blx	r8
 8002d22:	4306      	orrs	r6, r0
 8002d24:	3568      	adds	r5, #104	@ 0x68
 8002d26:	e7e9      	b.n	8002cfc <_fwalk_sglue+0x10>

08002d28 <iprintf>:
 8002d28:	b40f      	push	{r0, r1, r2, r3}
 8002d2a:	b507      	push	{r0, r1, r2, lr}
 8002d2c:	4906      	ldr	r1, [pc, #24]	@ (8002d48 <iprintf+0x20>)
 8002d2e:	ab04      	add	r3, sp, #16
 8002d30:	6808      	ldr	r0, [r1, #0]
 8002d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d36:	6881      	ldr	r1, [r0, #8]
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	f000 f9e5 	bl	8003108 <_vfiprintf_r>
 8002d3e:	b003      	add	sp, #12
 8002d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d44:	b004      	add	sp, #16
 8002d46:	4770      	bx	lr
 8002d48:	20000018 	.word	0x20000018

08002d4c <__sread>:
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	460c      	mov	r4, r1
 8002d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d54:	f000 f868 	bl	8002e28 <_read_r>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	bfab      	itete	ge
 8002d5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8002d60:	181b      	addge	r3, r3, r0
 8002d62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002d66:	bfac      	ite	ge
 8002d68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d6a:	81a3      	strhlt	r3, [r4, #12]
 8002d6c:	bd10      	pop	{r4, pc}

08002d6e <__swrite>:
 8002d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d72:	461f      	mov	r7, r3
 8002d74:	898b      	ldrh	r3, [r1, #12]
 8002d76:	4605      	mov	r5, r0
 8002d78:	05db      	lsls	r3, r3, #23
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	4616      	mov	r6, r2
 8002d7e:	d505      	bpl.n	8002d8c <__swrite+0x1e>
 8002d80:	2302      	movs	r3, #2
 8002d82:	2200      	movs	r2, #0
 8002d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d88:	f000 f83c 	bl	8002e04 <_lseek_r>
 8002d8c:	89a3      	ldrh	r3, [r4, #12]
 8002d8e:	4632      	mov	r2, r6
 8002d90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d94:	81a3      	strh	r3, [r4, #12]
 8002d96:	4628      	mov	r0, r5
 8002d98:	463b      	mov	r3, r7
 8002d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002da2:	f000 b853 	b.w	8002e4c <_write_r>

08002da6 <__sseek>:
 8002da6:	b510      	push	{r4, lr}
 8002da8:	460c      	mov	r4, r1
 8002daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dae:	f000 f829 	bl	8002e04 <_lseek_r>
 8002db2:	1c43      	adds	r3, r0, #1
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	bf15      	itete	ne
 8002db8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002dba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002dbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002dc2:	81a3      	strheq	r3, [r4, #12]
 8002dc4:	bf18      	it	ne
 8002dc6:	81a3      	strhne	r3, [r4, #12]
 8002dc8:	bd10      	pop	{r4, pc}

08002dca <__sclose>:
 8002dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dce:	f000 b809 	b.w	8002de4 <_close_r>

08002dd2 <memset>:
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4402      	add	r2, r0
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d100      	bne.n	8002ddc <memset+0xa>
 8002dda:	4770      	bx	lr
 8002ddc:	f803 1b01 	strb.w	r1, [r3], #1
 8002de0:	e7f9      	b.n	8002dd6 <memset+0x4>
	...

08002de4 <_close_r>:
 8002de4:	b538      	push	{r3, r4, r5, lr}
 8002de6:	2300      	movs	r3, #0
 8002de8:	4d05      	ldr	r5, [pc, #20]	@ (8002e00 <_close_r+0x1c>)
 8002dea:	4604      	mov	r4, r0
 8002dec:	4608      	mov	r0, r1
 8002dee:	602b      	str	r3, [r5, #0]
 8002df0:	f7fd fc9d 	bl	800072e <_close>
 8002df4:	1c43      	adds	r3, r0, #1
 8002df6:	d102      	bne.n	8002dfe <_close_r+0x1a>
 8002df8:	682b      	ldr	r3, [r5, #0]
 8002dfa:	b103      	cbz	r3, 8002dfe <_close_r+0x1a>
 8002dfc:	6023      	str	r3, [r4, #0]
 8002dfe:	bd38      	pop	{r3, r4, r5, pc}
 8002e00:	20000274 	.word	0x20000274

08002e04 <_lseek_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	4604      	mov	r4, r0
 8002e08:	4608      	mov	r0, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4d05      	ldr	r5, [pc, #20]	@ (8002e24 <_lseek_r+0x20>)
 8002e10:	602a      	str	r2, [r5, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f7fd fcaf 	bl	8000776 <_lseek>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d102      	bne.n	8002e22 <_lseek_r+0x1e>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	b103      	cbz	r3, 8002e22 <_lseek_r+0x1e>
 8002e20:	6023      	str	r3, [r4, #0]
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	20000274 	.word	0x20000274

08002e28 <_read_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	2200      	movs	r2, #0
 8002e32:	4d05      	ldr	r5, [pc, #20]	@ (8002e48 <_read_r+0x20>)
 8002e34:	602a      	str	r2, [r5, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f7fd fc40 	bl	80006bc <_read>
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	d102      	bne.n	8002e46 <_read_r+0x1e>
 8002e40:	682b      	ldr	r3, [r5, #0]
 8002e42:	b103      	cbz	r3, 8002e46 <_read_r+0x1e>
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	bd38      	pop	{r3, r4, r5, pc}
 8002e48:	20000274 	.word	0x20000274

08002e4c <_write_r>:
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4604      	mov	r4, r0
 8002e50:	4608      	mov	r0, r1
 8002e52:	4611      	mov	r1, r2
 8002e54:	2200      	movs	r2, #0
 8002e56:	4d05      	ldr	r5, [pc, #20]	@ (8002e6c <_write_r+0x20>)
 8002e58:	602a      	str	r2, [r5, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f7fd fc4b 	bl	80006f6 <_write>
 8002e60:	1c43      	adds	r3, r0, #1
 8002e62:	d102      	bne.n	8002e6a <_write_r+0x1e>
 8002e64:	682b      	ldr	r3, [r5, #0]
 8002e66:	b103      	cbz	r3, 8002e6a <_write_r+0x1e>
 8002e68:	6023      	str	r3, [r4, #0]
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
 8002e6c:	20000274 	.word	0x20000274

08002e70 <__errno>:
 8002e70:	4b01      	ldr	r3, [pc, #4]	@ (8002e78 <__errno+0x8>)
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000018 	.word	0x20000018

08002e7c <__libc_init_array>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	2600      	movs	r6, #0
 8002e80:	4d0c      	ldr	r5, [pc, #48]	@ (8002eb4 <__libc_init_array+0x38>)
 8002e82:	4c0d      	ldr	r4, [pc, #52]	@ (8002eb8 <__libc_init_array+0x3c>)
 8002e84:	1b64      	subs	r4, r4, r5
 8002e86:	10a4      	asrs	r4, r4, #2
 8002e88:	42a6      	cmp	r6, r4
 8002e8a:	d109      	bne.n	8002ea0 <__libc_init_array+0x24>
 8002e8c:	f000 fdc4 	bl	8003a18 <_init>
 8002e90:	2600      	movs	r6, #0
 8002e92:	4d0a      	ldr	r5, [pc, #40]	@ (8002ebc <__libc_init_array+0x40>)
 8002e94:	4c0a      	ldr	r4, [pc, #40]	@ (8002ec0 <__libc_init_array+0x44>)
 8002e96:	1b64      	subs	r4, r4, r5
 8002e98:	10a4      	asrs	r4, r4, #2
 8002e9a:	42a6      	cmp	r6, r4
 8002e9c:	d105      	bne.n	8002eaa <__libc_init_array+0x2e>
 8002e9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea4:	4798      	blx	r3
 8002ea6:	3601      	adds	r6, #1
 8002ea8:	e7ee      	b.n	8002e88 <__libc_init_array+0xc>
 8002eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eae:	4798      	blx	r3
 8002eb0:	3601      	adds	r6, #1
 8002eb2:	e7f2      	b.n	8002e9a <__libc_init_array+0x1e>
 8002eb4:	08003b2c 	.word	0x08003b2c
 8002eb8:	08003b2c 	.word	0x08003b2c
 8002ebc:	08003b2c 	.word	0x08003b2c
 8002ec0:	08003b30 	.word	0x08003b30

08002ec4 <__retarget_lock_init_recursive>:
 8002ec4:	4770      	bx	lr

08002ec6 <__retarget_lock_acquire_recursive>:
 8002ec6:	4770      	bx	lr

08002ec8 <__retarget_lock_release_recursive>:
 8002ec8:	4770      	bx	lr
	...

08002ecc <_free_r>:
 8002ecc:	b538      	push	{r3, r4, r5, lr}
 8002ece:	4605      	mov	r5, r0
 8002ed0:	2900      	cmp	r1, #0
 8002ed2:	d040      	beq.n	8002f56 <_free_r+0x8a>
 8002ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ed8:	1f0c      	subs	r4, r1, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bfb8      	it	lt
 8002ede:	18e4      	addlt	r4, r4, r3
 8002ee0:	f000 f8de 	bl	80030a0 <__malloc_lock>
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f58 <_free_r+0x8c>)
 8002ee6:	6813      	ldr	r3, [r2, #0]
 8002ee8:	b933      	cbnz	r3, 8002ef8 <_free_r+0x2c>
 8002eea:	6063      	str	r3, [r4, #4]
 8002eec:	6014      	str	r4, [r2, #0]
 8002eee:	4628      	mov	r0, r5
 8002ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ef4:	f000 b8da 	b.w	80030ac <__malloc_unlock>
 8002ef8:	42a3      	cmp	r3, r4
 8002efa:	d908      	bls.n	8002f0e <_free_r+0x42>
 8002efc:	6820      	ldr	r0, [r4, #0]
 8002efe:	1821      	adds	r1, r4, r0
 8002f00:	428b      	cmp	r3, r1
 8002f02:	bf01      	itttt	eq
 8002f04:	6819      	ldreq	r1, [r3, #0]
 8002f06:	685b      	ldreq	r3, [r3, #4]
 8002f08:	1809      	addeq	r1, r1, r0
 8002f0a:	6021      	streq	r1, [r4, #0]
 8002f0c:	e7ed      	b.n	8002eea <_free_r+0x1e>
 8002f0e:	461a      	mov	r2, r3
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	b10b      	cbz	r3, 8002f18 <_free_r+0x4c>
 8002f14:	42a3      	cmp	r3, r4
 8002f16:	d9fa      	bls.n	8002f0e <_free_r+0x42>
 8002f18:	6811      	ldr	r1, [r2, #0]
 8002f1a:	1850      	adds	r0, r2, r1
 8002f1c:	42a0      	cmp	r0, r4
 8002f1e:	d10b      	bne.n	8002f38 <_free_r+0x6c>
 8002f20:	6820      	ldr	r0, [r4, #0]
 8002f22:	4401      	add	r1, r0
 8002f24:	1850      	adds	r0, r2, r1
 8002f26:	4283      	cmp	r3, r0
 8002f28:	6011      	str	r1, [r2, #0]
 8002f2a:	d1e0      	bne.n	8002eee <_free_r+0x22>
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4408      	add	r0, r1
 8002f32:	6010      	str	r0, [r2, #0]
 8002f34:	6053      	str	r3, [r2, #4]
 8002f36:	e7da      	b.n	8002eee <_free_r+0x22>
 8002f38:	d902      	bls.n	8002f40 <_free_r+0x74>
 8002f3a:	230c      	movs	r3, #12
 8002f3c:	602b      	str	r3, [r5, #0]
 8002f3e:	e7d6      	b.n	8002eee <_free_r+0x22>
 8002f40:	6820      	ldr	r0, [r4, #0]
 8002f42:	1821      	adds	r1, r4, r0
 8002f44:	428b      	cmp	r3, r1
 8002f46:	bf01      	itttt	eq
 8002f48:	6819      	ldreq	r1, [r3, #0]
 8002f4a:	685b      	ldreq	r3, [r3, #4]
 8002f4c:	1809      	addeq	r1, r1, r0
 8002f4e:	6021      	streq	r1, [r4, #0]
 8002f50:	6063      	str	r3, [r4, #4]
 8002f52:	6054      	str	r4, [r2, #4]
 8002f54:	e7cb      	b.n	8002eee <_free_r+0x22>
 8002f56:	bd38      	pop	{r3, r4, r5, pc}
 8002f58:	20000280 	.word	0x20000280

08002f5c <sbrk_aligned>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	4e0f      	ldr	r6, [pc, #60]	@ (8002f9c <sbrk_aligned+0x40>)
 8002f60:	460c      	mov	r4, r1
 8002f62:	6831      	ldr	r1, [r6, #0]
 8002f64:	4605      	mov	r5, r0
 8002f66:	b911      	cbnz	r1, 8002f6e <sbrk_aligned+0x12>
 8002f68:	f000 fcb4 	bl	80038d4 <_sbrk_r>
 8002f6c:	6030      	str	r0, [r6, #0]
 8002f6e:	4621      	mov	r1, r4
 8002f70:	4628      	mov	r0, r5
 8002f72:	f000 fcaf 	bl	80038d4 <_sbrk_r>
 8002f76:	1c43      	adds	r3, r0, #1
 8002f78:	d103      	bne.n	8002f82 <sbrk_aligned+0x26>
 8002f7a:	f04f 34ff 	mov.w	r4, #4294967295
 8002f7e:	4620      	mov	r0, r4
 8002f80:	bd70      	pop	{r4, r5, r6, pc}
 8002f82:	1cc4      	adds	r4, r0, #3
 8002f84:	f024 0403 	bic.w	r4, r4, #3
 8002f88:	42a0      	cmp	r0, r4
 8002f8a:	d0f8      	beq.n	8002f7e <sbrk_aligned+0x22>
 8002f8c:	1a21      	subs	r1, r4, r0
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f000 fca0 	bl	80038d4 <_sbrk_r>
 8002f94:	3001      	adds	r0, #1
 8002f96:	d1f2      	bne.n	8002f7e <sbrk_aligned+0x22>
 8002f98:	e7ef      	b.n	8002f7a <sbrk_aligned+0x1e>
 8002f9a:	bf00      	nop
 8002f9c:	2000027c 	.word	0x2000027c

08002fa0 <_malloc_r>:
 8002fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fa4:	1ccd      	adds	r5, r1, #3
 8002fa6:	f025 0503 	bic.w	r5, r5, #3
 8002faa:	3508      	adds	r5, #8
 8002fac:	2d0c      	cmp	r5, #12
 8002fae:	bf38      	it	cc
 8002fb0:	250c      	movcc	r5, #12
 8002fb2:	2d00      	cmp	r5, #0
 8002fb4:	4606      	mov	r6, r0
 8002fb6:	db01      	blt.n	8002fbc <_malloc_r+0x1c>
 8002fb8:	42a9      	cmp	r1, r5
 8002fba:	d904      	bls.n	8002fc6 <_malloc_r+0x26>
 8002fbc:	230c      	movs	r3, #12
 8002fbe:	6033      	str	r3, [r6, #0]
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800309c <_malloc_r+0xfc>
 8002fca:	f000 f869 	bl	80030a0 <__malloc_lock>
 8002fce:	f8d8 3000 	ldr.w	r3, [r8]
 8002fd2:	461c      	mov	r4, r3
 8002fd4:	bb44      	cbnz	r4, 8003028 <_malloc_r+0x88>
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	4630      	mov	r0, r6
 8002fda:	f7ff ffbf 	bl	8002f5c <sbrk_aligned>
 8002fde:	1c43      	adds	r3, r0, #1
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	d158      	bne.n	8003096 <_malloc_r+0xf6>
 8002fe4:	f8d8 4000 	ldr.w	r4, [r8]
 8002fe8:	4627      	mov	r7, r4
 8002fea:	2f00      	cmp	r7, #0
 8002fec:	d143      	bne.n	8003076 <_malloc_r+0xd6>
 8002fee:	2c00      	cmp	r4, #0
 8002ff0:	d04b      	beq.n	800308a <_malloc_r+0xea>
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	4639      	mov	r1, r7
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	eb04 0903 	add.w	r9, r4, r3
 8002ffc:	f000 fc6a 	bl	80038d4 <_sbrk_r>
 8003000:	4581      	cmp	r9, r0
 8003002:	d142      	bne.n	800308a <_malloc_r+0xea>
 8003004:	6821      	ldr	r1, [r4, #0]
 8003006:	4630      	mov	r0, r6
 8003008:	1a6d      	subs	r5, r5, r1
 800300a:	4629      	mov	r1, r5
 800300c:	f7ff ffa6 	bl	8002f5c <sbrk_aligned>
 8003010:	3001      	adds	r0, #1
 8003012:	d03a      	beq.n	800308a <_malloc_r+0xea>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	442b      	add	r3, r5
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	f8d8 3000 	ldr.w	r3, [r8]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	bb62      	cbnz	r2, 800307c <_malloc_r+0xdc>
 8003022:	f8c8 7000 	str.w	r7, [r8]
 8003026:	e00f      	b.n	8003048 <_malloc_r+0xa8>
 8003028:	6822      	ldr	r2, [r4, #0]
 800302a:	1b52      	subs	r2, r2, r5
 800302c:	d420      	bmi.n	8003070 <_malloc_r+0xd0>
 800302e:	2a0b      	cmp	r2, #11
 8003030:	d917      	bls.n	8003062 <_malloc_r+0xc2>
 8003032:	1961      	adds	r1, r4, r5
 8003034:	42a3      	cmp	r3, r4
 8003036:	6025      	str	r5, [r4, #0]
 8003038:	bf18      	it	ne
 800303a:	6059      	strne	r1, [r3, #4]
 800303c:	6863      	ldr	r3, [r4, #4]
 800303e:	bf08      	it	eq
 8003040:	f8c8 1000 	streq.w	r1, [r8]
 8003044:	5162      	str	r2, [r4, r5]
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	4630      	mov	r0, r6
 800304a:	f000 f82f 	bl	80030ac <__malloc_unlock>
 800304e:	f104 000b 	add.w	r0, r4, #11
 8003052:	1d23      	adds	r3, r4, #4
 8003054:	f020 0007 	bic.w	r0, r0, #7
 8003058:	1ac2      	subs	r2, r0, r3
 800305a:	bf1c      	itt	ne
 800305c:	1a1b      	subne	r3, r3, r0
 800305e:	50a3      	strne	r3, [r4, r2]
 8003060:	e7af      	b.n	8002fc2 <_malloc_r+0x22>
 8003062:	6862      	ldr	r2, [r4, #4]
 8003064:	42a3      	cmp	r3, r4
 8003066:	bf0c      	ite	eq
 8003068:	f8c8 2000 	streq.w	r2, [r8]
 800306c:	605a      	strne	r2, [r3, #4]
 800306e:	e7eb      	b.n	8003048 <_malloc_r+0xa8>
 8003070:	4623      	mov	r3, r4
 8003072:	6864      	ldr	r4, [r4, #4]
 8003074:	e7ae      	b.n	8002fd4 <_malloc_r+0x34>
 8003076:	463c      	mov	r4, r7
 8003078:	687f      	ldr	r7, [r7, #4]
 800307a:	e7b6      	b.n	8002fea <_malloc_r+0x4a>
 800307c:	461a      	mov	r2, r3
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	42a3      	cmp	r3, r4
 8003082:	d1fb      	bne.n	800307c <_malloc_r+0xdc>
 8003084:	2300      	movs	r3, #0
 8003086:	6053      	str	r3, [r2, #4]
 8003088:	e7de      	b.n	8003048 <_malloc_r+0xa8>
 800308a:	230c      	movs	r3, #12
 800308c:	4630      	mov	r0, r6
 800308e:	6033      	str	r3, [r6, #0]
 8003090:	f000 f80c 	bl	80030ac <__malloc_unlock>
 8003094:	e794      	b.n	8002fc0 <_malloc_r+0x20>
 8003096:	6005      	str	r5, [r0, #0]
 8003098:	e7d6      	b.n	8003048 <_malloc_r+0xa8>
 800309a:	bf00      	nop
 800309c:	20000280 	.word	0x20000280

080030a0 <__malloc_lock>:
 80030a0:	4801      	ldr	r0, [pc, #4]	@ (80030a8 <__malloc_lock+0x8>)
 80030a2:	f7ff bf10 	b.w	8002ec6 <__retarget_lock_acquire_recursive>
 80030a6:	bf00      	nop
 80030a8:	20000278 	.word	0x20000278

080030ac <__malloc_unlock>:
 80030ac:	4801      	ldr	r0, [pc, #4]	@ (80030b4 <__malloc_unlock+0x8>)
 80030ae:	f7ff bf0b 	b.w	8002ec8 <__retarget_lock_release_recursive>
 80030b2:	bf00      	nop
 80030b4:	20000278 	.word	0x20000278

080030b8 <__sfputc_r>:
 80030b8:	6893      	ldr	r3, [r2, #8]
 80030ba:	b410      	push	{r4}
 80030bc:	3b01      	subs	r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	6093      	str	r3, [r2, #8]
 80030c2:	da07      	bge.n	80030d4 <__sfputc_r+0x1c>
 80030c4:	6994      	ldr	r4, [r2, #24]
 80030c6:	42a3      	cmp	r3, r4
 80030c8:	db01      	blt.n	80030ce <__sfputc_r+0x16>
 80030ca:	290a      	cmp	r1, #10
 80030cc:	d102      	bne.n	80030d4 <__sfputc_r+0x1c>
 80030ce:	bc10      	pop	{r4}
 80030d0:	f000 bb6c 	b.w	80037ac <__swbuf_r>
 80030d4:	6813      	ldr	r3, [r2, #0]
 80030d6:	1c58      	adds	r0, r3, #1
 80030d8:	6010      	str	r0, [r2, #0]
 80030da:	7019      	strb	r1, [r3, #0]
 80030dc:	4608      	mov	r0, r1
 80030de:	bc10      	pop	{r4}
 80030e0:	4770      	bx	lr

080030e2 <__sfputs_r>:
 80030e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e4:	4606      	mov	r6, r0
 80030e6:	460f      	mov	r7, r1
 80030e8:	4614      	mov	r4, r2
 80030ea:	18d5      	adds	r5, r2, r3
 80030ec:	42ac      	cmp	r4, r5
 80030ee:	d101      	bne.n	80030f4 <__sfputs_r+0x12>
 80030f0:	2000      	movs	r0, #0
 80030f2:	e007      	b.n	8003104 <__sfputs_r+0x22>
 80030f4:	463a      	mov	r2, r7
 80030f6:	4630      	mov	r0, r6
 80030f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030fc:	f7ff ffdc 	bl	80030b8 <__sfputc_r>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d1f3      	bne.n	80030ec <__sfputs_r+0xa>
 8003104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003108 <_vfiprintf_r>:
 8003108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800310c:	460d      	mov	r5, r1
 800310e:	4614      	mov	r4, r2
 8003110:	4698      	mov	r8, r3
 8003112:	4606      	mov	r6, r0
 8003114:	b09d      	sub	sp, #116	@ 0x74
 8003116:	b118      	cbz	r0, 8003120 <_vfiprintf_r+0x18>
 8003118:	6a03      	ldr	r3, [r0, #32]
 800311a:	b90b      	cbnz	r3, 8003120 <_vfiprintf_r+0x18>
 800311c:	f7ff fdce 	bl	8002cbc <__sinit>
 8003120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003122:	07d9      	lsls	r1, r3, #31
 8003124:	d405      	bmi.n	8003132 <_vfiprintf_r+0x2a>
 8003126:	89ab      	ldrh	r3, [r5, #12]
 8003128:	059a      	lsls	r2, r3, #22
 800312a:	d402      	bmi.n	8003132 <_vfiprintf_r+0x2a>
 800312c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800312e:	f7ff feca 	bl	8002ec6 <__retarget_lock_acquire_recursive>
 8003132:	89ab      	ldrh	r3, [r5, #12]
 8003134:	071b      	lsls	r3, r3, #28
 8003136:	d501      	bpl.n	800313c <_vfiprintf_r+0x34>
 8003138:	692b      	ldr	r3, [r5, #16]
 800313a:	b99b      	cbnz	r3, 8003164 <_vfiprintf_r+0x5c>
 800313c:	4629      	mov	r1, r5
 800313e:	4630      	mov	r0, r6
 8003140:	f000 fb72 	bl	8003828 <__swsetup_r>
 8003144:	b170      	cbz	r0, 8003164 <_vfiprintf_r+0x5c>
 8003146:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003148:	07dc      	lsls	r4, r3, #31
 800314a:	d504      	bpl.n	8003156 <_vfiprintf_r+0x4e>
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	b01d      	add	sp, #116	@ 0x74
 8003152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003156:	89ab      	ldrh	r3, [r5, #12]
 8003158:	0598      	lsls	r0, r3, #22
 800315a:	d4f7      	bmi.n	800314c <_vfiprintf_r+0x44>
 800315c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800315e:	f7ff feb3 	bl	8002ec8 <__retarget_lock_release_recursive>
 8003162:	e7f3      	b.n	800314c <_vfiprintf_r+0x44>
 8003164:	2300      	movs	r3, #0
 8003166:	9309      	str	r3, [sp, #36]	@ 0x24
 8003168:	2320      	movs	r3, #32
 800316a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800316e:	2330      	movs	r3, #48	@ 0x30
 8003170:	f04f 0901 	mov.w	r9, #1
 8003174:	f8cd 800c 	str.w	r8, [sp, #12]
 8003178:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003324 <_vfiprintf_r+0x21c>
 800317c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003180:	4623      	mov	r3, r4
 8003182:	469a      	mov	sl, r3
 8003184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003188:	b10a      	cbz	r2, 800318e <_vfiprintf_r+0x86>
 800318a:	2a25      	cmp	r2, #37	@ 0x25
 800318c:	d1f9      	bne.n	8003182 <_vfiprintf_r+0x7a>
 800318e:	ebba 0b04 	subs.w	fp, sl, r4
 8003192:	d00b      	beq.n	80031ac <_vfiprintf_r+0xa4>
 8003194:	465b      	mov	r3, fp
 8003196:	4622      	mov	r2, r4
 8003198:	4629      	mov	r1, r5
 800319a:	4630      	mov	r0, r6
 800319c:	f7ff ffa1 	bl	80030e2 <__sfputs_r>
 80031a0:	3001      	adds	r0, #1
 80031a2:	f000 80a7 	beq.w	80032f4 <_vfiprintf_r+0x1ec>
 80031a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031a8:	445a      	add	r2, fp
 80031aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80031ac:	f89a 3000 	ldrb.w	r3, [sl]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 809f 	beq.w	80032f4 <_vfiprintf_r+0x1ec>
 80031b6:	2300      	movs	r3, #0
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295
 80031bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031c0:	f10a 0a01 	add.w	sl, sl, #1
 80031c4:	9304      	str	r3, [sp, #16]
 80031c6:	9307      	str	r3, [sp, #28]
 80031c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80031ce:	4654      	mov	r4, sl
 80031d0:	2205      	movs	r2, #5
 80031d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031d6:	4853      	ldr	r0, [pc, #332]	@ (8003324 <_vfiprintf_r+0x21c>)
 80031d8:	f000 fb8c 	bl	80038f4 <memchr>
 80031dc:	9a04      	ldr	r2, [sp, #16]
 80031de:	b9d8      	cbnz	r0, 8003218 <_vfiprintf_r+0x110>
 80031e0:	06d1      	lsls	r1, r2, #27
 80031e2:	bf44      	itt	mi
 80031e4:	2320      	movmi	r3, #32
 80031e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031ea:	0713      	lsls	r3, r2, #28
 80031ec:	bf44      	itt	mi
 80031ee:	232b      	movmi	r3, #43	@ 0x2b
 80031f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031f4:	f89a 3000 	ldrb.w	r3, [sl]
 80031f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80031fa:	d015      	beq.n	8003228 <_vfiprintf_r+0x120>
 80031fc:	4654      	mov	r4, sl
 80031fe:	2000      	movs	r0, #0
 8003200:	f04f 0c0a 	mov.w	ip, #10
 8003204:	9a07      	ldr	r2, [sp, #28]
 8003206:	4621      	mov	r1, r4
 8003208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800320c:	3b30      	subs	r3, #48	@ 0x30
 800320e:	2b09      	cmp	r3, #9
 8003210:	d94b      	bls.n	80032aa <_vfiprintf_r+0x1a2>
 8003212:	b1b0      	cbz	r0, 8003242 <_vfiprintf_r+0x13a>
 8003214:	9207      	str	r2, [sp, #28]
 8003216:	e014      	b.n	8003242 <_vfiprintf_r+0x13a>
 8003218:	eba0 0308 	sub.w	r3, r0, r8
 800321c:	fa09 f303 	lsl.w	r3, r9, r3
 8003220:	4313      	orrs	r3, r2
 8003222:	46a2      	mov	sl, r4
 8003224:	9304      	str	r3, [sp, #16]
 8003226:	e7d2      	b.n	80031ce <_vfiprintf_r+0xc6>
 8003228:	9b03      	ldr	r3, [sp, #12]
 800322a:	1d19      	adds	r1, r3, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	9103      	str	r1, [sp, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	bfbb      	ittet	lt
 8003234:	425b      	neglt	r3, r3
 8003236:	f042 0202 	orrlt.w	r2, r2, #2
 800323a:	9307      	strge	r3, [sp, #28]
 800323c:	9307      	strlt	r3, [sp, #28]
 800323e:	bfb8      	it	lt
 8003240:	9204      	strlt	r2, [sp, #16]
 8003242:	7823      	ldrb	r3, [r4, #0]
 8003244:	2b2e      	cmp	r3, #46	@ 0x2e
 8003246:	d10a      	bne.n	800325e <_vfiprintf_r+0x156>
 8003248:	7863      	ldrb	r3, [r4, #1]
 800324a:	2b2a      	cmp	r3, #42	@ 0x2a
 800324c:	d132      	bne.n	80032b4 <_vfiprintf_r+0x1ac>
 800324e:	9b03      	ldr	r3, [sp, #12]
 8003250:	3402      	adds	r4, #2
 8003252:	1d1a      	adds	r2, r3, #4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	9203      	str	r2, [sp, #12]
 8003258:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800325c:	9305      	str	r3, [sp, #20]
 800325e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003328 <_vfiprintf_r+0x220>
 8003262:	2203      	movs	r2, #3
 8003264:	4650      	mov	r0, sl
 8003266:	7821      	ldrb	r1, [r4, #0]
 8003268:	f000 fb44 	bl	80038f4 <memchr>
 800326c:	b138      	cbz	r0, 800327e <_vfiprintf_r+0x176>
 800326e:	2240      	movs	r2, #64	@ 0x40
 8003270:	9b04      	ldr	r3, [sp, #16]
 8003272:	eba0 000a 	sub.w	r0, r0, sl
 8003276:	4082      	lsls	r2, r0
 8003278:	4313      	orrs	r3, r2
 800327a:	3401      	adds	r4, #1
 800327c:	9304      	str	r3, [sp, #16]
 800327e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003282:	2206      	movs	r2, #6
 8003284:	4829      	ldr	r0, [pc, #164]	@ (800332c <_vfiprintf_r+0x224>)
 8003286:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800328a:	f000 fb33 	bl	80038f4 <memchr>
 800328e:	2800      	cmp	r0, #0
 8003290:	d03f      	beq.n	8003312 <_vfiprintf_r+0x20a>
 8003292:	4b27      	ldr	r3, [pc, #156]	@ (8003330 <_vfiprintf_r+0x228>)
 8003294:	bb1b      	cbnz	r3, 80032de <_vfiprintf_r+0x1d6>
 8003296:	9b03      	ldr	r3, [sp, #12]
 8003298:	3307      	adds	r3, #7
 800329a:	f023 0307 	bic.w	r3, r3, #7
 800329e:	3308      	adds	r3, #8
 80032a0:	9303      	str	r3, [sp, #12]
 80032a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032a4:	443b      	add	r3, r7
 80032a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80032a8:	e76a      	b.n	8003180 <_vfiprintf_r+0x78>
 80032aa:	460c      	mov	r4, r1
 80032ac:	2001      	movs	r0, #1
 80032ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80032b2:	e7a8      	b.n	8003206 <_vfiprintf_r+0xfe>
 80032b4:	2300      	movs	r3, #0
 80032b6:	f04f 0c0a 	mov.w	ip, #10
 80032ba:	4619      	mov	r1, r3
 80032bc:	3401      	adds	r4, #1
 80032be:	9305      	str	r3, [sp, #20]
 80032c0:	4620      	mov	r0, r4
 80032c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032c6:	3a30      	subs	r2, #48	@ 0x30
 80032c8:	2a09      	cmp	r2, #9
 80032ca:	d903      	bls.n	80032d4 <_vfiprintf_r+0x1cc>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0c6      	beq.n	800325e <_vfiprintf_r+0x156>
 80032d0:	9105      	str	r1, [sp, #20]
 80032d2:	e7c4      	b.n	800325e <_vfiprintf_r+0x156>
 80032d4:	4604      	mov	r4, r0
 80032d6:	2301      	movs	r3, #1
 80032d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80032dc:	e7f0      	b.n	80032c0 <_vfiprintf_r+0x1b8>
 80032de:	ab03      	add	r3, sp, #12
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	462a      	mov	r2, r5
 80032e4:	4630      	mov	r0, r6
 80032e6:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <_vfiprintf_r+0x22c>)
 80032e8:	a904      	add	r1, sp, #16
 80032ea:	f3af 8000 	nop.w
 80032ee:	4607      	mov	r7, r0
 80032f0:	1c78      	adds	r0, r7, #1
 80032f2:	d1d6      	bne.n	80032a2 <_vfiprintf_r+0x19a>
 80032f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032f6:	07d9      	lsls	r1, r3, #31
 80032f8:	d405      	bmi.n	8003306 <_vfiprintf_r+0x1fe>
 80032fa:	89ab      	ldrh	r3, [r5, #12]
 80032fc:	059a      	lsls	r2, r3, #22
 80032fe:	d402      	bmi.n	8003306 <_vfiprintf_r+0x1fe>
 8003300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003302:	f7ff fde1 	bl	8002ec8 <__retarget_lock_release_recursive>
 8003306:	89ab      	ldrh	r3, [r5, #12]
 8003308:	065b      	lsls	r3, r3, #25
 800330a:	f53f af1f 	bmi.w	800314c <_vfiprintf_r+0x44>
 800330e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003310:	e71e      	b.n	8003150 <_vfiprintf_r+0x48>
 8003312:	ab03      	add	r3, sp, #12
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	462a      	mov	r2, r5
 8003318:	4630      	mov	r0, r6
 800331a:	4b06      	ldr	r3, [pc, #24]	@ (8003334 <_vfiprintf_r+0x22c>)
 800331c:	a904      	add	r1, sp, #16
 800331e:	f000 f87d 	bl	800341c <_printf_i>
 8003322:	e7e4      	b.n	80032ee <_vfiprintf_r+0x1e6>
 8003324:	08003af6 	.word	0x08003af6
 8003328:	08003afc 	.word	0x08003afc
 800332c:	08003b00 	.word	0x08003b00
 8003330:	00000000 	.word	0x00000000
 8003334:	080030e3 	.word	0x080030e3

08003338 <_printf_common>:
 8003338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800333c:	4616      	mov	r6, r2
 800333e:	4698      	mov	r8, r3
 8003340:	688a      	ldr	r2, [r1, #8]
 8003342:	690b      	ldr	r3, [r1, #16]
 8003344:	4607      	mov	r7, r0
 8003346:	4293      	cmp	r3, r2
 8003348:	bfb8      	it	lt
 800334a:	4613      	movlt	r3, r2
 800334c:	6033      	str	r3, [r6, #0]
 800334e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003352:	460c      	mov	r4, r1
 8003354:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003358:	b10a      	cbz	r2, 800335e <_printf_common+0x26>
 800335a:	3301      	adds	r3, #1
 800335c:	6033      	str	r3, [r6, #0]
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	0699      	lsls	r1, r3, #26
 8003362:	bf42      	ittt	mi
 8003364:	6833      	ldrmi	r3, [r6, #0]
 8003366:	3302      	addmi	r3, #2
 8003368:	6033      	strmi	r3, [r6, #0]
 800336a:	6825      	ldr	r5, [r4, #0]
 800336c:	f015 0506 	ands.w	r5, r5, #6
 8003370:	d106      	bne.n	8003380 <_printf_common+0x48>
 8003372:	f104 0a19 	add.w	sl, r4, #25
 8003376:	68e3      	ldr	r3, [r4, #12]
 8003378:	6832      	ldr	r2, [r6, #0]
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	42ab      	cmp	r3, r5
 800337e:	dc2b      	bgt.n	80033d8 <_printf_common+0xa0>
 8003380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	3b00      	subs	r3, #0
 8003388:	bf18      	it	ne
 800338a:	2301      	movne	r3, #1
 800338c:	0692      	lsls	r2, r2, #26
 800338e:	d430      	bmi.n	80033f2 <_printf_common+0xba>
 8003390:	4641      	mov	r1, r8
 8003392:	4638      	mov	r0, r7
 8003394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003398:	47c8      	blx	r9
 800339a:	3001      	adds	r0, #1
 800339c:	d023      	beq.n	80033e6 <_printf_common+0xae>
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	6922      	ldr	r2, [r4, #16]
 80033a2:	f003 0306 	and.w	r3, r3, #6
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	bf14      	ite	ne
 80033aa:	2500      	movne	r5, #0
 80033ac:	6833      	ldreq	r3, [r6, #0]
 80033ae:	f04f 0600 	mov.w	r6, #0
 80033b2:	bf08      	it	eq
 80033b4:	68e5      	ldreq	r5, [r4, #12]
 80033b6:	f104 041a 	add.w	r4, r4, #26
 80033ba:	bf08      	it	eq
 80033bc:	1aed      	subeq	r5, r5, r3
 80033be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80033c2:	bf08      	it	eq
 80033c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033c8:	4293      	cmp	r3, r2
 80033ca:	bfc4      	itt	gt
 80033cc:	1a9b      	subgt	r3, r3, r2
 80033ce:	18ed      	addgt	r5, r5, r3
 80033d0:	42b5      	cmp	r5, r6
 80033d2:	d11a      	bne.n	800340a <_printf_common+0xd2>
 80033d4:	2000      	movs	r0, #0
 80033d6:	e008      	b.n	80033ea <_printf_common+0xb2>
 80033d8:	2301      	movs	r3, #1
 80033da:	4652      	mov	r2, sl
 80033dc:	4641      	mov	r1, r8
 80033de:	4638      	mov	r0, r7
 80033e0:	47c8      	blx	r9
 80033e2:	3001      	adds	r0, #1
 80033e4:	d103      	bne.n	80033ee <_printf_common+0xb6>
 80033e6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ee:	3501      	adds	r5, #1
 80033f0:	e7c1      	b.n	8003376 <_printf_common+0x3e>
 80033f2:	2030      	movs	r0, #48	@ 0x30
 80033f4:	18e1      	adds	r1, r4, r3
 80033f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003400:	4422      	add	r2, r4
 8003402:	3302      	adds	r3, #2
 8003404:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003408:	e7c2      	b.n	8003390 <_printf_common+0x58>
 800340a:	2301      	movs	r3, #1
 800340c:	4622      	mov	r2, r4
 800340e:	4641      	mov	r1, r8
 8003410:	4638      	mov	r0, r7
 8003412:	47c8      	blx	r9
 8003414:	3001      	adds	r0, #1
 8003416:	d0e6      	beq.n	80033e6 <_printf_common+0xae>
 8003418:	3601      	adds	r6, #1
 800341a:	e7d9      	b.n	80033d0 <_printf_common+0x98>

0800341c <_printf_i>:
 800341c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003420:	7e0f      	ldrb	r7, [r1, #24]
 8003422:	4691      	mov	r9, r2
 8003424:	2f78      	cmp	r7, #120	@ 0x78
 8003426:	4680      	mov	r8, r0
 8003428:	460c      	mov	r4, r1
 800342a:	469a      	mov	sl, r3
 800342c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800342e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003432:	d807      	bhi.n	8003444 <_printf_i+0x28>
 8003434:	2f62      	cmp	r7, #98	@ 0x62
 8003436:	d80a      	bhi.n	800344e <_printf_i+0x32>
 8003438:	2f00      	cmp	r7, #0
 800343a:	f000 80d3 	beq.w	80035e4 <_printf_i+0x1c8>
 800343e:	2f58      	cmp	r7, #88	@ 0x58
 8003440:	f000 80ba 	beq.w	80035b8 <_printf_i+0x19c>
 8003444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003448:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800344c:	e03a      	b.n	80034c4 <_printf_i+0xa8>
 800344e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003452:	2b15      	cmp	r3, #21
 8003454:	d8f6      	bhi.n	8003444 <_printf_i+0x28>
 8003456:	a101      	add	r1, pc, #4	@ (adr r1, 800345c <_printf_i+0x40>)
 8003458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800345c:	080034b5 	.word	0x080034b5
 8003460:	080034c9 	.word	0x080034c9
 8003464:	08003445 	.word	0x08003445
 8003468:	08003445 	.word	0x08003445
 800346c:	08003445 	.word	0x08003445
 8003470:	08003445 	.word	0x08003445
 8003474:	080034c9 	.word	0x080034c9
 8003478:	08003445 	.word	0x08003445
 800347c:	08003445 	.word	0x08003445
 8003480:	08003445 	.word	0x08003445
 8003484:	08003445 	.word	0x08003445
 8003488:	080035cb 	.word	0x080035cb
 800348c:	080034f3 	.word	0x080034f3
 8003490:	08003585 	.word	0x08003585
 8003494:	08003445 	.word	0x08003445
 8003498:	08003445 	.word	0x08003445
 800349c:	080035ed 	.word	0x080035ed
 80034a0:	08003445 	.word	0x08003445
 80034a4:	080034f3 	.word	0x080034f3
 80034a8:	08003445 	.word	0x08003445
 80034ac:	08003445 	.word	0x08003445
 80034b0:	0800358d 	.word	0x0800358d
 80034b4:	6833      	ldr	r3, [r6, #0]
 80034b6:	1d1a      	adds	r2, r3, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6032      	str	r2, [r6, #0]
 80034bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034c4:	2301      	movs	r3, #1
 80034c6:	e09e      	b.n	8003606 <_printf_i+0x1ea>
 80034c8:	6833      	ldr	r3, [r6, #0]
 80034ca:	6820      	ldr	r0, [r4, #0]
 80034cc:	1d19      	adds	r1, r3, #4
 80034ce:	6031      	str	r1, [r6, #0]
 80034d0:	0606      	lsls	r6, r0, #24
 80034d2:	d501      	bpl.n	80034d8 <_printf_i+0xbc>
 80034d4:	681d      	ldr	r5, [r3, #0]
 80034d6:	e003      	b.n	80034e0 <_printf_i+0xc4>
 80034d8:	0645      	lsls	r5, r0, #25
 80034da:	d5fb      	bpl.n	80034d4 <_printf_i+0xb8>
 80034dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034e0:	2d00      	cmp	r5, #0
 80034e2:	da03      	bge.n	80034ec <_printf_i+0xd0>
 80034e4:	232d      	movs	r3, #45	@ 0x2d
 80034e6:	426d      	negs	r5, r5
 80034e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034ec:	230a      	movs	r3, #10
 80034ee:	4859      	ldr	r0, [pc, #356]	@ (8003654 <_printf_i+0x238>)
 80034f0:	e011      	b.n	8003516 <_printf_i+0xfa>
 80034f2:	6821      	ldr	r1, [r4, #0]
 80034f4:	6833      	ldr	r3, [r6, #0]
 80034f6:	0608      	lsls	r0, r1, #24
 80034f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80034fc:	d402      	bmi.n	8003504 <_printf_i+0xe8>
 80034fe:	0649      	lsls	r1, r1, #25
 8003500:	bf48      	it	mi
 8003502:	b2ad      	uxthmi	r5, r5
 8003504:	2f6f      	cmp	r7, #111	@ 0x6f
 8003506:	6033      	str	r3, [r6, #0]
 8003508:	bf14      	ite	ne
 800350a:	230a      	movne	r3, #10
 800350c:	2308      	moveq	r3, #8
 800350e:	4851      	ldr	r0, [pc, #324]	@ (8003654 <_printf_i+0x238>)
 8003510:	2100      	movs	r1, #0
 8003512:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003516:	6866      	ldr	r6, [r4, #4]
 8003518:	2e00      	cmp	r6, #0
 800351a:	bfa8      	it	ge
 800351c:	6821      	ldrge	r1, [r4, #0]
 800351e:	60a6      	str	r6, [r4, #8]
 8003520:	bfa4      	itt	ge
 8003522:	f021 0104 	bicge.w	r1, r1, #4
 8003526:	6021      	strge	r1, [r4, #0]
 8003528:	b90d      	cbnz	r5, 800352e <_printf_i+0x112>
 800352a:	2e00      	cmp	r6, #0
 800352c:	d04b      	beq.n	80035c6 <_printf_i+0x1aa>
 800352e:	4616      	mov	r6, r2
 8003530:	fbb5 f1f3 	udiv	r1, r5, r3
 8003534:	fb03 5711 	mls	r7, r3, r1, r5
 8003538:	5dc7      	ldrb	r7, [r0, r7]
 800353a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800353e:	462f      	mov	r7, r5
 8003540:	42bb      	cmp	r3, r7
 8003542:	460d      	mov	r5, r1
 8003544:	d9f4      	bls.n	8003530 <_printf_i+0x114>
 8003546:	2b08      	cmp	r3, #8
 8003548:	d10b      	bne.n	8003562 <_printf_i+0x146>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	07df      	lsls	r7, r3, #31
 800354e:	d508      	bpl.n	8003562 <_printf_i+0x146>
 8003550:	6923      	ldr	r3, [r4, #16]
 8003552:	6861      	ldr	r1, [r4, #4]
 8003554:	4299      	cmp	r1, r3
 8003556:	bfde      	ittt	le
 8003558:	2330      	movle	r3, #48	@ 0x30
 800355a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800355e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003562:	1b92      	subs	r2, r2, r6
 8003564:	6122      	str	r2, [r4, #16]
 8003566:	464b      	mov	r3, r9
 8003568:	4621      	mov	r1, r4
 800356a:	4640      	mov	r0, r8
 800356c:	f8cd a000 	str.w	sl, [sp]
 8003570:	aa03      	add	r2, sp, #12
 8003572:	f7ff fee1 	bl	8003338 <_printf_common>
 8003576:	3001      	adds	r0, #1
 8003578:	d14a      	bne.n	8003610 <_printf_i+0x1f4>
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	b004      	add	sp, #16
 8003580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	f043 0320 	orr.w	r3, r3, #32
 800358a:	6023      	str	r3, [r4, #0]
 800358c:	2778      	movs	r7, #120	@ 0x78
 800358e:	4832      	ldr	r0, [pc, #200]	@ (8003658 <_printf_i+0x23c>)
 8003590:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	6831      	ldr	r1, [r6, #0]
 8003598:	061f      	lsls	r7, r3, #24
 800359a:	f851 5b04 	ldr.w	r5, [r1], #4
 800359e:	d402      	bmi.n	80035a6 <_printf_i+0x18a>
 80035a0:	065f      	lsls	r7, r3, #25
 80035a2:	bf48      	it	mi
 80035a4:	b2ad      	uxthmi	r5, r5
 80035a6:	6031      	str	r1, [r6, #0]
 80035a8:	07d9      	lsls	r1, r3, #31
 80035aa:	bf44      	itt	mi
 80035ac:	f043 0320 	orrmi.w	r3, r3, #32
 80035b0:	6023      	strmi	r3, [r4, #0]
 80035b2:	b11d      	cbz	r5, 80035bc <_printf_i+0x1a0>
 80035b4:	2310      	movs	r3, #16
 80035b6:	e7ab      	b.n	8003510 <_printf_i+0xf4>
 80035b8:	4826      	ldr	r0, [pc, #152]	@ (8003654 <_printf_i+0x238>)
 80035ba:	e7e9      	b.n	8003590 <_printf_i+0x174>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	f023 0320 	bic.w	r3, r3, #32
 80035c2:	6023      	str	r3, [r4, #0]
 80035c4:	e7f6      	b.n	80035b4 <_printf_i+0x198>
 80035c6:	4616      	mov	r6, r2
 80035c8:	e7bd      	b.n	8003546 <_printf_i+0x12a>
 80035ca:	6833      	ldr	r3, [r6, #0]
 80035cc:	6825      	ldr	r5, [r4, #0]
 80035ce:	1d18      	adds	r0, r3, #4
 80035d0:	6961      	ldr	r1, [r4, #20]
 80035d2:	6030      	str	r0, [r6, #0]
 80035d4:	062e      	lsls	r6, r5, #24
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	d501      	bpl.n	80035de <_printf_i+0x1c2>
 80035da:	6019      	str	r1, [r3, #0]
 80035dc:	e002      	b.n	80035e4 <_printf_i+0x1c8>
 80035de:	0668      	lsls	r0, r5, #25
 80035e0:	d5fb      	bpl.n	80035da <_printf_i+0x1be>
 80035e2:	8019      	strh	r1, [r3, #0]
 80035e4:	2300      	movs	r3, #0
 80035e6:	4616      	mov	r6, r2
 80035e8:	6123      	str	r3, [r4, #16]
 80035ea:	e7bc      	b.n	8003566 <_printf_i+0x14a>
 80035ec:	6833      	ldr	r3, [r6, #0]
 80035ee:	2100      	movs	r1, #0
 80035f0:	1d1a      	adds	r2, r3, #4
 80035f2:	6032      	str	r2, [r6, #0]
 80035f4:	681e      	ldr	r6, [r3, #0]
 80035f6:	6862      	ldr	r2, [r4, #4]
 80035f8:	4630      	mov	r0, r6
 80035fa:	f000 f97b 	bl	80038f4 <memchr>
 80035fe:	b108      	cbz	r0, 8003604 <_printf_i+0x1e8>
 8003600:	1b80      	subs	r0, r0, r6
 8003602:	6060      	str	r0, [r4, #4]
 8003604:	6863      	ldr	r3, [r4, #4]
 8003606:	6123      	str	r3, [r4, #16]
 8003608:	2300      	movs	r3, #0
 800360a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800360e:	e7aa      	b.n	8003566 <_printf_i+0x14a>
 8003610:	4632      	mov	r2, r6
 8003612:	4649      	mov	r1, r9
 8003614:	4640      	mov	r0, r8
 8003616:	6923      	ldr	r3, [r4, #16]
 8003618:	47d0      	blx	sl
 800361a:	3001      	adds	r0, #1
 800361c:	d0ad      	beq.n	800357a <_printf_i+0x15e>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	079b      	lsls	r3, r3, #30
 8003622:	d413      	bmi.n	800364c <_printf_i+0x230>
 8003624:	68e0      	ldr	r0, [r4, #12]
 8003626:	9b03      	ldr	r3, [sp, #12]
 8003628:	4298      	cmp	r0, r3
 800362a:	bfb8      	it	lt
 800362c:	4618      	movlt	r0, r3
 800362e:	e7a6      	b.n	800357e <_printf_i+0x162>
 8003630:	2301      	movs	r3, #1
 8003632:	4632      	mov	r2, r6
 8003634:	4649      	mov	r1, r9
 8003636:	4640      	mov	r0, r8
 8003638:	47d0      	blx	sl
 800363a:	3001      	adds	r0, #1
 800363c:	d09d      	beq.n	800357a <_printf_i+0x15e>
 800363e:	3501      	adds	r5, #1
 8003640:	68e3      	ldr	r3, [r4, #12]
 8003642:	9903      	ldr	r1, [sp, #12]
 8003644:	1a5b      	subs	r3, r3, r1
 8003646:	42ab      	cmp	r3, r5
 8003648:	dcf2      	bgt.n	8003630 <_printf_i+0x214>
 800364a:	e7eb      	b.n	8003624 <_printf_i+0x208>
 800364c:	2500      	movs	r5, #0
 800364e:	f104 0619 	add.w	r6, r4, #25
 8003652:	e7f5      	b.n	8003640 <_printf_i+0x224>
 8003654:	08003b07 	.word	0x08003b07
 8003658:	08003b18 	.word	0x08003b18

0800365c <__sflush_r>:
 800365c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	0716      	lsls	r6, r2, #28
 8003664:	4605      	mov	r5, r0
 8003666:	460c      	mov	r4, r1
 8003668:	d454      	bmi.n	8003714 <__sflush_r+0xb8>
 800366a:	684b      	ldr	r3, [r1, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	dc02      	bgt.n	8003676 <__sflush_r+0x1a>
 8003670:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	dd48      	ble.n	8003708 <__sflush_r+0xac>
 8003676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003678:	2e00      	cmp	r6, #0
 800367a:	d045      	beq.n	8003708 <__sflush_r+0xac>
 800367c:	2300      	movs	r3, #0
 800367e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003682:	682f      	ldr	r7, [r5, #0]
 8003684:	6a21      	ldr	r1, [r4, #32]
 8003686:	602b      	str	r3, [r5, #0]
 8003688:	d030      	beq.n	80036ec <__sflush_r+0x90>
 800368a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800368c:	89a3      	ldrh	r3, [r4, #12]
 800368e:	0759      	lsls	r1, r3, #29
 8003690:	d505      	bpl.n	800369e <__sflush_r+0x42>
 8003692:	6863      	ldr	r3, [r4, #4]
 8003694:	1ad2      	subs	r2, r2, r3
 8003696:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003698:	b10b      	cbz	r3, 800369e <__sflush_r+0x42>
 800369a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800369c:	1ad2      	subs	r2, r2, r3
 800369e:	2300      	movs	r3, #0
 80036a0:	4628      	mov	r0, r5
 80036a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036a4:	6a21      	ldr	r1, [r4, #32]
 80036a6:	47b0      	blx	r6
 80036a8:	1c43      	adds	r3, r0, #1
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	d106      	bne.n	80036bc <__sflush_r+0x60>
 80036ae:	6829      	ldr	r1, [r5, #0]
 80036b0:	291d      	cmp	r1, #29
 80036b2:	d82b      	bhi.n	800370c <__sflush_r+0xb0>
 80036b4:	4a28      	ldr	r2, [pc, #160]	@ (8003758 <__sflush_r+0xfc>)
 80036b6:	410a      	asrs	r2, r1
 80036b8:	07d6      	lsls	r6, r2, #31
 80036ba:	d427      	bmi.n	800370c <__sflush_r+0xb0>
 80036bc:	2200      	movs	r2, #0
 80036be:	6062      	str	r2, [r4, #4]
 80036c0:	6922      	ldr	r2, [r4, #16]
 80036c2:	04d9      	lsls	r1, r3, #19
 80036c4:	6022      	str	r2, [r4, #0]
 80036c6:	d504      	bpl.n	80036d2 <__sflush_r+0x76>
 80036c8:	1c42      	adds	r2, r0, #1
 80036ca:	d101      	bne.n	80036d0 <__sflush_r+0x74>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	b903      	cbnz	r3, 80036d2 <__sflush_r+0x76>
 80036d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80036d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036d4:	602f      	str	r7, [r5, #0]
 80036d6:	b1b9      	cbz	r1, 8003708 <__sflush_r+0xac>
 80036d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036dc:	4299      	cmp	r1, r3
 80036de:	d002      	beq.n	80036e6 <__sflush_r+0x8a>
 80036e0:	4628      	mov	r0, r5
 80036e2:	f7ff fbf3 	bl	8002ecc <_free_r>
 80036e6:	2300      	movs	r3, #0
 80036e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80036ea:	e00d      	b.n	8003708 <__sflush_r+0xac>
 80036ec:	2301      	movs	r3, #1
 80036ee:	4628      	mov	r0, r5
 80036f0:	47b0      	blx	r6
 80036f2:	4602      	mov	r2, r0
 80036f4:	1c50      	adds	r0, r2, #1
 80036f6:	d1c9      	bne.n	800368c <__sflush_r+0x30>
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0c6      	beq.n	800368c <__sflush_r+0x30>
 80036fe:	2b1d      	cmp	r3, #29
 8003700:	d001      	beq.n	8003706 <__sflush_r+0xaa>
 8003702:	2b16      	cmp	r3, #22
 8003704:	d11d      	bne.n	8003742 <__sflush_r+0xe6>
 8003706:	602f      	str	r7, [r5, #0]
 8003708:	2000      	movs	r0, #0
 800370a:	e021      	b.n	8003750 <__sflush_r+0xf4>
 800370c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003710:	b21b      	sxth	r3, r3
 8003712:	e01a      	b.n	800374a <__sflush_r+0xee>
 8003714:	690f      	ldr	r7, [r1, #16]
 8003716:	2f00      	cmp	r7, #0
 8003718:	d0f6      	beq.n	8003708 <__sflush_r+0xac>
 800371a:	0793      	lsls	r3, r2, #30
 800371c:	bf18      	it	ne
 800371e:	2300      	movne	r3, #0
 8003720:	680e      	ldr	r6, [r1, #0]
 8003722:	bf08      	it	eq
 8003724:	694b      	ldreq	r3, [r1, #20]
 8003726:	1bf6      	subs	r6, r6, r7
 8003728:	600f      	str	r7, [r1, #0]
 800372a:	608b      	str	r3, [r1, #8]
 800372c:	2e00      	cmp	r6, #0
 800372e:	ddeb      	ble.n	8003708 <__sflush_r+0xac>
 8003730:	4633      	mov	r3, r6
 8003732:	463a      	mov	r2, r7
 8003734:	4628      	mov	r0, r5
 8003736:	6a21      	ldr	r1, [r4, #32]
 8003738:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800373c:	47e0      	blx	ip
 800373e:	2800      	cmp	r0, #0
 8003740:	dc07      	bgt.n	8003752 <__sflush_r+0xf6>
 8003742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800374a:	f04f 30ff 	mov.w	r0, #4294967295
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003752:	4407      	add	r7, r0
 8003754:	1a36      	subs	r6, r6, r0
 8003756:	e7e9      	b.n	800372c <__sflush_r+0xd0>
 8003758:	dfbffffe 	.word	0xdfbffffe

0800375c <_fflush_r>:
 800375c:	b538      	push	{r3, r4, r5, lr}
 800375e:	690b      	ldr	r3, [r1, #16]
 8003760:	4605      	mov	r5, r0
 8003762:	460c      	mov	r4, r1
 8003764:	b913      	cbnz	r3, 800376c <_fflush_r+0x10>
 8003766:	2500      	movs	r5, #0
 8003768:	4628      	mov	r0, r5
 800376a:	bd38      	pop	{r3, r4, r5, pc}
 800376c:	b118      	cbz	r0, 8003776 <_fflush_r+0x1a>
 800376e:	6a03      	ldr	r3, [r0, #32]
 8003770:	b90b      	cbnz	r3, 8003776 <_fflush_r+0x1a>
 8003772:	f7ff faa3 	bl	8002cbc <__sinit>
 8003776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f3      	beq.n	8003766 <_fflush_r+0xa>
 800377e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003780:	07d0      	lsls	r0, r2, #31
 8003782:	d404      	bmi.n	800378e <_fflush_r+0x32>
 8003784:	0599      	lsls	r1, r3, #22
 8003786:	d402      	bmi.n	800378e <_fflush_r+0x32>
 8003788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800378a:	f7ff fb9c 	bl	8002ec6 <__retarget_lock_acquire_recursive>
 800378e:	4628      	mov	r0, r5
 8003790:	4621      	mov	r1, r4
 8003792:	f7ff ff63 	bl	800365c <__sflush_r>
 8003796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003798:	4605      	mov	r5, r0
 800379a:	07da      	lsls	r2, r3, #31
 800379c:	d4e4      	bmi.n	8003768 <_fflush_r+0xc>
 800379e:	89a3      	ldrh	r3, [r4, #12]
 80037a0:	059b      	lsls	r3, r3, #22
 80037a2:	d4e1      	bmi.n	8003768 <_fflush_r+0xc>
 80037a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037a6:	f7ff fb8f 	bl	8002ec8 <__retarget_lock_release_recursive>
 80037aa:	e7dd      	b.n	8003768 <_fflush_r+0xc>

080037ac <__swbuf_r>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	460e      	mov	r6, r1
 80037b0:	4614      	mov	r4, r2
 80037b2:	4605      	mov	r5, r0
 80037b4:	b118      	cbz	r0, 80037be <__swbuf_r+0x12>
 80037b6:	6a03      	ldr	r3, [r0, #32]
 80037b8:	b90b      	cbnz	r3, 80037be <__swbuf_r+0x12>
 80037ba:	f7ff fa7f 	bl	8002cbc <__sinit>
 80037be:	69a3      	ldr	r3, [r4, #24]
 80037c0:	60a3      	str	r3, [r4, #8]
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	071a      	lsls	r2, r3, #28
 80037c6:	d501      	bpl.n	80037cc <__swbuf_r+0x20>
 80037c8:	6923      	ldr	r3, [r4, #16]
 80037ca:	b943      	cbnz	r3, 80037de <__swbuf_r+0x32>
 80037cc:	4621      	mov	r1, r4
 80037ce:	4628      	mov	r0, r5
 80037d0:	f000 f82a 	bl	8003828 <__swsetup_r>
 80037d4:	b118      	cbz	r0, 80037de <__swbuf_r+0x32>
 80037d6:	f04f 37ff 	mov.w	r7, #4294967295
 80037da:	4638      	mov	r0, r7
 80037dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	6922      	ldr	r2, [r4, #16]
 80037e2:	b2f6      	uxtb	r6, r6
 80037e4:	1a98      	subs	r0, r3, r2
 80037e6:	6963      	ldr	r3, [r4, #20]
 80037e8:	4637      	mov	r7, r6
 80037ea:	4283      	cmp	r3, r0
 80037ec:	dc05      	bgt.n	80037fa <__swbuf_r+0x4e>
 80037ee:	4621      	mov	r1, r4
 80037f0:	4628      	mov	r0, r5
 80037f2:	f7ff ffb3 	bl	800375c <_fflush_r>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d1ed      	bne.n	80037d6 <__swbuf_r+0x2a>
 80037fa:	68a3      	ldr	r3, [r4, #8]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	60a3      	str	r3, [r4, #8]
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	6022      	str	r2, [r4, #0]
 8003806:	701e      	strb	r6, [r3, #0]
 8003808:	6962      	ldr	r2, [r4, #20]
 800380a:	1c43      	adds	r3, r0, #1
 800380c:	429a      	cmp	r2, r3
 800380e:	d004      	beq.n	800381a <__swbuf_r+0x6e>
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	07db      	lsls	r3, r3, #31
 8003814:	d5e1      	bpl.n	80037da <__swbuf_r+0x2e>
 8003816:	2e0a      	cmp	r6, #10
 8003818:	d1df      	bne.n	80037da <__swbuf_r+0x2e>
 800381a:	4621      	mov	r1, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f7ff ff9d 	bl	800375c <_fflush_r>
 8003822:	2800      	cmp	r0, #0
 8003824:	d0d9      	beq.n	80037da <__swbuf_r+0x2e>
 8003826:	e7d6      	b.n	80037d6 <__swbuf_r+0x2a>

08003828 <__swsetup_r>:
 8003828:	b538      	push	{r3, r4, r5, lr}
 800382a:	4b29      	ldr	r3, [pc, #164]	@ (80038d0 <__swsetup_r+0xa8>)
 800382c:	4605      	mov	r5, r0
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	460c      	mov	r4, r1
 8003832:	b118      	cbz	r0, 800383c <__swsetup_r+0x14>
 8003834:	6a03      	ldr	r3, [r0, #32]
 8003836:	b90b      	cbnz	r3, 800383c <__swsetup_r+0x14>
 8003838:	f7ff fa40 	bl	8002cbc <__sinit>
 800383c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003840:	0719      	lsls	r1, r3, #28
 8003842:	d422      	bmi.n	800388a <__swsetup_r+0x62>
 8003844:	06da      	lsls	r2, r3, #27
 8003846:	d407      	bmi.n	8003858 <__swsetup_r+0x30>
 8003848:	2209      	movs	r2, #9
 800384a:	602a      	str	r2, [r5, #0]
 800384c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	81a3      	strh	r3, [r4, #12]
 8003856:	e033      	b.n	80038c0 <__swsetup_r+0x98>
 8003858:	0758      	lsls	r0, r3, #29
 800385a:	d512      	bpl.n	8003882 <__swsetup_r+0x5a>
 800385c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800385e:	b141      	cbz	r1, 8003872 <__swsetup_r+0x4a>
 8003860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003864:	4299      	cmp	r1, r3
 8003866:	d002      	beq.n	800386e <__swsetup_r+0x46>
 8003868:	4628      	mov	r0, r5
 800386a:	f7ff fb2f 	bl	8002ecc <_free_r>
 800386e:	2300      	movs	r3, #0
 8003870:	6363      	str	r3, [r4, #52]	@ 0x34
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003878:	81a3      	strh	r3, [r4, #12]
 800387a:	2300      	movs	r3, #0
 800387c:	6063      	str	r3, [r4, #4]
 800387e:	6923      	ldr	r3, [r4, #16]
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f043 0308 	orr.w	r3, r3, #8
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	b94b      	cbnz	r3, 80038a2 <__swsetup_r+0x7a>
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003898:	d003      	beq.n	80038a2 <__swsetup_r+0x7a>
 800389a:	4621      	mov	r1, r4
 800389c:	4628      	mov	r0, r5
 800389e:	f000 f85c 	bl	800395a <__smakebuf_r>
 80038a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a6:	f013 0201 	ands.w	r2, r3, #1
 80038aa:	d00a      	beq.n	80038c2 <__swsetup_r+0x9a>
 80038ac:	2200      	movs	r2, #0
 80038ae:	60a2      	str	r2, [r4, #8]
 80038b0:	6962      	ldr	r2, [r4, #20]
 80038b2:	4252      	negs	r2, r2
 80038b4:	61a2      	str	r2, [r4, #24]
 80038b6:	6922      	ldr	r2, [r4, #16]
 80038b8:	b942      	cbnz	r2, 80038cc <__swsetup_r+0xa4>
 80038ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80038be:	d1c5      	bne.n	800384c <__swsetup_r+0x24>
 80038c0:	bd38      	pop	{r3, r4, r5, pc}
 80038c2:	0799      	lsls	r1, r3, #30
 80038c4:	bf58      	it	pl
 80038c6:	6962      	ldrpl	r2, [r4, #20]
 80038c8:	60a2      	str	r2, [r4, #8]
 80038ca:	e7f4      	b.n	80038b6 <__swsetup_r+0x8e>
 80038cc:	2000      	movs	r0, #0
 80038ce:	e7f7      	b.n	80038c0 <__swsetup_r+0x98>
 80038d0:	20000018 	.word	0x20000018

080038d4 <_sbrk_r>:
 80038d4:	b538      	push	{r3, r4, r5, lr}
 80038d6:	2300      	movs	r3, #0
 80038d8:	4d05      	ldr	r5, [pc, #20]	@ (80038f0 <_sbrk_r+0x1c>)
 80038da:	4604      	mov	r4, r0
 80038dc:	4608      	mov	r0, r1
 80038de:	602b      	str	r3, [r5, #0]
 80038e0:	f7fc ff56 	bl	8000790 <_sbrk>
 80038e4:	1c43      	adds	r3, r0, #1
 80038e6:	d102      	bne.n	80038ee <_sbrk_r+0x1a>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	b103      	cbz	r3, 80038ee <_sbrk_r+0x1a>
 80038ec:	6023      	str	r3, [r4, #0]
 80038ee:	bd38      	pop	{r3, r4, r5, pc}
 80038f0:	20000274 	.word	0x20000274

080038f4 <memchr>:
 80038f4:	4603      	mov	r3, r0
 80038f6:	b510      	push	{r4, lr}
 80038f8:	b2c9      	uxtb	r1, r1
 80038fa:	4402      	add	r2, r0
 80038fc:	4293      	cmp	r3, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	d101      	bne.n	8003906 <memchr+0x12>
 8003902:	2000      	movs	r0, #0
 8003904:	e003      	b.n	800390e <memchr+0x1a>
 8003906:	7804      	ldrb	r4, [r0, #0]
 8003908:	3301      	adds	r3, #1
 800390a:	428c      	cmp	r4, r1
 800390c:	d1f6      	bne.n	80038fc <memchr+0x8>
 800390e:	bd10      	pop	{r4, pc}

08003910 <__swhatbuf_r>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	460c      	mov	r4, r1
 8003914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003918:	4615      	mov	r5, r2
 800391a:	2900      	cmp	r1, #0
 800391c:	461e      	mov	r6, r3
 800391e:	b096      	sub	sp, #88	@ 0x58
 8003920:	da0c      	bge.n	800393c <__swhatbuf_r+0x2c>
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	2100      	movs	r1, #0
 8003926:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800392a:	bf14      	ite	ne
 800392c:	2340      	movne	r3, #64	@ 0x40
 800392e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003932:	2000      	movs	r0, #0
 8003934:	6031      	str	r1, [r6, #0]
 8003936:	602b      	str	r3, [r5, #0]
 8003938:	b016      	add	sp, #88	@ 0x58
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	466a      	mov	r2, sp
 800393e:	f000 f849 	bl	80039d4 <_fstat_r>
 8003942:	2800      	cmp	r0, #0
 8003944:	dbed      	blt.n	8003922 <__swhatbuf_r+0x12>
 8003946:	9901      	ldr	r1, [sp, #4]
 8003948:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800394c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003950:	4259      	negs	r1, r3
 8003952:	4159      	adcs	r1, r3
 8003954:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003958:	e7eb      	b.n	8003932 <__swhatbuf_r+0x22>

0800395a <__smakebuf_r>:
 800395a:	898b      	ldrh	r3, [r1, #12]
 800395c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800395e:	079d      	lsls	r5, r3, #30
 8003960:	4606      	mov	r6, r0
 8003962:	460c      	mov	r4, r1
 8003964:	d507      	bpl.n	8003976 <__smakebuf_r+0x1c>
 8003966:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	6123      	str	r3, [r4, #16]
 800396e:	2301      	movs	r3, #1
 8003970:	6163      	str	r3, [r4, #20]
 8003972:	b003      	add	sp, #12
 8003974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003976:	466a      	mov	r2, sp
 8003978:	ab01      	add	r3, sp, #4
 800397a:	f7ff ffc9 	bl	8003910 <__swhatbuf_r>
 800397e:	9f00      	ldr	r7, [sp, #0]
 8003980:	4605      	mov	r5, r0
 8003982:	4639      	mov	r1, r7
 8003984:	4630      	mov	r0, r6
 8003986:	f7ff fb0b 	bl	8002fa0 <_malloc_r>
 800398a:	b948      	cbnz	r0, 80039a0 <__smakebuf_r+0x46>
 800398c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003990:	059a      	lsls	r2, r3, #22
 8003992:	d4ee      	bmi.n	8003972 <__smakebuf_r+0x18>
 8003994:	f023 0303 	bic.w	r3, r3, #3
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	81a3      	strh	r3, [r4, #12]
 800399e:	e7e2      	b.n	8003966 <__smakebuf_r+0xc>
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80039a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039aa:	81a3      	strh	r3, [r4, #12]
 80039ac:	9b01      	ldr	r3, [sp, #4]
 80039ae:	6020      	str	r0, [r4, #0]
 80039b0:	b15b      	cbz	r3, 80039ca <__smakebuf_r+0x70>
 80039b2:	4630      	mov	r0, r6
 80039b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039b8:	f000 f81e 	bl	80039f8 <_isatty_r>
 80039bc:	b128      	cbz	r0, 80039ca <__smakebuf_r+0x70>
 80039be:	89a3      	ldrh	r3, [r4, #12]
 80039c0:	f023 0303 	bic.w	r3, r3, #3
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	431d      	orrs	r5, r3
 80039ce:	81a5      	strh	r5, [r4, #12]
 80039d0:	e7cf      	b.n	8003972 <__smakebuf_r+0x18>
	...

080039d4 <_fstat_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	2300      	movs	r3, #0
 80039d8:	4d06      	ldr	r5, [pc, #24]	@ (80039f4 <_fstat_r+0x20>)
 80039da:	4604      	mov	r4, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	602b      	str	r3, [r5, #0]
 80039e2:	f7fc feaf 	bl	8000744 <_fstat>
 80039e6:	1c43      	adds	r3, r0, #1
 80039e8:	d102      	bne.n	80039f0 <_fstat_r+0x1c>
 80039ea:	682b      	ldr	r3, [r5, #0]
 80039ec:	b103      	cbz	r3, 80039f0 <_fstat_r+0x1c>
 80039ee:	6023      	str	r3, [r4, #0]
 80039f0:	bd38      	pop	{r3, r4, r5, pc}
 80039f2:	bf00      	nop
 80039f4:	20000274 	.word	0x20000274

080039f8 <_isatty_r>:
 80039f8:	b538      	push	{r3, r4, r5, lr}
 80039fa:	2300      	movs	r3, #0
 80039fc:	4d05      	ldr	r5, [pc, #20]	@ (8003a14 <_isatty_r+0x1c>)
 80039fe:	4604      	mov	r4, r0
 8003a00:	4608      	mov	r0, r1
 8003a02:	602b      	str	r3, [r5, #0]
 8003a04:	f7fc fead 	bl	8000762 <_isatty>
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	d102      	bne.n	8003a12 <_isatty_r+0x1a>
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	b103      	cbz	r3, 8003a12 <_isatty_r+0x1a>
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	bd38      	pop	{r3, r4, r5, pc}
 8003a14:	20000274 	.word	0x20000274

08003a18 <_init>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	bf00      	nop
 8003a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1e:	bc08      	pop	{r3}
 8003a20:	469e      	mov	lr, r3
 8003a22:	4770      	bx	lr

08003a24 <_fini>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr
