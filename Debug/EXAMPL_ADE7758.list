
EXAMPL_ADE7758.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004894  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  080049a0  080049a0  000059a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d0  080050d0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080050d0  080050d0  000060d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050d8  080050d8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d8  080050d8  000060d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050dc  080050dc  000060dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080050e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000068  08005148  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08005148  00007330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a09f  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e29  00000000  00000000  00011130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00012f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000757  00000000  00000000  00013908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018848  00000000  00000000  0001405f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca1e  00000000  00000000  0002c8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000863e1  00000000  00000000  000392c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf6a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e3c  00000000  00000000  000bf6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000c2528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004988 	.word	0x08004988

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004988 	.word	0x08004988

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UARTEx_RxEventCallback>:
/* ----END-------- */

ADE7758_SPI ade7758_1;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART2)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0b      	ldr	r2, [pc, #44]	@ (800019c <HAL_UARTEx_RxEventCallback+0x40>)
 800016e:	4293      	cmp	r3, r2
 8000170:	d10f      	bne.n	8000192 <HAL_UARTEx_RxEventCallback+0x36>
  {
    Flag_Rx = true;
 8000172:	4b0b      	ldr	r3, [pc, #44]	@ (80001a0 <HAL_UARTEx_RxEventCallback+0x44>)
 8000174:	2201      	movs	r2, #1
 8000176:	701a      	strb	r2, [r3, #0]
    memcpy(cop_rx_data, rx_data, MAX_BUFFER);
 8000178:	4a0a      	ldr	r2, [pc, #40]	@ (80001a4 <HAL_UARTEx_RxEventCallback+0x48>)
 800017a:	4b0b      	ldr	r3, [pc, #44]	@ (80001a8 <HAL_UARTEx_RxEventCallback+0x4c>)
 800017c:	4614      	mov	r4, r2
 800017e:	461d      	mov	r5, r3
 8000180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000184:	682b      	ldr	r3, [r5, #0]
 8000186:	6023      	str	r3, [r4, #0]
    HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, MAX_BUFFER);
 8000188:	2214      	movs	r2, #20
 800018a:	4907      	ldr	r1, [pc, #28]	@ (80001a8 <HAL_UARTEx_RxEventCallback+0x4c>)
 800018c:	4807      	ldr	r0, [pc, #28]	@ (80001ac <HAL_UARTEx_RxEventCallback+0x50>)
 800018e:	f002 fdb9 	bl	8002d04 <HAL_UARTEx_ReceiveToIdle_IT>
  }
}
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bdb0      	pop	{r4, r5, r7, pc}
 800019a:	bf00      	nop
 800019c:	40004400 	.word	0x40004400
 80001a0:	20000086 	.word	0x20000086
 80001a4:	200000e4 	.word	0x200000e4
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	20000188 	.word	0x20000188

080001b0 <stringToNumber>:

int stringToNumber(const char *str)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
  return atoi(str); // Hàm atoi có sẵn trong thư viện stdlib.h
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	f003 fc23 	bl	8003a04 <atoi>
 80001be:	4603      	mov	r3, r0
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	3708      	adds	r7, #8
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}

080001c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f001 f992 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 feb2 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 ff68 	bl	80010a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001d8:	f000 ff06 	bl	8000fe8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 ff3a 	bl	8001054 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 80001e0:	f000 fee8 	bl	8000fb4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, MAX_BUFFER);
 80001e4:	2214      	movs	r2, #20
 80001e6:	49a9      	ldr	r1, [pc, #676]	@ (800048c <main+0x2c4>)
 80001e8:	48a9      	ldr	r0, [pc, #676]	@ (8000490 <main+0x2c8>)
 80001ea:	f002 fd8b 	bl	8002d04 <HAL_UARTEx_ReceiveToIdle_IT>
  ADE7758_Init(&ade7758_1, &hspi1, GPIOB, GPIO_PIN_0);
 80001ee:	2301      	movs	r3, #1
 80001f0:	4aa8      	ldr	r2, [pc, #672]	@ (8000494 <main+0x2cc>)
 80001f2:	49a9      	ldr	r1, [pc, #676]	@ (8000498 <main+0x2d0>)
 80001f4:	48a9      	ldr	r0, [pc, #676]	@ (800049c <main+0x2d4>)
 80001f6:	f003 fb4b 	bl	8003890 <ADE7758_Init>
  // ADE7758_Write(&ade7758_1, 0x30, SAGLVL, 1);
  // ADE7758_Write(&ade7758_1, 0x1C0, MASK, 3);
  // ADE7758_Write(&ade7758_1, 0x40, LCYCMODE, 1);
  // ADE7758_Write(&ade7758_1, 0x9C, COMPMODE, 1);

  ADE7758_Write(&ade7758_1, 0xF8, AVRMSOS, 2);
 80001fa:	2302      	movs	r3, #2
 80001fc:	2233      	movs	r2, #51	@ 0x33
 80001fe:	21f8      	movs	r1, #248	@ 0xf8
 8000200:	48a6      	ldr	r0, [pc, #664]	@ (800049c <main+0x2d4>)
 8000202:	f003 fb5a 	bl	80038ba <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0x19, AIRMSOS, 2);
 8000206:	2302      	movs	r3, #2
 8000208:	2236      	movs	r2, #54	@ 0x36
 800020a:	2119      	movs	r1, #25
 800020c:	48a3      	ldr	r0, [pc, #652]	@ (800049c <main+0x2d4>)
 800020e:	f003 fb54 	bl	80038ba <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0x04, AWG, 2);
 8000212:	2302      	movs	r3, #2
 8000214:	222a      	movs	r2, #42	@ 0x2a
 8000216:	2104      	movs	r1, #4
 8000218:	48a0      	ldr	r0, [pc, #640]	@ (800049c <main+0x2d4>)
 800021a:	f003 fb4e 	bl	80038ba <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0x04, AVAG, 2);
 800021e:	2302      	movs	r3, #2
 8000220:	2230      	movs	r2, #48	@ 0x30
 8000222:	2104      	movs	r1, #4
 8000224:	489d      	ldr	r0, [pc, #628]	@ (800049c <main+0x2d4>)
 8000226:	f003 fb48 	bl	80038ba <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0xF6, APHCAL, 2);
 800022a:	2302      	movs	r3, #2
 800022c:	223f      	movs	r2, #63	@ 0x3f
 800022e:	21f6      	movs	r1, #246	@ 0xf6
 8000230:	489a      	ldr	r0, [pc, #616]	@ (800049c <main+0x2d4>)
 8000232:	f003 fb42 	bl	80038ba <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0xF8, AWAITOS, 2);
 8000236:	2302      	movs	r3, #2
 8000238:	2239      	movs	r2, #57	@ 0x39
 800023a:	21f8      	movs	r1, #248	@ 0xf8
 800023c:	4897      	ldr	r0, [pc, #604]	@ (800049c <main+0x2d4>)
 800023e:	f003 fb3c 	bl	80038ba <ADE7758_Write>
  ADE7758_Write(&ade7758_1, 0xF8, AVAROS, 2);
 8000242:	2302      	movs	r3, #2
 8000244:	223c      	movs	r2, #60	@ 0x3c
 8000246:	21f8      	movs	r1, #248	@ 0xf8
 8000248:	4894      	ldr	r0, [pc, #592]	@ (800049c <main+0x2d4>)
 800024a:	f003 fb36 	bl	80038ba <ADE7758_Write>

  Next_page = CASE1;
 800024e:	4b94      	ldr	r3, [pc, #592]	@ (80004a0 <main+0x2d8>)
 8000250:	2201      	movs	r2, #1
 8000252:	701a      	strb	r2, [r3, #0]
  Select = CASE1;
 8000254:	4b93      	ldr	r3, [pc, #588]	@ (80004a4 <main+0x2dc>)
 8000256:	2201      	movs	r2, #1
 8000258:	701a      	strb	r2, [r3, #0]
  Flag_Rx = false;
 800025a:	4b93      	ldr	r3, [pc, #588]	@ (80004a8 <main+0x2e0>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
  Flag_display = false;
 8000260:	4b92      	ldr	r3, [pc, #584]	@ (80004ac <main+0x2e4>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
  count = 0;
 8000266:	4b92      	ldr	r3, [pc, #584]	@ (80004b0 <main+0x2e8>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    switch (Next_page)
 800026c:	4b8c      	ldr	r3, [pc, #560]	@ (80004a0 <main+0x2d8>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	3b01      	subs	r3, #1
 8000272:	2b03      	cmp	r3, #3
 8000274:	f200 8631 	bhi.w	8000eda <main+0xd12>
 8000278:	a201      	add	r2, pc, #4	@ (adr r2, 8000280 <main+0xb8>)
 800027a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027e:	bf00      	nop
 8000280:	08000291 	.word	0x08000291
 8000284:	0800044f 	.word	0x0800044f
 8000288:	08000b49 	.word	0x08000b49
 800028c:	08000e75 	.word	0x08000e75
    {
    case CASE1:
      /* code */
      if (Flag_display == false)
 8000290:	4b86      	ldr	r3, [pc, #536]	@ (80004ac <main+0x2e4>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	f083 0301 	eor.w	r3, r3, #1
 8000298:	b2db      	uxtb	r3, r3
 800029a:	2b00      	cmp	r3, #0
 800029c:	f000 8094 	beq.w	80003c8 <main+0x200>
      {
        /* code */
        Flag_display = true;
 80002a0:	4b82      	ldr	r3, [pc, #520]	@ (80004ac <main+0x2e4>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	701a      	strb	r2, [r3, #0]
        strcpy(Line1, "\n\r| 1. Setting moc chuan de do luong (Press \"1\" de chon): \n\r");
 80002a6:	4a83      	ldr	r2, [pc, #524]	@ (80004b4 <main+0x2ec>)
 80002a8:	4b83      	ldr	r3, [pc, #524]	@ (80004b8 <main+0x2f0>)
 80002aa:	4614      	mov	r4, r2
 80002ac:	461d      	mov	r5, r3
 80002ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002be:	c407      	stmia	r4!, {r0, r1, r2}
 80002c0:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 80002c2:	487c      	ldr	r0, [pc, #496]	@ (80004b4 <main+0x2ec>)
 80002c4:	f7ff ff42 	bl	800014c <strlen>
 80002c8:	4603      	mov	r3, r0
 80002ca:	b29a      	uxth	r2, r3
 80002cc:	4b7b      	ldr	r3, [pc, #492]	@ (80004bc <main+0x2f4>)
 80002ce:	4979      	ldr	r1, [pc, #484]	@ (80004b4 <main+0x2ec>)
 80002d0:	486f      	ldr	r0, [pc, #444]	@ (8000490 <main+0x2c8>)
 80002d2:	f002 fc8c 	bl	8002bee <HAL_UART_Transmit>
        strcpy(Line1, "| --------------------------------------------------------\n\r");
 80002d6:	4a77      	ldr	r2, [pc, #476]	@ (80004b4 <main+0x2ec>)
 80002d8:	4b79      	ldr	r3, [pc, #484]	@ (80004c0 <main+0x2f8>)
 80002da:	4614      	mov	r4, r2
 80002dc:	461d      	mov	r5, r3
 80002de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002ee:	c407      	stmia	r4!, {r0, r1, r2}
 80002f0:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 80002f2:	4870      	ldr	r0, [pc, #448]	@ (80004b4 <main+0x2ec>)
 80002f4:	f7ff ff2a 	bl	800014c <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	4b6f      	ldr	r3, [pc, #444]	@ (80004bc <main+0x2f4>)
 80002fe:	496d      	ldr	r1, [pc, #436]	@ (80004b4 <main+0x2ec>)
 8000300:	4863      	ldr	r0, [pc, #396]	@ (8000490 <main+0x2c8>)
 8000302:	f002 fc74 	bl	8002bee <HAL_UART_Transmit>
        strcpy(Line1, "| 2. Do luong gia tri thuc te (Press \"2\" de chon): \n\r");
 8000306:	4a6b      	ldr	r2, [pc, #428]	@ (80004b4 <main+0x2ec>)
 8000308:	4b6e      	ldr	r3, [pc, #440]	@ (80004c4 <main+0x2fc>)
 800030a:	4614      	mov	r4, r2
 800030c:	461d      	mov	r5, r3
 800030e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800031e:	6020      	str	r0, [r4, #0]
 8000320:	3404      	adds	r4, #4
 8000322:	8021      	strh	r1, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 8000324:	4863      	ldr	r0, [pc, #396]	@ (80004b4 <main+0x2ec>)
 8000326:	f7ff ff11 	bl	800014c <strlen>
 800032a:	4603      	mov	r3, r0
 800032c:	b29a      	uxth	r2, r3
 800032e:	4b63      	ldr	r3, [pc, #396]	@ (80004bc <main+0x2f4>)
 8000330:	4960      	ldr	r1, [pc, #384]	@ (80004b4 <main+0x2ec>)
 8000332:	4857      	ldr	r0, [pc, #348]	@ (8000490 <main+0x2c8>)
 8000334:	f002 fc5b 	bl	8002bee <HAL_UART_Transmit>
        strcpy(Line1, "| --------------------------------------------------------\n\r");
 8000338:	4a5e      	ldr	r2, [pc, #376]	@ (80004b4 <main+0x2ec>)
 800033a:	4b61      	ldr	r3, [pc, #388]	@ (80004c0 <main+0x2f8>)
 800033c:	4614      	mov	r4, r2
 800033e:	461d      	mov	r5, r3
 8000340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800034c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000350:	c407      	stmia	r4!, {r0, r1, r2}
 8000352:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 8000354:	4857      	ldr	r0, [pc, #348]	@ (80004b4 <main+0x2ec>)
 8000356:	f7ff fef9 	bl	800014c <strlen>
 800035a:	4603      	mov	r3, r0
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b57      	ldr	r3, [pc, #348]	@ (80004bc <main+0x2f4>)
 8000360:	4954      	ldr	r1, [pc, #336]	@ (80004b4 <main+0x2ec>)
 8000362:	484b      	ldr	r0, [pc, #300]	@ (8000490 <main+0x2c8>)
 8000364:	f002 fc43 	bl	8002bee <HAL_UART_Transmit>
        strcpy(Line1, "| 3. Hien thi gia tri moc da set (Press \"3\" de chon): \n\r");
 8000368:	4a52      	ldr	r2, [pc, #328]	@ (80004b4 <main+0x2ec>)
 800036a:	4b57      	ldr	r3, [pc, #348]	@ (80004c8 <main+0x300>)
 800036c:	4614      	mov	r4, r2
 800036e:	461d      	mov	r5, r3
 8000370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800037a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800037c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000380:	c403      	stmia	r4!, {r0, r1}
 8000382:	7022      	strb	r2, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 8000384:	484b      	ldr	r0, [pc, #300]	@ (80004b4 <main+0x2ec>)
 8000386:	f7ff fee1 	bl	800014c <strlen>
 800038a:	4603      	mov	r3, r0
 800038c:	b29a      	uxth	r2, r3
 800038e:	4b4b      	ldr	r3, [pc, #300]	@ (80004bc <main+0x2f4>)
 8000390:	4948      	ldr	r1, [pc, #288]	@ (80004b4 <main+0x2ec>)
 8000392:	483f      	ldr	r0, [pc, #252]	@ (8000490 <main+0x2c8>)
 8000394:	f002 fc2b 	bl	8002bee <HAL_UART_Transmit>
        strcpy(Line1, "| --------------------------------------------------------\n\r");
 8000398:	4a46      	ldr	r2, [pc, #280]	@ (80004b4 <main+0x2ec>)
 800039a:	4b49      	ldr	r3, [pc, #292]	@ (80004c0 <main+0x2f8>)
 800039c:	4614      	mov	r4, r2
 800039e:	461d      	mov	r5, r3
 80003a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003b0:	c407      	stmia	r4!, {r0, r1, r2}
 80003b2:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 80003b4:	483f      	ldr	r0, [pc, #252]	@ (80004b4 <main+0x2ec>)
 80003b6:	f7ff fec9 	bl	800014c <strlen>
 80003ba:	4603      	mov	r3, r0
 80003bc:	b29a      	uxth	r2, r3
 80003be:	4b3f      	ldr	r3, [pc, #252]	@ (80004bc <main+0x2f4>)
 80003c0:	493c      	ldr	r1, [pc, #240]	@ (80004b4 <main+0x2ec>)
 80003c2:	4833      	ldr	r0, [pc, #204]	@ (8000490 <main+0x2c8>)
 80003c4:	f002 fc13 	bl	8002bee <HAL_UART_Transmit>
      }
      if (Flag_Rx == true)
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <main+0x2e0>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	f000 8586 	beq.w	8000ede <main+0xd16>
      {
        /* code */
        if (cop_rx_data[0] == '1')
 80003d2:	4b3e      	ldr	r3, [pc, #248]	@ (80004cc <main+0x304>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b31      	cmp	r3, #49	@ 0x31
 80003d8:	d10d      	bne.n	80003f6 <main+0x22e>
        {
          /* code */
          Flag_Rx = false;
 80003da:	4b33      	ldr	r3, [pc, #204]	@ (80004a8 <main+0x2e0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
          memset(rx_data, 0, MAX_BUFFER);
 80003e0:	2214      	movs	r2, #20
 80003e2:	2100      	movs	r1, #0
 80003e4:	4829      	ldr	r0, [pc, #164]	@ (800048c <main+0x2c4>)
 80003e6:	f003 fcac 	bl	8003d42 <memset>
          Next_page = CASE2;
 80003ea:	4b2d      	ldr	r3, [pc, #180]	@ (80004a0 <main+0x2d8>)
 80003ec:	2202      	movs	r2, #2
 80003ee:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 80003f0:	4b2e      	ldr	r3, [pc, #184]	@ (80004ac <main+0x2e4>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
        }
        if (cop_rx_data[0] == '2')
 80003f6:	4b35      	ldr	r3, [pc, #212]	@ (80004cc <main+0x304>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b32      	cmp	r3, #50	@ 0x32
 80003fc:	d10d      	bne.n	800041a <main+0x252>
        {
          /* code */
          Flag_Rx = false;
 80003fe:	4b2a      	ldr	r3, [pc, #168]	@ (80004a8 <main+0x2e0>)
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
          memset(rx_data, 0, MAX_BUFFER);
 8000404:	2214      	movs	r2, #20
 8000406:	2100      	movs	r1, #0
 8000408:	4820      	ldr	r0, [pc, #128]	@ (800048c <main+0x2c4>)
 800040a:	f003 fc9a 	bl	8003d42 <memset>
          Next_page = CASE3;
 800040e:	4b24      	ldr	r3, [pc, #144]	@ (80004a0 <main+0x2d8>)
 8000410:	2203      	movs	r2, #3
 8000412:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 8000414:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <main+0x2e4>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
        }
        if (cop_rx_data[0] == '3')
 800041a:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <main+0x304>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b33      	cmp	r3, #51	@ 0x33
 8000420:	f040 855d 	bne.w	8000ede <main+0xd16>
        {
          /* code */
          Flag_Rx = false;
 8000424:	4b20      	ldr	r3, [pc, #128]	@ (80004a8 <main+0x2e0>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
          memset(rx_data, 0, MAX_BUFFER);
 800042a:	2214      	movs	r2, #20
 800042c:	2100      	movs	r1, #0
 800042e:	4817      	ldr	r0, [pc, #92]	@ (800048c <main+0x2c4>)
 8000430:	f003 fc87 	bl	8003d42 <memset>
          memset(cop_rx_data, 0, MAX_BUFFER);
 8000434:	2214      	movs	r2, #20
 8000436:	2100      	movs	r1, #0
 8000438:	4824      	ldr	r0, [pc, #144]	@ (80004cc <main+0x304>)
 800043a:	f003 fc82 	bl	8003d42 <memset>
          Next_page = CASE4;
 800043e:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <main+0x2d8>)
 8000440:	2204      	movs	r2, #4
 8000442:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 8000444:	4b19      	ldr	r3, [pc, #100]	@ (80004ac <main+0x2e4>)
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 800044a:	f000 bd48 	b.w	8000ede <main+0xd16>

    case CASE2:
      switch (Select)
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <main+0x2dc>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	3b01      	subs	r3, #1
 8000454:	2b0a      	cmp	r3, #10
 8000456:	f200 833b 	bhi.w	8000ad0 <main+0x908>
 800045a:	a201      	add	r2, pc, #4	@ (adr r2, 8000460 <main+0x298>)
 800045c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000460:	080004d1 	.word	0x080004d1
 8000464:	08000555 	.word	0x08000555
 8000468:	080005d3 	.word	0x080005d3
 800046c:	08000651 	.word	0x08000651
 8000470:	080006cf 	.word	0x080006cf
 8000474:	08000799 	.word	0x08000799
 8000478:	08000817 	.word	0x08000817
 800047c:	08000895 	.word	0x08000895
 8000480:	08000913 	.word	0x08000913
 8000484:	08000991 	.word	0x08000991
 8000488:	08000a65 	.word	0x08000a65
 800048c:	200000d0 	.word	0x200000d0
 8000490:	20000188 	.word	0x20000188
 8000494:	40010c00 	.word	0x40010c00
 8000498:	20000130 	.word	0x20000130
 800049c:	200001d0 	.word	0x200001d0
 80004a0:	20000084 	.word	0x20000084
 80004a4:	20000085 	.word	0x20000085
 80004a8:	20000086 	.word	0x20000086
 80004ac:	20000087 	.word	0x20000087
 80004b0:	200000f9 	.word	0x200000f9
 80004b4:	20000088 	.word	0x20000088
 80004b8:	080049a4 	.word	0x080049a4
 80004bc:	000f4240 	.word	0x000f4240
 80004c0:	080049e4 	.word	0x080049e4
 80004c4:	08004a24 	.word	0x08004a24
 80004c8:	08004a5c 	.word	0x08004a5c
 80004cc:	200000e4 	.word	0x200000e4
      {
      case /* constant-expression */ CASE1:
        /* code */
        if (Flag_display == false)
 80004d0:	4b9e      	ldr	r3, [pc, #632]	@ (800074c <main+0x584>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	f083 0301 	eor.w	r3, r3, #1
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d019      	beq.n	8000512 <main+0x34a>
        {
          /* code */
          Flag_display = true;
 80004de:	4b9b      	ldr	r3, [pc, #620]	@ (800074c <main+0x584>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]
          strcpy(Line1, "Nhap gia tri DIEN AP (ADC): \n\r");
 80004e4:	4a9a      	ldr	r2, [pc, #616]	@ (8000750 <main+0x588>)
 80004e6:	4b9b      	ldr	r3, [pc, #620]	@ (8000754 <main+0x58c>)
 80004e8:	4614      	mov	r4, r2
 80004ea:	461d      	mov	r5, r3
 80004ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004f4:	c407      	stmia	r4!, {r0, r1, r2}
 80004f6:	8023      	strh	r3, [r4, #0]
 80004f8:	3402      	adds	r4, #2
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	7023      	strb	r3, [r4, #0]

          HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 80004fe:	4894      	ldr	r0, [pc, #592]	@ (8000750 <main+0x588>)
 8000500:	f7ff fe24 	bl	800014c <strlen>
 8000504:	4603      	mov	r3, r0
 8000506:	b29a      	uxth	r2, r3
 8000508:	4b93      	ldr	r3, [pc, #588]	@ (8000758 <main+0x590>)
 800050a:	4991      	ldr	r1, [pc, #580]	@ (8000750 <main+0x588>)
 800050c:	4893      	ldr	r0, [pc, #588]	@ (800075c <main+0x594>)
 800050e:	f002 fb6e 	bl	8002bee <HAL_UART_Transmit>
        }
        if (Flag_Rx == true)
 8000512:	4b93      	ldr	r3, [pc, #588]	@ (8000760 <main+0x598>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	f000 82dc 	beq.w	8000ad4 <main+0x90c>
        {
          /* code */
          Flag_Rx = false;
 800051c:	4b90      	ldr	r3, [pc, #576]	@ (8000760 <main+0x598>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
          length = strlen((char *)cop_rx_data);
 8000522:	4890      	ldr	r0, [pc, #576]	@ (8000764 <main+0x59c>)
 8000524:	f7ff fe12 	bl	800014c <strlen>
 8000528:	4603      	mov	r3, r0
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b8e      	ldr	r3, [pc, #568]	@ (8000768 <main+0x5a0>)
 800052e:	701a      	strb	r2, [r3, #0]
          ADC_Voltage = stringToNumber((char *)cop_rx_data);
 8000530:	488c      	ldr	r0, [pc, #560]	@ (8000764 <main+0x59c>)
 8000532:	f7ff fe3d 	bl	80001b0 <stringToNumber>
 8000536:	4603      	mov	r3, r0
 8000538:	4a8c      	ldr	r2, [pc, #560]	@ (800076c <main+0x5a4>)
 800053a:	6013      	str	r3, [r2, #0]
          memset(rx_data, 0, MAX_BUFFER);
 800053c:	2214      	movs	r2, #20
 800053e:	2100      	movs	r1, #0
 8000540:	488b      	ldr	r0, [pc, #556]	@ (8000770 <main+0x5a8>)
 8000542:	f003 fbfe 	bl	8003d42 <memset>
          // ADC_Voltage = ADC_Voltage - 100;

          Select = CASE2;
 8000546:	4b8b      	ldr	r3, [pc, #556]	@ (8000774 <main+0x5ac>)
 8000548:	2202      	movs	r2, #2
 800054a:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 800054c:	4b7f      	ldr	r3, [pc, #508]	@ (800074c <main+0x584>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000552:	e2bf      	b.n	8000ad4 <main+0x90c>

      case CASE2:
        if (Flag_display == false)
 8000554:	4b7d      	ldr	r3, [pc, #500]	@ (800074c <main+0x584>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	f083 0301 	eor.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d016      	beq.n	8000590 <main+0x3c8>
        {
          /* code */
          Flag_display = true;
 8000562:	4b7a      	ldr	r3, [pc, #488]	@ (800074c <main+0x584>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
          strcpy(Line1, "Nhap gia tri DONG DIEN (ADC): \n\r");
 8000568:	4a79      	ldr	r2, [pc, #484]	@ (8000750 <main+0x588>)
 800056a:	4b83      	ldr	r3, [pc, #524]	@ (8000778 <main+0x5b0>)
 800056c:	4614      	mov	r4, r2
 800056e:	461d      	mov	r5, r3
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	682b      	ldr	r3, [r5, #0]
 800057a:	7023      	strb	r3, [r4, #0]

          HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 800057c:	4874      	ldr	r0, [pc, #464]	@ (8000750 <main+0x588>)
 800057e:	f7ff fde5 	bl	800014c <strlen>
 8000582:	4603      	mov	r3, r0
 8000584:	b29a      	uxth	r2, r3
 8000586:	4b74      	ldr	r3, [pc, #464]	@ (8000758 <main+0x590>)
 8000588:	4971      	ldr	r1, [pc, #452]	@ (8000750 <main+0x588>)
 800058a:	4874      	ldr	r0, [pc, #464]	@ (800075c <main+0x594>)
 800058c:	f002 fb2f 	bl	8002bee <HAL_UART_Transmit>
        }
        if (Flag_Rx == true)
 8000590:	4b73      	ldr	r3, [pc, #460]	@ (8000760 <main+0x598>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	f000 829f 	beq.w	8000ad8 <main+0x910>
        {
          /* code */
          Flag_Rx = false;
 800059a:	4b71      	ldr	r3, [pc, #452]	@ (8000760 <main+0x598>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
          length = strlen((char *)cop_rx_data);
 80005a0:	4870      	ldr	r0, [pc, #448]	@ (8000764 <main+0x59c>)
 80005a2:	f7ff fdd3 	bl	800014c <strlen>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b6f      	ldr	r3, [pc, #444]	@ (8000768 <main+0x5a0>)
 80005ac:	701a      	strb	r2, [r3, #0]
          ADC_Current = stringToNumber((char *)cop_rx_data);
 80005ae:	486d      	ldr	r0, [pc, #436]	@ (8000764 <main+0x59c>)
 80005b0:	f7ff fdfe 	bl	80001b0 <stringToNumber>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a71      	ldr	r2, [pc, #452]	@ (800077c <main+0x5b4>)
 80005b8:	6013      	str	r3, [r2, #0]
          memset(rx_data, 0, MAX_BUFFER);
 80005ba:	2214      	movs	r2, #20
 80005bc:	2100      	movs	r1, #0
 80005be:	486c      	ldr	r0, [pc, #432]	@ (8000770 <main+0x5a8>)
 80005c0:	f003 fbbf 	bl	8003d42 <memset>

          Select = CASE3;
 80005c4:	4b6b      	ldr	r3, [pc, #428]	@ (8000774 <main+0x5ac>)
 80005c6:	2203      	movs	r2, #3
 80005c8:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 80005ca:	4b60      	ldr	r3, [pc, #384]	@ (800074c <main+0x584>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
        }
        break;
 80005d0:	e282      	b.n	8000ad8 <main+0x910>

      case CASE3:
        if (Flag_display == false)
 80005d2:	4b5e      	ldr	r3, [pc, #376]	@ (800074c <main+0x584>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	f083 0301 	eor.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d016      	beq.n	800060e <main+0x446>
        {
          /* code */
          Flag_display = true;
 80005e0:	4b5a      	ldr	r3, [pc, #360]	@ (800074c <main+0x584>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
          strcpy(Line1, "Nhap gia tri CONG SUAT (ADC): \n\r");
 80005e6:	4a5a      	ldr	r2, [pc, #360]	@ (8000750 <main+0x588>)
 80005e8:	4b65      	ldr	r3, [pc, #404]	@ (8000780 <main+0x5b8>)
 80005ea:	4614      	mov	r4, r2
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	682b      	ldr	r3, [r5, #0]
 80005f8:	7023      	strb	r3, [r4, #0]

          HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 80005fa:	4855      	ldr	r0, [pc, #340]	@ (8000750 <main+0x588>)
 80005fc:	f7ff fda6 	bl	800014c <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	4b54      	ldr	r3, [pc, #336]	@ (8000758 <main+0x590>)
 8000606:	4952      	ldr	r1, [pc, #328]	@ (8000750 <main+0x588>)
 8000608:	4854      	ldr	r0, [pc, #336]	@ (800075c <main+0x594>)
 800060a:	f002 faf0 	bl	8002bee <HAL_UART_Transmit>
        }
        if (Flag_Rx == true)
 800060e:	4b54      	ldr	r3, [pc, #336]	@ (8000760 <main+0x598>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	f000 8262 	beq.w	8000adc <main+0x914>
        {
          /* code */
          Flag_Rx = false;
 8000618:	4b51      	ldr	r3, [pc, #324]	@ (8000760 <main+0x598>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
          length = strlen((char *)cop_rx_data);
 800061e:	4851      	ldr	r0, [pc, #324]	@ (8000764 <main+0x59c>)
 8000620:	f7ff fd94 	bl	800014c <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b4f      	ldr	r3, [pc, #316]	@ (8000768 <main+0x5a0>)
 800062a:	701a      	strb	r2, [r3, #0]
          ADC_Power = stringToNumber((char *)cop_rx_data);
 800062c:	484d      	ldr	r0, [pc, #308]	@ (8000764 <main+0x59c>)
 800062e:	f7ff fdbf 	bl	80001b0 <stringToNumber>
 8000632:	4603      	mov	r3, r0
 8000634:	4a53      	ldr	r2, [pc, #332]	@ (8000784 <main+0x5bc>)
 8000636:	6013      	str	r3, [r2, #0]
          memset(rx_data, 0, MAX_BUFFER);
 8000638:	2214      	movs	r2, #20
 800063a:	2100      	movs	r1, #0
 800063c:	484c      	ldr	r0, [pc, #304]	@ (8000770 <main+0x5a8>)
 800063e:	f003 fb80 	bl	8003d42 <memset>

          Select = CASE4;
 8000642:	4b4c      	ldr	r3, [pc, #304]	@ (8000774 <main+0x5ac>)
 8000644:	2204      	movs	r2, #4
 8000646:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 8000648:	4b40      	ldr	r3, [pc, #256]	@ (800074c <main+0x584>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800064e:	e245      	b.n	8000adc <main+0x914>

      case CASE4:
        if (Flag_display == false)
 8000650:	4b3e      	ldr	r3, [pc, #248]	@ (800074c <main+0x584>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	f083 0301 	eor.w	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d016      	beq.n	800068c <main+0x4c4>
        {
          /* code */
          Flag_display = true;
 800065e:	4b3b      	ldr	r3, [pc, #236]	@ (800074c <main+0x584>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
          strcpy(Line1, "Nhap gia tri CONG SUAT PK (ADC): \n\r");
 8000664:	4a3a      	ldr	r2, [pc, #232]	@ (8000750 <main+0x588>)
 8000666:	4b48      	ldr	r3, [pc, #288]	@ (8000788 <main+0x5c0>)
 8000668:	4614      	mov	r4, r2
 800066a:	461d      	mov	r5, r3
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000674:	682b      	ldr	r3, [r5, #0]
 8000676:	6023      	str	r3, [r4, #0]

          HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 8000678:	4835      	ldr	r0, [pc, #212]	@ (8000750 <main+0x588>)
 800067a:	f7ff fd67 	bl	800014c <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b35      	ldr	r3, [pc, #212]	@ (8000758 <main+0x590>)
 8000684:	4932      	ldr	r1, [pc, #200]	@ (8000750 <main+0x588>)
 8000686:	4835      	ldr	r0, [pc, #212]	@ (800075c <main+0x594>)
 8000688:	f002 fab1 	bl	8002bee <HAL_UART_Transmit>
        }
        if (Flag_Rx == true)
 800068c:	4b34      	ldr	r3, [pc, #208]	@ (8000760 <main+0x598>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 8225 	beq.w	8000ae0 <main+0x918>
        {
          /* code */
          Flag_Rx = false;
 8000696:	4b32      	ldr	r3, [pc, #200]	@ (8000760 <main+0x598>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
          length = strlen((char *)cop_rx_data);
 800069c:	4831      	ldr	r0, [pc, #196]	@ (8000764 <main+0x59c>)
 800069e:	f7ff fd55 	bl	800014c <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <main+0x5a0>)
 80006a8:	701a      	strb	r2, [r3, #0]
          ADC_Reactive = stringToNumber((char *)cop_rx_data);
 80006aa:	482e      	ldr	r0, [pc, #184]	@ (8000764 <main+0x59c>)
 80006ac:	f7ff fd80 	bl	80001b0 <stringToNumber>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a36      	ldr	r2, [pc, #216]	@ (800078c <main+0x5c4>)
 80006b4:	6013      	str	r3, [r2, #0]
          memset(rx_data, 0, MAX_BUFFER);
 80006b6:	2214      	movs	r2, #20
 80006b8:	2100      	movs	r1, #0
 80006ba:	482d      	ldr	r0, [pc, #180]	@ (8000770 <main+0x5a8>)
 80006bc:	f003 fb41 	bl	8003d42 <memset>

          Select = CASE5;
 80006c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000774 <main+0x5ac>)
 80006c2:	2205      	movs	r2, #5
 80006c4:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 80006c6:	4b21      	ldr	r3, [pc, #132]	@ (800074c <main+0x584>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
        }
        break;
 80006cc:	e208      	b.n	8000ae0 <main+0x918>

      case CASE5:
        if (Flag_display == false)
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <main+0x584>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	f083 0301 	eor.w	r3, r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d016      	beq.n	800070a <main+0x542>
        {
          /* code */
          Flag_display = true;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <main+0x584>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
          strcpy(Line1, "Nhap gia tri CONG SUAT TP (ADC): \n\r");
 80006e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000750 <main+0x588>)
 80006e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000790 <main+0x5c8>)
 80006e6:	4614      	mov	r4, r2
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f2:	682b      	ldr	r3, [r5, #0]
 80006f4:	6023      	str	r3, [r4, #0]

          HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 80006f6:	4816      	ldr	r0, [pc, #88]	@ (8000750 <main+0x588>)
 80006f8:	f7ff fd28 	bl	800014c <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <main+0x590>)
 8000702:	4913      	ldr	r1, [pc, #76]	@ (8000750 <main+0x588>)
 8000704:	4815      	ldr	r0, [pc, #84]	@ (800075c <main+0x594>)
 8000706:	f002 fa72 	bl	8002bee <HAL_UART_Transmit>
        }
        if (Flag_Rx == true)
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <main+0x598>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	f000 81e8 	beq.w	8000ae4 <main+0x91c>
        {
          /* code */
          Flag_Rx = false;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <main+0x598>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
          length = strlen((char *)cop_rx_data);
 800071a:	4812      	ldr	r0, [pc, #72]	@ (8000764 <main+0x59c>)
 800071c:	f7ff fd16 	bl	800014c <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <main+0x5a0>)
 8000726:	701a      	strb	r2, [r3, #0]
          ADC_Apparent = stringToNumber((char *)cop_rx_data);
 8000728:	480e      	ldr	r0, [pc, #56]	@ (8000764 <main+0x59c>)
 800072a:	f7ff fd41 	bl	80001b0 <stringToNumber>
 800072e:	4603      	mov	r3, r0
 8000730:	4a18      	ldr	r2, [pc, #96]	@ (8000794 <main+0x5cc>)
 8000732:	6013      	str	r3, [r2, #0]
          memset(rx_data, 0, MAX_BUFFER);
 8000734:	2214      	movs	r2, #20
 8000736:	2100      	movs	r1, #0
 8000738:	480d      	ldr	r0, [pc, #52]	@ (8000770 <main+0x5a8>)
 800073a:	f003 fb02 	bl	8003d42 <memset>

          Select = CASE6;
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <main+0x5ac>)
 8000740:	2206      	movs	r2, #6
 8000742:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 8000744:	4b01      	ldr	r3, [pc, #4]	@ (800074c <main+0x584>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
        }
        break;
 800074a:	e1cb      	b.n	8000ae4 <main+0x91c>
 800074c:	20000087 	.word	0x20000087
 8000750:	20000088 	.word	0x20000088
 8000754:	08004a98 	.word	0x08004a98
 8000758:	000f4240 	.word	0x000f4240
 800075c:	20000188 	.word	0x20000188
 8000760:	20000086 	.word	0x20000086
 8000764:	200000e4 	.word	0x200000e4
 8000768:	200000f8 	.word	0x200000f8
 800076c:	20000100 	.word	0x20000100
 8000770:	200000d0 	.word	0x200000d0
 8000774:	20000085 	.word	0x20000085
 8000778:	08004ab8 	.word	0x08004ab8
 800077c:	200000fc 	.word	0x200000fc
 8000780:	08004adc 	.word	0x08004adc
 8000784:	20000104 	.word	0x20000104
 8000788:	08004b00 	.word	0x08004b00
 800078c:	20000108 	.word	0x20000108
 8000790:	08004b24 	.word	0x08004b24
 8000794:	2000010c 	.word	0x2000010c

      case CASE6:
        if (Flag_display == false)
 8000798:	4b9f      	ldr	r3, [pc, #636]	@ (8000a18 <main+0x850>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	f083 0301 	eor.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d016      	beq.n	80007d4 <main+0x60c>
        {
          /* code */
          Flag_display = true;
 80007a6:	4b9c      	ldr	r3, [pc, #624]	@ (8000a18 <main+0x850>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
          strcpy(Line1, "Nhap gia tri DIEN AP (VOLT): \n\r");
 80007ac:	4a9b      	ldr	r2, [pc, #620]	@ (8000a1c <main+0x854>)
 80007ae:	4b9c      	ldr	r3, [pc, #624]	@ (8000a20 <main+0x858>)
 80007b0:	4614      	mov	r4, r2
 80007b2:	461d      	mov	r5, r3
 80007b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

          HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 80007c0:	4896      	ldr	r0, [pc, #600]	@ (8000a1c <main+0x854>)
 80007c2:	f7ff fcc3 	bl	800014c <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4b96      	ldr	r3, [pc, #600]	@ (8000a24 <main+0x85c>)
 80007cc:	4993      	ldr	r1, [pc, #588]	@ (8000a1c <main+0x854>)
 80007ce:	4896      	ldr	r0, [pc, #600]	@ (8000a28 <main+0x860>)
 80007d0:	f002 fa0d 	bl	8002bee <HAL_UART_Transmit>
        }
        if (Flag_Rx == true)
 80007d4:	4b95      	ldr	r3, [pc, #596]	@ (8000a2c <main+0x864>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 8185 	beq.w	8000ae8 <main+0x920>
        {
          /* code */
          Flag_Rx = false;
 80007de:	4b93      	ldr	r3, [pc, #588]	@ (8000a2c <main+0x864>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
          length = strlen((char *)cop_rx_data);
 80007e4:	4892      	ldr	r0, [pc, #584]	@ (8000a30 <main+0x868>)
 80007e6:	f7ff fcb1 	bl	800014c <strlen>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b91      	ldr	r3, [pc, #580]	@ (8000a34 <main+0x86c>)
 80007f0:	701a      	strb	r2, [r3, #0]
          VALUE_Voltage = stringToNumber((char *)cop_rx_data);
 80007f2:	488f      	ldr	r0, [pc, #572]	@ (8000a30 <main+0x868>)
 80007f4:	f7ff fcdc 	bl	80001b0 <stringToNumber>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4a8f      	ldr	r2, [pc, #572]	@ (8000a38 <main+0x870>)
 80007fc:	6013      	str	r3, [r2, #0]
          memset(rx_data, 0, MAX_BUFFER);
 80007fe:	2214      	movs	r2, #20
 8000800:	2100      	movs	r1, #0
 8000802:	488e      	ldr	r0, [pc, #568]	@ (8000a3c <main+0x874>)
 8000804:	f003 fa9d 	bl	8003d42 <memset>

          Select = CASE7;
 8000808:	4b8d      	ldr	r3, [pc, #564]	@ (8000a40 <main+0x878>)
 800080a:	2207      	movs	r2, #7
 800080c:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 800080e:	4b82      	ldr	r3, [pc, #520]	@ (8000a18 <main+0x850>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000814:	e168      	b.n	8000ae8 <main+0x920>

      case CASE7:
        if (Flag_display == false)
 8000816:	4b80      	ldr	r3, [pc, #512]	@ (8000a18 <main+0x850>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f083 0301 	eor.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d016      	beq.n	8000852 <main+0x68a>
        {
          /* code */
          Flag_display = true;
 8000824:	4b7c      	ldr	r3, [pc, #496]	@ (8000a18 <main+0x850>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
          strcpy(Line1, "Nhap gia tri DONG DIEN (AMPE): \n\r");
 800082a:	4a7c      	ldr	r2, [pc, #496]	@ (8000a1c <main+0x854>)
 800082c:	4b85      	ldr	r3, [pc, #532]	@ (8000a44 <main+0x87c>)
 800082e:	4614      	mov	r4, r2
 8000830:	461d      	mov	r5, r3
 8000832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083a:	682b      	ldr	r3, [r5, #0]
 800083c:	8023      	strh	r3, [r4, #0]

          HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 800083e:	4877      	ldr	r0, [pc, #476]	@ (8000a1c <main+0x854>)
 8000840:	f7ff fc84 	bl	800014c <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	4b76      	ldr	r3, [pc, #472]	@ (8000a24 <main+0x85c>)
 800084a:	4974      	ldr	r1, [pc, #464]	@ (8000a1c <main+0x854>)
 800084c:	4876      	ldr	r0, [pc, #472]	@ (8000a28 <main+0x860>)
 800084e:	f002 f9ce 	bl	8002bee <HAL_UART_Transmit>
        }
        if (Flag_Rx == true)
 8000852:	4b76      	ldr	r3, [pc, #472]	@ (8000a2c <main+0x864>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	f000 8148 	beq.w	8000aec <main+0x924>
        {
          /* code */
          Flag_Rx = false;
 800085c:	4b73      	ldr	r3, [pc, #460]	@ (8000a2c <main+0x864>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
          length = strlen((char *)cop_rx_data);
 8000862:	4873      	ldr	r0, [pc, #460]	@ (8000a30 <main+0x868>)
 8000864:	f7ff fc72 	bl	800014c <strlen>
 8000868:	4603      	mov	r3, r0
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b71      	ldr	r3, [pc, #452]	@ (8000a34 <main+0x86c>)
 800086e:	701a      	strb	r2, [r3, #0]
          VALUE_Current = stringToNumber((char *)cop_rx_data);
 8000870:	486f      	ldr	r0, [pc, #444]	@ (8000a30 <main+0x868>)
 8000872:	f7ff fc9d 	bl	80001b0 <stringToNumber>
 8000876:	4603      	mov	r3, r0
 8000878:	4a73      	ldr	r2, [pc, #460]	@ (8000a48 <main+0x880>)
 800087a:	6013      	str	r3, [r2, #0]
          memset(rx_data, 0, MAX_BUFFER);
 800087c:	2214      	movs	r2, #20
 800087e:	2100      	movs	r1, #0
 8000880:	486e      	ldr	r0, [pc, #440]	@ (8000a3c <main+0x874>)
 8000882:	f003 fa5e 	bl	8003d42 <memset>

          Select = CASE8;
 8000886:	4b6e      	ldr	r3, [pc, #440]	@ (8000a40 <main+0x878>)
 8000888:	2208      	movs	r2, #8
 800088a:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 800088c:	4b62      	ldr	r3, [pc, #392]	@ (8000a18 <main+0x850>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000892:	e12b      	b.n	8000aec <main+0x924>

      case CASE8:
        if (Flag_display == false)
 8000894:	4b60      	ldr	r3, [pc, #384]	@ (8000a18 <main+0x850>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	f083 0301 	eor.w	r3, r3, #1
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d016      	beq.n	80008d0 <main+0x708>
        {
          /* code */
          Flag_display = true;
 80008a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000a18 <main+0x850>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
          strcpy(Line1, "Nhap gia tri CONG SUAT (WAT): \n\r");
 80008a8:	4a5c      	ldr	r2, [pc, #368]	@ (8000a1c <main+0x854>)
 80008aa:	4b68      	ldr	r3, [pc, #416]	@ (8000a4c <main+0x884>)
 80008ac:	4614      	mov	r4, r2
 80008ae:	461d      	mov	r5, r3
 80008b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b8:	682b      	ldr	r3, [r5, #0]
 80008ba:	7023      	strb	r3, [r4, #0]

          HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 80008bc:	4857      	ldr	r0, [pc, #348]	@ (8000a1c <main+0x854>)
 80008be:	f7ff fc45 	bl	800014c <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b57      	ldr	r3, [pc, #348]	@ (8000a24 <main+0x85c>)
 80008c8:	4954      	ldr	r1, [pc, #336]	@ (8000a1c <main+0x854>)
 80008ca:	4857      	ldr	r0, [pc, #348]	@ (8000a28 <main+0x860>)
 80008cc:	f002 f98f 	bl	8002bee <HAL_UART_Transmit>
        }
        if (Flag_Rx == true)
 80008d0:	4b56      	ldr	r3, [pc, #344]	@ (8000a2c <main+0x864>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	f000 810b 	beq.w	8000af0 <main+0x928>
        {
          /* code */
          Flag_Rx = false;
 80008da:	4b54      	ldr	r3, [pc, #336]	@ (8000a2c <main+0x864>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
          length = strlen((char *)cop_rx_data);
 80008e0:	4853      	ldr	r0, [pc, #332]	@ (8000a30 <main+0x868>)
 80008e2:	f7ff fc33 	bl	800014c <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b52      	ldr	r3, [pc, #328]	@ (8000a34 <main+0x86c>)
 80008ec:	701a      	strb	r2, [r3, #0]
          VALUE_Power = stringToNumber((char *)cop_rx_data);
 80008ee:	4850      	ldr	r0, [pc, #320]	@ (8000a30 <main+0x868>)
 80008f0:	f7ff fc5e 	bl	80001b0 <stringToNumber>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4a56      	ldr	r2, [pc, #344]	@ (8000a50 <main+0x888>)
 80008f8:	6013      	str	r3, [r2, #0]
          memset(rx_data, 0, MAX_BUFFER);
 80008fa:	2214      	movs	r2, #20
 80008fc:	2100      	movs	r1, #0
 80008fe:	484f      	ldr	r0, [pc, #316]	@ (8000a3c <main+0x874>)
 8000900:	f003 fa1f 	bl	8003d42 <memset>

          Select = CASE9;
 8000904:	4b4e      	ldr	r3, [pc, #312]	@ (8000a40 <main+0x878>)
 8000906:	2209      	movs	r2, #9
 8000908:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 800090a:	4b43      	ldr	r3, [pc, #268]	@ (8000a18 <main+0x850>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000910:	e0ee      	b.n	8000af0 <main+0x928>

      case CASE9:
        if (Flag_display == false)
 8000912:	4b41      	ldr	r3, [pc, #260]	@ (8000a18 <main+0x850>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	f083 0301 	eor.w	r3, r3, #1
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	d016      	beq.n	800094e <main+0x786>
        {
          /* code */
          Flag_display = true;
 8000920:	4b3d      	ldr	r3, [pc, #244]	@ (8000a18 <main+0x850>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
          strcpy(Line1, "Nhap gia tri CONG SUAT PK (VAR): \n\r");
 8000926:	4a3d      	ldr	r2, [pc, #244]	@ (8000a1c <main+0x854>)
 8000928:	4b4a      	ldr	r3, [pc, #296]	@ (8000a54 <main+0x88c>)
 800092a:	4614      	mov	r4, r2
 800092c:	461d      	mov	r5, r3
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000936:	682b      	ldr	r3, [r5, #0]
 8000938:	6023      	str	r3, [r4, #0]

          HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 800093a:	4838      	ldr	r0, [pc, #224]	@ (8000a1c <main+0x854>)
 800093c:	f7ff fc06 	bl	800014c <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	b29a      	uxth	r2, r3
 8000944:	4b37      	ldr	r3, [pc, #220]	@ (8000a24 <main+0x85c>)
 8000946:	4935      	ldr	r1, [pc, #212]	@ (8000a1c <main+0x854>)
 8000948:	4837      	ldr	r0, [pc, #220]	@ (8000a28 <main+0x860>)
 800094a:	f002 f950 	bl	8002bee <HAL_UART_Transmit>
        }
        if (Flag_Rx == true)
 800094e:	4b37      	ldr	r3, [pc, #220]	@ (8000a2c <main+0x864>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	f000 80ce 	beq.w	8000af4 <main+0x92c>
        {
          /* code */
          Flag_Rx = false;
 8000958:	4b34      	ldr	r3, [pc, #208]	@ (8000a2c <main+0x864>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
          length = strlen((char *)cop_rx_data);
 800095e:	4834      	ldr	r0, [pc, #208]	@ (8000a30 <main+0x868>)
 8000960:	f7ff fbf4 	bl	800014c <strlen>
 8000964:	4603      	mov	r3, r0
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b32      	ldr	r3, [pc, #200]	@ (8000a34 <main+0x86c>)
 800096a:	701a      	strb	r2, [r3, #0]
          VALUE_Reactive = stringToNumber((char *)cop_rx_data);
 800096c:	4830      	ldr	r0, [pc, #192]	@ (8000a30 <main+0x868>)
 800096e:	f7ff fc1f 	bl	80001b0 <stringToNumber>
 8000972:	4603      	mov	r3, r0
 8000974:	4a38      	ldr	r2, [pc, #224]	@ (8000a58 <main+0x890>)
 8000976:	6013      	str	r3, [r2, #0]
          memset(rx_data, 0, MAX_BUFFER);
 8000978:	2214      	movs	r2, #20
 800097a:	2100      	movs	r1, #0
 800097c:	482f      	ldr	r0, [pc, #188]	@ (8000a3c <main+0x874>)
 800097e:	f003 f9e0 	bl	8003d42 <memset>

          Select = CASE10;
 8000982:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <main+0x878>)
 8000984:	220a      	movs	r2, #10
 8000986:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 8000988:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <main+0x850>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800098e:	e0b1      	b.n	8000af4 <main+0x92c>

      case CASE10:
        if (Flag_display == false)
 8000990:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <main+0x850>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	f083 0301 	eor.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d01a      	beq.n	80009d4 <main+0x80c>
        {
          /* code */
          Flag_display = true;
 800099e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <main+0x850>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
          strcpy(Line1, "Nhap gia tri CONG SUAT TP (VA): \n\r");
 80009a4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a1c <main+0x854>)
 80009a6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <main+0x894>)
 80009a8:	4614      	mov	r4, r2
 80009aa:	461d      	mov	r5, r3
 80009ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	8022      	strh	r2, [r4, #0]
 80009ba:	3402      	adds	r4, #2
 80009bc:	0c1b      	lsrs	r3, r3, #16
 80009be:	7023      	strb	r3, [r4, #0]

          HAL_UART_Transmit(&huart2, (uint8_t *)Line1, strlen(Line1), Max_Timeout);
 80009c0:	4816      	ldr	r0, [pc, #88]	@ (8000a1c <main+0x854>)
 80009c2:	f7ff fbc3 	bl	800014c <strlen>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <main+0x85c>)
 80009cc:	4913      	ldr	r1, [pc, #76]	@ (8000a1c <main+0x854>)
 80009ce:	4816      	ldr	r0, [pc, #88]	@ (8000a28 <main+0x860>)
 80009d0:	f002 f90d 	bl	8002bee <HAL_UART_Transmit>
        }
        if (Flag_Rx == true)
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <main+0x864>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 808d 	beq.w	8000af8 <main+0x930>
        {
          /* code */
          Flag_Rx = false;
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <main+0x864>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
          length = strlen((char *)cop_rx_data);
 80009e4:	4812      	ldr	r0, [pc, #72]	@ (8000a30 <main+0x868>)
 80009e6:	f7ff fbb1 	bl	800014c <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <main+0x86c>)
 80009f0:	701a      	strb	r2, [r3, #0]
          VALUE_Apparent = stringToNumber((char *)cop_rx_data);
 80009f2:	480f      	ldr	r0, [pc, #60]	@ (8000a30 <main+0x868>)
 80009f4:	f7ff fbdc 	bl	80001b0 <stringToNumber>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a19      	ldr	r2, [pc, #100]	@ (8000a60 <main+0x898>)
 80009fc:	6013      	str	r3, [r2, #0]
          memset(rx_data, 0, MAX_BUFFER);
 80009fe:	2214      	movs	r2, #20
 8000a00:	2100      	movs	r1, #0
 8000a02:	480e      	ldr	r0, [pc, #56]	@ (8000a3c <main+0x874>)
 8000a04:	f003 f99d 	bl	8003d42 <memset>

          Select = CASE11;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <main+0x878>)
 8000a0a:	220b      	movs	r2, #11
 8000a0c:	701a      	strb	r2, [r3, #0]
          Flag_display = false;
 8000a0e:	4b02      	ldr	r3, [pc, #8]	@ (8000a18 <main+0x850>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000a14:	e070      	b.n	8000af8 <main+0x930>
 8000a16:	bf00      	nop
 8000a18:	20000087 	.word	0x20000087
 8000a1c:	20000088 	.word	0x20000088
 8000a20:	08004b48 	.word	0x08004b48
 8000a24:	000f4240 	.word	0x000f4240
 8000a28:	20000188 	.word	0x20000188
 8000a2c:	20000086 	.word	0x20000086
 8000a30:	200000e4 	.word	0x200000e4
 8000a34:	200000f8 	.word	0x200000f8
 8000a38:	20000114 	.word	0x20000114
 8000a3c:	200000d0 	.word	0x200000d0
 8000a40:	20000085 	.word	0x20000085
 8000a44:	08004b68 	.word	0x08004b68
 8000a48:	20000110 	.word	0x20000110
 8000a4c:	08004b8c 	.word	0x08004b8c
 8000a50:	20000118 	.word	0x20000118
 8000a54:	08004bb0 	.word	0x08004bb0
 8000a58:	2000011c 	.word	0x2000011c
 8000a5c:	08004bd4 	.word	0x08004bd4
 8000a60:	20000120 	.word	0x20000120

      case CASE11:
        if (Flag_display == false)
 8000a64:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <main+0x938>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	f083 0301 	eor.w	r3, r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d044      	beq.n	8000afc <main+0x934>
        {
          /* code */
          printf("\n\rDa nhap DIEN AP (ADC-VALUE)      : %ld - %ld", ADC_Voltage, VALUE_Voltage);
 8000a72:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <main+0x93c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a24      	ldr	r2, [pc, #144]	@ (8000b08 <main+0x940>)
 8000a78:	6812      	ldr	r2, [r2, #0]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4823      	ldr	r0, [pc, #140]	@ (8000b0c <main+0x944>)
 8000a7e:	f003 f90b 	bl	8003c98 <iprintf>

          printf("\n\rDa nhap DONG DIEN (ADC-VALUE)    : %ld - %ld", ADC_Current, VALUE_Current);
 8000a82:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <main+0x948>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a23      	ldr	r2, [pc, #140]	@ (8000b14 <main+0x94c>)
 8000a88:	6812      	ldr	r2, [r2, #0]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4822      	ldr	r0, [pc, #136]	@ (8000b18 <main+0x950>)
 8000a8e:	f003 f903 	bl	8003c98 <iprintf>

          printf("\n\rDa nhap CONG SUAT (ADC-VALUE)    : %ld - %ld", ADC_Power, VALUE_Power);
 8000a92:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <main+0x954>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <main+0x958>)
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4821      	ldr	r0, [pc, #132]	@ (8000b24 <main+0x95c>)
 8000a9e:	f003 f8fb 	bl	8003c98 <iprintf>

          printf("\n\rDa nhap CONG SUAT PK (ADC-VALUE) : %ld - %ld", ADC_Reactive, VALUE_Reactive);
 8000aa2:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <main+0x960>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a21      	ldr	r2, [pc, #132]	@ (8000b2c <main+0x964>)
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4820      	ldr	r0, [pc, #128]	@ (8000b30 <main+0x968>)
 8000aae:	f003 f8f3 	bl	8003c98 <iprintf>

          printf("\n\rDa nhap CONG SUAT TP (ADC-VALUE) : %ld - %ld", ADC_Apparent, VALUE_Apparent);
 8000ab2:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <main+0x96c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a20      	ldr	r2, [pc, #128]	@ (8000b38 <main+0x970>)
 8000ab8:	6812      	ldr	r2, [r2, #0]
 8000aba:	4619      	mov	r1, r3
 8000abc:	481f      	ldr	r0, [pc, #124]	@ (8000b3c <main+0x974>)
 8000abe:	f003 f8eb 	bl	8003c98 <iprintf>

          Select = CASE1;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <main+0x978>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
          Next_page = CASE1;
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <main+0x97c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
        }

        break;
 8000ace:	e015      	b.n	8000afc <main+0x934>

      default:
        break;
 8000ad0:	bf00      	nop
 8000ad2:	e207      	b.n	8000ee4 <main+0xd1c>
        break;
 8000ad4:	bf00      	nop
 8000ad6:	e205      	b.n	8000ee4 <main+0xd1c>
        break;
 8000ad8:	bf00      	nop
 8000ada:	e203      	b.n	8000ee4 <main+0xd1c>
        break;
 8000adc:	bf00      	nop
 8000ade:	e201      	b.n	8000ee4 <main+0xd1c>
        break;
 8000ae0:	bf00      	nop
 8000ae2:	e1ff      	b.n	8000ee4 <main+0xd1c>
        break;
 8000ae4:	bf00      	nop
 8000ae6:	e1fd      	b.n	8000ee4 <main+0xd1c>
        break;
 8000ae8:	bf00      	nop
 8000aea:	e1fb      	b.n	8000ee4 <main+0xd1c>
        break;
 8000aec:	bf00      	nop
 8000aee:	e1f9      	b.n	8000ee4 <main+0xd1c>
        break;
 8000af0:	bf00      	nop
 8000af2:	e1f7      	b.n	8000ee4 <main+0xd1c>
        break;
 8000af4:	bf00      	nop
 8000af6:	e1f5      	b.n	8000ee4 <main+0xd1c>
        break;
 8000af8:	bf00      	nop
 8000afa:	e1f3      	b.n	8000ee4 <main+0xd1c>
        break;
 8000afc:	bf00      	nop
      }

      break;
 8000afe:	e1f1      	b.n	8000ee4 <main+0xd1c>
 8000b00:	20000087 	.word	0x20000087
 8000b04:	20000100 	.word	0x20000100
 8000b08:	20000114 	.word	0x20000114
 8000b0c:	08004bf8 	.word	0x08004bf8
 8000b10:	200000fc 	.word	0x200000fc
 8000b14:	20000110 	.word	0x20000110
 8000b18:	08004c28 	.word	0x08004c28
 8000b1c:	20000104 	.word	0x20000104
 8000b20:	20000118 	.word	0x20000118
 8000b24:	08004c58 	.word	0x08004c58
 8000b28:	20000108 	.word	0x20000108
 8000b2c:	2000011c 	.word	0x2000011c
 8000b30:	08004c88 	.word	0x08004c88
 8000b34:	2000010c 	.word	0x2000010c
 8000b38:	20000120 	.word	0x20000120
 8000b3c:	08004cb8 	.word	0x08004cb8
 8000b40:	20000085 	.word	0x20000085
 8000b44:	20000084 	.word	0x20000084

    case CASE3:
      printf("\n\r");
 8000b48:	48ad      	ldr	r0, [pc, #692]	@ (8000e00 <main+0xc38>)
 8000b4a:	f003 f8a5 	bl	8003c98 <iprintf>
      printf("Gia Tri DONG DIEN Phase A  : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, AIRMS, 3) * 100) / ADC_Current) * (uint16_t)VALUE_Current);
 8000b4e:	2203      	movs	r2, #3
 8000b50:	210a      	movs	r1, #10
 8000b52:	48ac      	ldr	r0, [pc, #688]	@ (8000e04 <main+0xc3c>)
 8000b54:	f002 ff07 	bl	8003966 <ADE7758_Read>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2264      	movs	r2, #100	@ 0x64
 8000b5c:	fb03 f202 	mul.w	r2, r3, r2
 8000b60:	4ba9      	ldr	r3, [pc, #676]	@ (8000e08 <main+0xc40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b68:	4aa8      	ldr	r2, [pc, #672]	@ (8000e0c <main+0xc44>)
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	b292      	uxth	r2, r2
 8000b6e:	fb02 f303 	mul.w	r3, r2, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	48a6      	ldr	r0, [pc, #664]	@ (8000e10 <main+0xc48>)
 8000b76:	f003 f88f 	bl	8003c98 <iprintf>
      printf("Gia Tri DIEN AP Phase A    : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, AVRMS, 3) * 100) / ADC_Voltage) * (uint16_t)VALUE_Voltage);
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	210d      	movs	r1, #13
 8000b7e:	48a1      	ldr	r0, [pc, #644]	@ (8000e04 <main+0xc3c>)
 8000b80:	f002 fef1 	bl	8003966 <ADE7758_Read>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2264      	movs	r2, #100	@ 0x64
 8000b88:	fb03 f202 	mul.w	r2, r3, r2
 8000b8c:	4ba1      	ldr	r3, [pc, #644]	@ (8000e14 <main+0xc4c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b94:	4aa0      	ldr	r2, [pc, #640]	@ (8000e18 <main+0xc50>)
 8000b96:	6812      	ldr	r2, [r2, #0]
 8000b98:	b292      	uxth	r2, r2
 8000b9a:	fb02 f303 	mul.w	r3, r2, r3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	489e      	ldr	r0, [pc, #632]	@ (8000e1c <main+0xc54>)
 8000ba2:	f003 f879 	bl	8003c98 <iprintf>
      printf("Gia Tri CONG SUAT Phase A  : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, AWATTHR, 2) * 100) / ADC_Power) * (uint16_t)VALUE_Power);
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4896      	ldr	r0, [pc, #600]	@ (8000e04 <main+0xc3c>)
 8000bac:	f002 fedb 	bl	8003966 <ADE7758_Read>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2264      	movs	r2, #100	@ 0x64
 8000bb4:	fb03 f202 	mul.w	r2, r3, r2
 8000bb8:	4b99      	ldr	r3, [pc, #612]	@ (8000e20 <main+0xc58>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bc0:	4a98      	ldr	r2, [pc, #608]	@ (8000e24 <main+0xc5c>)
 8000bc2:	6812      	ldr	r2, [r2, #0]
 8000bc4:	b292      	uxth	r2, r2
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4896      	ldr	r0, [pc, #600]	@ (8000e28 <main+0xc60>)
 8000bce:	f003 f863 	bl	8003c98 <iprintf>
      printf("Gia Tri CONG SUAT Phan Khang Phase A : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, AVARHR, 2) * 100) / ADC_Reactive) * (uint16_t)VALUE_Reactive);
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	488b      	ldr	r0, [pc, #556]	@ (8000e04 <main+0xc3c>)
 8000bd8:	f002 fec5 	bl	8003966 <ADE7758_Read>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2264      	movs	r2, #100	@ 0x64
 8000be0:	fb03 f202 	mul.w	r2, r3, r2
 8000be4:	4b91      	ldr	r3, [pc, #580]	@ (8000e2c <main+0xc64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bec:	4a90      	ldr	r2, [pc, #576]	@ (8000e30 <main+0xc68>)
 8000bee:	6812      	ldr	r2, [r2, #0]
 8000bf0:	b292      	uxth	r2, r2
 8000bf2:	fb02 f303 	mul.w	r3, r2, r3
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	488e      	ldr	r0, [pc, #568]	@ (8000e34 <main+0xc6c>)
 8000bfa:	f003 f84d 	bl	8003c98 <iprintf>
      printf("Gia Tri CONG SUAT Toan Phan Phase A  : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, AVAHR, 2) * 100) / ADC_Apparent) * (uint16_t)VALUE_Apparent);
 8000bfe:	2202      	movs	r2, #2
 8000c00:	2107      	movs	r1, #7
 8000c02:	4880      	ldr	r0, [pc, #512]	@ (8000e04 <main+0xc3c>)
 8000c04:	f002 feaf 	bl	8003966 <ADE7758_Read>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2264      	movs	r2, #100	@ 0x64
 8000c0c:	fb03 f202 	mul.w	r2, r3, r2
 8000c10:	4b89      	ldr	r3, [pc, #548]	@ (8000e38 <main+0xc70>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c18:	4a88      	ldr	r2, [pc, #544]	@ (8000e3c <main+0xc74>)
 8000c1a:	6812      	ldr	r2, [r2, #0]
 8000c1c:	b292      	uxth	r2, r2
 8000c1e:	fb02 f303 	mul.w	r3, r2, r3
 8000c22:	4619      	mov	r1, r3
 8000c24:	4886      	ldr	r0, [pc, #536]	@ (8000e40 <main+0xc78>)
 8000c26:	f003 f837 	bl	8003c98 <iprintf>

      printf("Gia Tri DONG DIEN Phase B  : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, BIRMS, 3) * 100) / ADC_Current) * (uint16_t)VALUE_Current);
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	210b      	movs	r1, #11
 8000c2e:	4875      	ldr	r0, [pc, #468]	@ (8000e04 <main+0xc3c>)
 8000c30:	f002 fe99 	bl	8003966 <ADE7758_Read>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2264      	movs	r2, #100	@ 0x64
 8000c38:	fb03 f202 	mul.w	r2, r3, r2
 8000c3c:	4b72      	ldr	r3, [pc, #456]	@ (8000e08 <main+0xc40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c44:	4a71      	ldr	r2, [pc, #452]	@ (8000e0c <main+0xc44>)
 8000c46:	6812      	ldr	r2, [r2, #0]
 8000c48:	b292      	uxth	r2, r2
 8000c4a:	fb02 f303 	mul.w	r3, r2, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	487c      	ldr	r0, [pc, #496]	@ (8000e44 <main+0xc7c>)
 8000c52:	f003 f821 	bl	8003c98 <iprintf>
      printf("Gia Tri DIEN AP Phase B    : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, BVRMS, 3) * 100) / ADC_Voltage) * (uint16_t)VALUE_Voltage);
 8000c56:	2203      	movs	r2, #3
 8000c58:	210e      	movs	r1, #14
 8000c5a:	486a      	ldr	r0, [pc, #424]	@ (8000e04 <main+0xc3c>)
 8000c5c:	f002 fe83 	bl	8003966 <ADE7758_Read>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2264      	movs	r2, #100	@ 0x64
 8000c64:	fb03 f202 	mul.w	r2, r3, r2
 8000c68:	4b6a      	ldr	r3, [pc, #424]	@ (8000e14 <main+0xc4c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c70:	4a69      	ldr	r2, [pc, #420]	@ (8000e18 <main+0xc50>)
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	b292      	uxth	r2, r2
 8000c76:	fb02 f303 	mul.w	r3, r2, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4872      	ldr	r0, [pc, #456]	@ (8000e48 <main+0xc80>)
 8000c7e:	f003 f80b 	bl	8003c98 <iprintf>
      printf("Gia Tri CONG SUAT Phase B  : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, BWATTHR, 2) * 100) / ADC_Power) * (uint16_t)VALUE_Power);
 8000c82:	2202      	movs	r2, #2
 8000c84:	2102      	movs	r1, #2
 8000c86:	485f      	ldr	r0, [pc, #380]	@ (8000e04 <main+0xc3c>)
 8000c88:	f002 fe6d 	bl	8003966 <ADE7758_Read>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2264      	movs	r2, #100	@ 0x64
 8000c90:	fb03 f202 	mul.w	r2, r3, r2
 8000c94:	4b62      	ldr	r3, [pc, #392]	@ (8000e20 <main+0xc58>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c9c:	4a61      	ldr	r2, [pc, #388]	@ (8000e24 <main+0xc5c>)
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	b292      	uxth	r2, r2
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4868      	ldr	r0, [pc, #416]	@ (8000e4c <main+0xc84>)
 8000caa:	f002 fff5 	bl	8003c98 <iprintf>
      printf("Gia Tri CONG SUAT Phan Khang Phase B : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, BVARHR, 2) * 100) / ADC_Reactive) * (uint16_t)VALUE_Reactive);
 8000cae:	2202      	movs	r2, #2
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	4854      	ldr	r0, [pc, #336]	@ (8000e04 <main+0xc3c>)
 8000cb4:	f002 fe57 	bl	8003966 <ADE7758_Read>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2264      	movs	r2, #100	@ 0x64
 8000cbc:	fb03 f202 	mul.w	r2, r3, r2
 8000cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8000e2c <main+0xc64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc8:	4a59      	ldr	r2, [pc, #356]	@ (8000e30 <main+0xc68>)
 8000cca:	6812      	ldr	r2, [r2, #0]
 8000ccc:	b292      	uxth	r2, r2
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	485e      	ldr	r0, [pc, #376]	@ (8000e50 <main+0xc88>)
 8000cd6:	f002 ffdf 	bl	8003c98 <iprintf>
      printf("Gia Tri CONG SUAT Toan Phan Phase B  : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, BVAHR, 2) * 100) / ADC_Apparent) * (uint16_t)VALUE_Apparent);
 8000cda:	2202      	movs	r2, #2
 8000cdc:	2108      	movs	r1, #8
 8000cde:	4849      	ldr	r0, [pc, #292]	@ (8000e04 <main+0xc3c>)
 8000ce0:	f002 fe41 	bl	8003966 <ADE7758_Read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2264      	movs	r2, #100	@ 0x64
 8000ce8:	fb03 f202 	mul.w	r2, r3, r2
 8000cec:	4b52      	ldr	r3, [pc, #328]	@ (8000e38 <main+0xc70>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cf4:	4a51      	ldr	r2, [pc, #324]	@ (8000e3c <main+0xc74>)
 8000cf6:	6812      	ldr	r2, [r2, #0]
 8000cf8:	b292      	uxth	r2, r2
 8000cfa:	fb02 f303 	mul.w	r3, r2, r3
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4854      	ldr	r0, [pc, #336]	@ (8000e54 <main+0xc8c>)
 8000d02:	f002 ffc9 	bl	8003c98 <iprintf>

      printf("Gia Tri DONG DIEN Phase C  : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, CIRMS, 3) * 100) / ADC_Current) * (uint16_t)VALUE_Current);
 8000d06:	2203      	movs	r2, #3
 8000d08:	210c      	movs	r1, #12
 8000d0a:	483e      	ldr	r0, [pc, #248]	@ (8000e04 <main+0xc3c>)
 8000d0c:	f002 fe2b 	bl	8003966 <ADE7758_Read>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2264      	movs	r2, #100	@ 0x64
 8000d14:	fb03 f202 	mul.w	r2, r3, r2
 8000d18:	4b3b      	ldr	r3, [pc, #236]	@ (8000e08 <main+0xc40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d20:	4a3a      	ldr	r2, [pc, #232]	@ (8000e0c <main+0xc44>)
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	b292      	uxth	r2, r2
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	484a      	ldr	r0, [pc, #296]	@ (8000e58 <main+0xc90>)
 8000d2e:	f002 ffb3 	bl	8003c98 <iprintf>
      printf("Gia Tri DIEN AP Phase C    : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, CVRMS, 3) * 100) / ADC_Voltage) * (uint16_t)VALUE_Voltage);
 8000d32:	2203      	movs	r2, #3
 8000d34:	210f      	movs	r1, #15
 8000d36:	4833      	ldr	r0, [pc, #204]	@ (8000e04 <main+0xc3c>)
 8000d38:	f002 fe15 	bl	8003966 <ADE7758_Read>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2264      	movs	r2, #100	@ 0x64
 8000d40:	fb03 f202 	mul.w	r2, r3, r2
 8000d44:	4b33      	ldr	r3, [pc, #204]	@ (8000e14 <main+0xc4c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d4c:	4a32      	ldr	r2, [pc, #200]	@ (8000e18 <main+0xc50>)
 8000d4e:	6812      	ldr	r2, [r2, #0]
 8000d50:	b292      	uxth	r2, r2
 8000d52:	fb02 f303 	mul.w	r3, r2, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	4840      	ldr	r0, [pc, #256]	@ (8000e5c <main+0xc94>)
 8000d5a:	f002 ff9d 	bl	8003c98 <iprintf>
      printf("Gia Tri CONG SUAT Phase C  : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, CWATTHR, 2) * 100) / ADC_Power) * (uint16_t)VALUE_Power);
 8000d5e:	2202      	movs	r2, #2
 8000d60:	2103      	movs	r1, #3
 8000d62:	4828      	ldr	r0, [pc, #160]	@ (8000e04 <main+0xc3c>)
 8000d64:	f002 fdff 	bl	8003966 <ADE7758_Read>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2264      	movs	r2, #100	@ 0x64
 8000d6c:	fb03 f202 	mul.w	r2, r3, r2
 8000d70:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <main+0xc58>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d78:	4a2a      	ldr	r2, [pc, #168]	@ (8000e24 <main+0xc5c>)
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	b292      	uxth	r2, r2
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	4619      	mov	r1, r3
 8000d84:	4836      	ldr	r0, [pc, #216]	@ (8000e60 <main+0xc98>)
 8000d86:	f002 ff87 	bl	8003c98 <iprintf>
      printf("Gia Tri CONG SUAT Phan Khang Phase C : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, CVARHR, 2) * 100) / ADC_Reactive) * (uint16_t)VALUE_Reactive);
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	2106      	movs	r1, #6
 8000d8e:	481d      	ldr	r0, [pc, #116]	@ (8000e04 <main+0xc3c>)
 8000d90:	f002 fde9 	bl	8003966 <ADE7758_Read>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2264      	movs	r2, #100	@ 0x64
 8000d98:	fb03 f202 	mul.w	r2, r3, r2
 8000d9c:	4b23      	ldr	r3, [pc, #140]	@ (8000e2c <main+0xc64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000da4:	4a22      	ldr	r2, [pc, #136]	@ (8000e30 <main+0xc68>)
 8000da6:	6812      	ldr	r2, [r2, #0]
 8000da8:	b292      	uxth	r2, r2
 8000daa:	fb02 f303 	mul.w	r3, r2, r3
 8000dae:	4619      	mov	r1, r3
 8000db0:	482c      	ldr	r0, [pc, #176]	@ (8000e64 <main+0xc9c>)
 8000db2:	f002 ff71 	bl	8003c98 <iprintf>
      printf("Gia Tri CONG SUAT Toan Phan Phase C  : %ld \n\r", (((int32_t)ADE7758_Read(&ade7758_1, CVAHR, 2) * 100) / ADC_Apparent) * (uint16_t)VALUE_Apparent);
 8000db6:	2202      	movs	r2, #2
 8000db8:	2109      	movs	r1, #9
 8000dba:	4812      	ldr	r0, [pc, #72]	@ (8000e04 <main+0xc3c>)
 8000dbc:	f002 fdd3 	bl	8003966 <ADE7758_Read>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2264      	movs	r2, #100	@ 0x64
 8000dc4:	fb03 f202 	mul.w	r2, r3, r2
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <main+0xc70>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e3c <main+0xc74>)
 8000dd2:	6812      	ldr	r2, [r2, #0]
 8000dd4:	b292      	uxth	r2, r2
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4822      	ldr	r0, [pc, #136]	@ (8000e68 <main+0xca0>)
 8000dde:	f002 ff5b 	bl	8003c98 <iprintf>

      printf("Gia Tri TAN SO      : %ld \n\r", (int32_t)ADE7758_Read(&ade7758_1, FREQ, 2));
 8000de2:	2202      	movs	r2, #2
 8000de4:	2110      	movs	r1, #16
 8000de6:	4807      	ldr	r0, [pc, #28]	@ (8000e04 <main+0xc3c>)
 8000de8:	f002 fdbd 	bl	8003966 <ADE7758_Read>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4619      	mov	r1, r3
 8000df0:	481e      	ldr	r0, [pc, #120]	@ (8000e6c <main+0xca4>)
 8000df2:	f002 ff51 	bl	8003c98 <iprintf>
      // printf("Gia Tri thanh ghi STATUS     : %ld \n\r", (int32_t)ADE7758_Read(&ade7758_1, STATUS, 3));
      // printf("Gia Tri thanh ghi RESTATUS   : %ld \n\r", (int32_t)ADE7758_Read(&ade7758_1, RSTATUS, 3));
      Next_page = CASE1;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e70 <main+0xca8>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]

      break;
 8000dfc:	e072      	b.n	8000ee4 <main+0xd1c>
 8000dfe:	bf00      	nop
 8000e00:	08004ce8 	.word	0x08004ce8
 8000e04:	200001d0 	.word	0x200001d0
 8000e08:	200000fc 	.word	0x200000fc
 8000e0c:	20000110 	.word	0x20000110
 8000e10:	08004cec 	.word	0x08004cec
 8000e14:	20000100 	.word	0x20000100
 8000e18:	20000114 	.word	0x20000114
 8000e1c:	08004d10 	.word	0x08004d10
 8000e20:	20000104 	.word	0x20000104
 8000e24:	20000118 	.word	0x20000118
 8000e28:	08004d34 	.word	0x08004d34
 8000e2c:	20000108 	.word	0x20000108
 8000e30:	2000011c 	.word	0x2000011c
 8000e34:	08004d58 	.word	0x08004d58
 8000e38:	2000010c 	.word	0x2000010c
 8000e3c:	20000120 	.word	0x20000120
 8000e40:	08004d88 	.word	0x08004d88
 8000e44:	08004db8 	.word	0x08004db8
 8000e48:	08004ddc 	.word	0x08004ddc
 8000e4c:	08004e00 	.word	0x08004e00
 8000e50:	08004e24 	.word	0x08004e24
 8000e54:	08004e54 	.word	0x08004e54
 8000e58:	08004e84 	.word	0x08004e84
 8000e5c:	08004ea8 	.word	0x08004ea8
 8000e60:	08004ecc 	.word	0x08004ecc
 8000e64:	08004ef0 	.word	0x08004ef0
 8000e68:	08004f20 	.word	0x08004f20
 8000e6c:	08004f50 	.word	0x08004f50
 8000e70:	20000084 	.word	0x20000084

    case CASE4:
      if (Flag_display == false)
 8000e74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <main+0xd28>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f083 0301 	eor.w	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d02f      	beq.n	8000ee2 <main+0xd1a>
      {
        /* code */
        printf("\n\rDa nhap DIEN AP (ADC-VALUE)      : %ld - %ld", ADC_Voltage, VALUE_Voltage);
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <main+0xd2c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef8 <main+0xd30>)
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481b      	ldr	r0, [pc, #108]	@ (8000efc <main+0xd34>)
 8000e8e:	f002 ff03 	bl	8003c98 <iprintf>

        printf("\n\rDa nhap DONG DIEN (ADC-VALUE)    : %ld - %ld", ADC_Current, VALUE_Current);
 8000e92:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <main+0xd38>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a1b      	ldr	r2, [pc, #108]	@ (8000f04 <main+0xd3c>)
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481a      	ldr	r0, [pc, #104]	@ (8000f08 <main+0xd40>)
 8000e9e:	f002 fefb 	bl	8003c98 <iprintf>

        printf("\n\rDa nhap CONG SUAT (ADC-VALUE)    : %ld - %ld", ADC_Power, VALUE_Power);
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <main+0xd44>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8000f10 <main+0xd48>)
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4819      	ldr	r0, [pc, #100]	@ (8000f14 <main+0xd4c>)
 8000eae:	f002 fef3 	bl	8003c98 <iprintf>

        printf("\n\rDa nhap CONG SUAT PK (ADC-VALUE) : %ld - %ld", ADC_Reactive, VALUE_Reactive);
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <main+0xd50>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a19      	ldr	r2, [pc, #100]	@ (8000f1c <main+0xd54>)
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4818      	ldr	r0, [pc, #96]	@ (8000f20 <main+0xd58>)
 8000ebe:	f002 feeb 	bl	8003c98 <iprintf>

        printf("\n\rDa nhap CONG SUAT TP (ADC-VALUE) : %ld - %ld", ADC_Apparent, VALUE_Apparent);
 8000ec2:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <main+0xd5c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a18      	ldr	r2, [pc, #96]	@ (8000f28 <main+0xd60>)
 8000ec8:	6812      	ldr	r2, [r2, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4817      	ldr	r0, [pc, #92]	@ (8000f2c <main+0xd64>)
 8000ece:	f002 fee3 	bl	8003c98 <iprintf>

        Next_page = CASE1;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <main+0xd68>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000ed8:	e003      	b.n	8000ee2 <main+0xd1a>

    default:
      break;
 8000eda:	bf00      	nop
 8000edc:	e002      	b.n	8000ee4 <main+0xd1c>
      break;
 8000ede:	bf00      	nop
 8000ee0:	e000      	b.n	8000ee4 <main+0xd1c>
      break;
 8000ee2:	bf00      	nop
    }
    HAL_IWDG_Refresh(&hiwdg);
 8000ee4:	4813      	ldr	r0, [pc, #76]	@ (8000f34 <main+0xd6c>)
 8000ee6:	f000 ff2b 	bl	8001d40 <HAL_IWDG_Refresh>
    switch (Next_page)
 8000eea:	f7ff b9bf 	b.w	800026c <main+0xa4>
 8000eee:	bf00      	nop
 8000ef0:	20000087 	.word	0x20000087
 8000ef4:	20000100 	.word	0x20000100
 8000ef8:	20000114 	.word	0x20000114
 8000efc:	08004bf8 	.word	0x08004bf8
 8000f00:	200000fc 	.word	0x200000fc
 8000f04:	20000110 	.word	0x20000110
 8000f08:	08004c28 	.word	0x08004c28
 8000f0c:	20000104 	.word	0x20000104
 8000f10:	20000118 	.word	0x20000118
 8000f14:	08004c58 	.word	0x08004c58
 8000f18:	20000108 	.word	0x20000108
 8000f1c:	2000011c 	.word	0x2000011c
 8000f20:	08004c88 	.word	0x08004c88
 8000f24:	2000010c 	.word	0x2000010c
 8000f28:	20000120 	.word	0x20000120
 8000f2c:	08004cb8 	.word	0x08004cb8
 8000f30:	20000084 	.word	0x20000084
 8000f34:	20000124 	.word	0x20000124

08000f38 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b090      	sub	sp, #64	@ 0x40
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	2228      	movs	r2, #40	@ 0x28
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fefb 	bl	8003d42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f62:	2310      	movs	r3, #16
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f66:	2301      	movs	r3, #1
 8000f68:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fef4 	bl	8001d60 <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000f7e:	f000 f8e3 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f82:	230f      	movs	r3, #15
 8000f84:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 f962 	bl	8002264 <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fa6:	f000 f8cf 	bl	8001148 <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3740      	adds	r7, #64	@ 0x40
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <MX_IWDG_Init>:
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_IWDG_Init+0x2c>)
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <MX_IWDG_Init+0x30>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_IWDG_Init+0x2c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_IWDG_Init+0x2c>)
 8000fc6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000fca:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <MX_IWDG_Init+0x2c>)
 8000fce:	f000 fe73 	bl	8001cb8 <HAL_IWDG_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000fd8:	f000 f8b6 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000124 	.word	0x20000124
 8000fe4:	40003000 	.word	0x40003000

08000fe8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_SPI1_Init+0x64>)
 8000fee:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <MX_SPI1_Init+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	@ (800104c <MX_SPI1_Init+0x64>)
 8000ff4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ff8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_SPI1_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_SPI1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_SPI1_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_SPI1_Init+0x64>)
 800100e:	2201      	movs	r2, #1
 8001010:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <MX_SPI1_Init+0x64>)
 8001014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001018:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_SPI1_Init+0x64>)
 800101c:	2228      	movs	r2, #40	@ 0x28
 800101e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <MX_SPI1_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_SPI1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MX_SPI1_Init+0x64>)
 8001034:	220a      	movs	r2, #10
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <MX_SPI1_Init+0x64>)
 800103a:	f001 faa1 	bl	8002580 <HAL_SPI_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001044:	f000 f880 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000130 	.word	0x20000130
 8001050:	40013000 	.word	0x40013000

08001054 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_USART2_UART_Init+0x4c>)
 800105a:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <MX_USART2_UART_Init+0x50>)
 800105c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <MX_USART2_UART_Init+0x4c>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <MX_USART2_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <MX_USART2_UART_Init+0x4c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <MX_USART2_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_USART2_UART_Init+0x4c>)
 800108c:	f001 fd5f 	bl	8002b4e <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001096:	f000 f857 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000188 	.word	0x20000188
 80010a4:	40004400 	.word	0x40004400

080010a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b17      	ldr	r3, [pc, #92]	@ (800111c <MX_GPIO_Init+0x74>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a16      	ldr	r2, [pc, #88]	@ (800111c <MX_GPIO_Init+0x74>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_GPIO_Init+0x74>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_GPIO_Init+0x74>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a10      	ldr	r2, [pc, #64]	@ (800111c <MX_GPIO_Init+0x74>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <MX_GPIO_Init+0x74>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2101      	movs	r1, #1
 80010f0:	480b      	ldr	r0, [pc, #44]	@ (8001120 <MX_GPIO_Init+0x78>)
 80010f2:	f000 fdc9 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010fa:	2311      	movs	r3, #17
 80010fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2302      	movs	r3, #2
 8001104:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4619      	mov	r1, r3
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <MX_GPIO_Init+0x78>)
 800110e:	f000 fc37 	bl	8001980 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	40010c00 	.word	0x40010c00

08001124 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 800112c:	1d39      	adds	r1, r7, #4
 800112e:	2364      	movs	r3, #100	@ 0x64
 8001130:	2201      	movs	r2, #1
 8001132:	4804      	ldr	r0, [pc, #16]	@ (8001144 <__io_putchar+0x20>)
 8001134:	f001 fd5b 	bl	8002bee <HAL_UART_Transmit>

  return ch;
 8001138:	687b      	ldr	r3, [r7, #4]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000188 	.word	0x20000188

08001148 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <Error_Handler+0x8>

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <HAL_MspInit+0x5c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <HAL_MspInit+0x5c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6193      	str	r3, [r2, #24]
 8001166:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <HAL_MspInit+0x5c>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <HAL_MspInit+0x5c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a0e      	ldr	r2, [pc, #56]	@ (80011b0 <HAL_MspInit+0x5c>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800117c:	61d3      	str	r3, [r2, #28]
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <HAL_MspInit+0x5c>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_MspInit+0x60>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <HAL_MspInit+0x60>)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010000 	.word	0x40010000

080011b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <HAL_SPI_MspInit+0x88>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d12f      	bne.n	8001238 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <HAL_SPI_MspInit+0x8c>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <HAL_SPI_MspInit+0x8c>)
 80011de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <HAL_SPI_MspInit+0x8c>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_SPI_MspInit+0x8c>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a13      	ldr	r2, [pc, #76]	@ (8001244 <HAL_SPI_MspInit+0x8c>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <HAL_SPI_MspInit+0x8c>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001208:	23a0      	movs	r3, #160	@ 0xa0
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	@ (8001248 <HAL_SPI_MspInit+0x90>)
 800121c:	f000 fbb0 	bl	8001980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001220:	2340      	movs	r3, #64	@ 0x40
 8001222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <HAL_SPI_MspInit+0x90>)
 8001234:	f000 fba4 	bl	8001980 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40013000 	.word	0x40013000
 8001244:	40021000 	.word	0x40021000
 8001248:	40010800 	.word	0x40010800

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1f      	ldr	r2, [pc, #124]	@ (80012e4 <HAL_UART_MspInit+0x98>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d137      	bne.n	80012dc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800126c:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <HAL_UART_MspInit+0x9c>)
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	4a1d      	ldr	r2, [pc, #116]	@ (80012e8 <HAL_UART_MspInit+0x9c>)
 8001272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001276:	61d3      	str	r3, [r2, #28]
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <HAL_UART_MspInit+0x9c>)
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <HAL_UART_MspInit+0x9c>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <HAL_UART_MspInit+0x9c>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_UART_MspInit+0x9c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800129c:	2304      	movs	r3, #4
 800129e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	480f      	ldr	r0, [pc, #60]	@ (80012ec <HAL_UART_MspInit+0xa0>)
 80012b0:	f000 fb66 	bl	8001980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012b4:	2308      	movs	r3, #8
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	4809      	ldr	r0, [pc, #36]	@ (80012ec <HAL_UART_MspInit+0xa0>)
 80012c8:	f000 fb5a 	bl	8001980 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2026      	movs	r0, #38	@ 0x26
 80012d2:	f000 fa6c 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012d6:	2026      	movs	r0, #38	@ 0x26
 80012d8:	f000 fa85 	bl	80017e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40004400 	.word	0x40004400
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010800 	.word	0x40010800

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <NMI_Handler+0x4>

080012f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <MemManage_Handler+0x4>

08001308 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <UsageFault_Handler+0x4>

08001318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 f91e 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <USART2_IRQHandler+0x10>)
 800134e:	f001 fd37 	bl	8002dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000188 	.word	0x20000188

0800135c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e00a      	b.n	8001384 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800136e:	f3af 8000 	nop.w
 8001372:	4601      	mov	r1, r0
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	b2ca      	uxtb	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbf0      	blt.n	800136e <_read+0x12>
  }

  return len;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e009      	b.n	80013bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff feb7 	bl	8001124 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf1      	blt.n	80013a8 <_write+0x12>
  }
  return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_close>:

int _close(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f4:	605a      	str	r2, [r3, #4]
  return 0;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <_isatty>:

int _isatty(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
	...

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	@ (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f002 fcbe 	bl	8003de0 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20005000 	.word	0x20005000
 8001490:	00000400 	.word	0x00000400
 8001494:	200001dc 	.word	0x200001dc
 8001498:	20000330 	.word	0x20000330

0800149c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a8:	f7ff fff8 	bl	800149c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ac:	480b      	ldr	r0, [pc, #44]	@ (80014dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ae:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014b0:	4a0c      	ldr	r2, [pc, #48]	@ (80014e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a09      	ldr	r2, [pc, #36]	@ (80014e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014c4:	4c09      	ldr	r4, [pc, #36]	@ (80014ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d2:	f002 fc8b 	bl	8003dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014d6:	f7fe fe77 	bl	80001c8 <main>
  bx lr
 80014da:	4770      	bx	lr
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014e4:	080050e0 	.word	0x080050e0
  ldr r2, =_sbss
 80014e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014ec:	20000330 	.word	0x20000330

080014f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_2_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <HAL_Init+0x28>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a07      	ldr	r2, [pc, #28]	@ (800151c <HAL_Init+0x28>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001504:	2003      	movs	r0, #3
 8001506:	f000 f947 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150a:	200f      	movs	r0, #15
 800150c:	f000 f808 	bl	8001520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001510:	f7ff fe20 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40022000 	.word	0x40022000

08001520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <HAL_InitTick+0x54>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <HAL_InitTick+0x58>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001536:	fbb3 f3f1 	udiv	r3, r3, r1
 800153a:	fbb2 f3f3 	udiv	r3, r2, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f95f 	bl	8001802 <HAL_SYSTICK_Config>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e00e      	b.n	800156c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b0f      	cmp	r3, #15
 8001552:	d80a      	bhi.n	800156a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001554:	2200      	movs	r2, #0
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f000 f927 	bl	80017ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001560:	4a06      	ldr	r2, [pc, #24]	@ (800157c <HAL_InitTick+0x5c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000000 	.word	0x20000000
 8001578:	20000008 	.word	0x20000008
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_IncTick+0x1c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_IncTick+0x20>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a03      	ldr	r2, [pc, #12]	@ (80015a0 <HAL_IncTick+0x20>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	20000008 	.word	0x20000008
 80015a0:	200001e0 	.word	0x200001e0

080015a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b02      	ldr	r3, [pc, #8]	@ (80015b4 <HAL_GetTick+0x10>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	200001e0 	.word	0x200001e0

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff fff0 	bl	80015a4 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_Delay+0x44>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffe0 	bl	80015a4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800162c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4906      	ldr	r1, [pc, #24]	@ (8001698 <__NVIC_EnableIRQ+0x34>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	@ (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	@ (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f7ff ff90 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff2d 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff42 	bl	8001648 <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ff90 	bl	80016f0 <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff5f 	bl	800169c <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff35 	bl	8001664 <__NVIC_EnableIRQ>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffa2 	bl	8001754 <SysTick_Config>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800181a:	b480      	push	{r7}
 800181c:	b085      	sub	sp, #20
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d008      	beq.n	8001844 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2204      	movs	r2, #4
 8001836:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e020      	b.n	8001886 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 020e 	bic.w	r2, r2, #14
 8001852:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0201 	bic.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800186c:	2101      	movs	r1, #1
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d005      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2204      	movs	r2, #4
 80018ac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	73fb      	strb	r3, [r7, #15]
 80018b2:	e051      	b.n	8001958 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 020e 	bic.w	r2, r2, #14
 80018c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a22      	ldr	r2, [pc, #136]	@ (8001964 <HAL_DMA_Abort_IT+0xd4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d029      	beq.n	8001932 <HAL_DMA_Abort_IT+0xa2>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a21      	ldr	r2, [pc, #132]	@ (8001968 <HAL_DMA_Abort_IT+0xd8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d022      	beq.n	800192e <HAL_DMA_Abort_IT+0x9e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1f      	ldr	r2, [pc, #124]	@ (800196c <HAL_DMA_Abort_IT+0xdc>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01a      	beq.n	8001928 <HAL_DMA_Abort_IT+0x98>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001970 <HAL_DMA_Abort_IT+0xe0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d012      	beq.n	8001922 <HAL_DMA_Abort_IT+0x92>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1c      	ldr	r2, [pc, #112]	@ (8001974 <HAL_DMA_Abort_IT+0xe4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00a      	beq.n	800191c <HAL_DMA_Abort_IT+0x8c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1b      	ldr	r2, [pc, #108]	@ (8001978 <HAL_DMA_Abort_IT+0xe8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d102      	bne.n	8001916 <HAL_DMA_Abort_IT+0x86>
 8001910:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001914:	e00e      	b.n	8001934 <HAL_DMA_Abort_IT+0xa4>
 8001916:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800191a:	e00b      	b.n	8001934 <HAL_DMA_Abort_IT+0xa4>
 800191c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001920:	e008      	b.n	8001934 <HAL_DMA_Abort_IT+0xa4>
 8001922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001926:	e005      	b.n	8001934 <HAL_DMA_Abort_IT+0xa4>
 8001928:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800192c:	e002      	b.n	8001934 <HAL_DMA_Abort_IT+0xa4>
 800192e:	2310      	movs	r3, #16
 8001930:	e000      	b.n	8001934 <HAL_DMA_Abort_IT+0xa4>
 8001932:	2301      	movs	r3, #1
 8001934:	4a11      	ldr	r2, [pc, #68]	@ (800197c <HAL_DMA_Abort_IT+0xec>)
 8001936:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4798      	blx	r3
    } 
  }
  return status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40020008 	.word	0x40020008
 8001968:	4002001c 	.word	0x4002001c
 800196c:	40020030 	.word	0x40020030
 8001970:	40020044 	.word	0x40020044
 8001974:	40020058 	.word	0x40020058
 8001978:	4002006c 	.word	0x4002006c
 800197c:	40020000 	.word	0x40020000

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b08b      	sub	sp, #44	@ 0x2c
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e169      	b.n	8001c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001994:	2201      	movs	r2, #1
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8158 	bne.w	8001c62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a9a      	ldr	r2, [pc, #616]	@ (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d05e      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019bc:	4a98      	ldr	r2, [pc, #608]	@ (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d875      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019c2:	4a98      	ldr	r2, [pc, #608]	@ (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d058      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019c8:	4a96      	ldr	r2, [pc, #600]	@ (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d86f      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019ce:	4a96      	ldr	r2, [pc, #600]	@ (8001c28 <HAL_GPIO_Init+0x2a8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d052      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019d4:	4a94      	ldr	r2, [pc, #592]	@ (8001c28 <HAL_GPIO_Init+0x2a8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d869      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019da:	4a94      	ldr	r2, [pc, #592]	@ (8001c2c <HAL_GPIO_Init+0x2ac>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d04c      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019e0:	4a92      	ldr	r2, [pc, #584]	@ (8001c2c <HAL_GPIO_Init+0x2ac>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d863      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019e6:	4a92      	ldr	r2, [pc, #584]	@ (8001c30 <HAL_GPIO_Init+0x2b0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d046      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019ec:	4a90      	ldr	r2, [pc, #576]	@ (8001c30 <HAL_GPIO_Init+0x2b0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d85d      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d82a      	bhi.n	8001a4c <HAL_GPIO_Init+0xcc>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d859      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001a00 <HAL_GPIO_Init+0x80>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a7b 	.word	0x08001a7b
 8001a04:	08001a55 	.word	0x08001a55
 8001a08:	08001a67 	.word	0x08001a67
 8001a0c:	08001aa9 	.word	0x08001aa9
 8001a10:	08001aaf 	.word	0x08001aaf
 8001a14:	08001aaf 	.word	0x08001aaf
 8001a18:	08001aaf 	.word	0x08001aaf
 8001a1c:	08001aaf 	.word	0x08001aaf
 8001a20:	08001aaf 	.word	0x08001aaf
 8001a24:	08001aaf 	.word	0x08001aaf
 8001a28:	08001aaf 	.word	0x08001aaf
 8001a2c:	08001aaf 	.word	0x08001aaf
 8001a30:	08001aaf 	.word	0x08001aaf
 8001a34:	08001aaf 	.word	0x08001aaf
 8001a38:	08001aaf 	.word	0x08001aaf
 8001a3c:	08001aaf 	.word	0x08001aaf
 8001a40:	08001aaf 	.word	0x08001aaf
 8001a44:	08001a5d 	.word	0x08001a5d
 8001a48:	08001a71 	.word	0x08001a71
 8001a4c:	4a79      	ldr	r2, [pc, #484]	@ (8001c34 <HAL_GPIO_Init+0x2b4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a52:	e02c      	b.n	8001aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	623b      	str	r3, [r7, #32]
          break;
 8001a5a:	e029      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	3304      	adds	r3, #4
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	e024      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e01f      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	330c      	adds	r3, #12
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e01a      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a82:	2304      	movs	r3, #4
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e013      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	611a      	str	r2, [r3, #16]
          break;
 8001a9a:	e009      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	615a      	str	r2, [r3, #20]
          break;
 8001aa6:	e003      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          break;
 8001aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	@ 0xff
 8001ab4:	d801      	bhi.n	8001aba <HAL_GPIO_Init+0x13a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_Init+0x13e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	@ 0xff
 8001ac4:	d802      	bhi.n	8001acc <HAL_GPIO_Init+0x14c>
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x152>
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	3b08      	subs	r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	210f      	movs	r1, #15
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	6a39      	ldr	r1, [r7, #32]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	431a      	orrs	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80b1 	beq.w	8001c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b00:	4b4d      	ldr	r3, [pc, #308]	@ (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a4c      	ldr	r2, [pc, #304]	@ (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b18:	4a48      	ldr	r2, [pc, #288]	@ (8001c3c <HAL_GPIO_Init+0x2bc>)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a40      	ldr	r2, [pc, #256]	@ (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_GPIO_Init+0x1ec>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a3f      	ldr	r2, [pc, #252]	@ (8001c44 <HAL_GPIO_Init+0x2c4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00d      	beq.n	8001b68 <HAL_GPIO_Init+0x1e8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c48 <HAL_GPIO_Init+0x2c8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0x1e4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a3d      	ldr	r2, [pc, #244]	@ (8001c4c <HAL_GPIO_Init+0x2cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_GPIO_Init+0x1e0>
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b60:	2304      	movs	r3, #4
 8001b62:	e004      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b70:	f002 0203 	and.w	r2, r2, #3
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	4093      	lsls	r3, r2
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b7e:	492f      	ldr	r1, [pc, #188]	@ (8001c3c <HAL_GPIO_Init+0x2bc>)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b98:	4b2d      	ldr	r3, [pc, #180]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	492c      	ldr	r1, [pc, #176]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4928      	ldr	r1, [pc, #160]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc0:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4922      	ldr	r1, [pc, #136]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bce:	4b20      	ldr	r3, [pc, #128]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	491e      	ldr	r1, [pc, #120]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be8:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4918      	ldr	r1, [pc, #96]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf6:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4914      	ldr	r1, [pc, #80]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d021      	beq.n	8001c54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c10:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	490e      	ldr	r1, [pc, #56]	@ (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
 8001c1c:	e021      	b.n	8001c62 <HAL_GPIO_Init+0x2e2>
 8001c1e:	bf00      	nop
 8001c20:	10320000 	.word	0x10320000
 8001c24:	10310000 	.word	0x10310000
 8001c28:	10220000 	.word	0x10220000
 8001c2c:	10210000 	.word	0x10210000
 8001c30:	10120000 	.word	0x10120000
 8001c34:	10110000 	.word	0x10110000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40010c00 	.word	0x40010c00
 8001c48:	40011000 	.word	0x40011000
 8001c4c:	40011400 	.word	0x40011400
 8001c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_GPIO_Init+0x304>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4909      	ldr	r1, [pc, #36]	@ (8001c84 <HAL_GPIO_Init+0x304>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f ae8e 	bne.w	8001994 <HAL_GPIO_Init+0x14>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	372c      	adds	r7, #44	@ 0x2c
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ca4:	e003      	b.n	8001cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e036      	b.n	8001d38 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6852      	ldr	r2, [r2, #4]
 8001ce6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6892      	ldr	r2, [r2, #8]
 8001cf0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001cf2:	f7ff fc57 	bl	80015a4 <HAL_GetTick>
 8001cf6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001cf8:	e011      	b.n	8001d1e <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001cfa:	f7ff fc53 	bl	80015a4 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 323c 	movw	r2, #4924	@ 0x133c
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d908      	bls.n	8001d1e <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e00c      	b.n	8001d38 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1e6      	bne.n	8001cfa <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001d34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001d50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e272      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8087 	beq.w	8001e8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d80:	4b92      	ldr	r3, [pc, #584]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d00c      	beq.n	8001da6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d8c:	4b8f      	ldr	r3, [pc, #572]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d112      	bne.n	8001dbe <HAL_RCC_OscConfig+0x5e>
 8001d98:	4b8c      	ldr	r3, [pc, #560]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001da4:	d10b      	bne.n	8001dbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da6:	4b89      	ldr	r3, [pc, #548]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d06c      	beq.n	8001e8c <HAL_RCC_OscConfig+0x12c>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d168      	bne.n	8001e8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e24c      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x76>
 8001dc8:	4b80      	ldr	r3, [pc, #512]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a7f      	ldr	r2, [pc, #508]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e02e      	b.n	8001e34 <HAL_RCC_OscConfig+0xd4>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x98>
 8001dde:	4b7b      	ldr	r3, [pc, #492]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a7a      	ldr	r2, [pc, #488]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b78      	ldr	r3, [pc, #480]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a77      	ldr	r2, [pc, #476]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001df0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e01d      	b.n	8001e34 <HAL_RCC_OscConfig+0xd4>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0xbc>
 8001e02:	4b72      	ldr	r3, [pc, #456]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a71      	ldr	r2, [pc, #452]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b6f      	ldr	r3, [pc, #444]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6e      	ldr	r2, [pc, #440]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0xd4>
 8001e1c:	4b6b      	ldr	r3, [pc, #428]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a6a      	ldr	r2, [pc, #424]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b68      	ldr	r3, [pc, #416]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a67      	ldr	r2, [pc, #412]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fbb2 	bl	80015a4 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff fbae 	bl	80015a4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	@ 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e200      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b5d      	ldr	r3, [pc, #372]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xe4>
 8001e62:	e014      	b.n	8001e8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fb9e 	bl	80015a4 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fb9a 	bl	80015a4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	@ 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1ec      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	4b53      	ldr	r3, [pc, #332]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x10c>
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d063      	beq.n	8001f62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ea6:	4b49      	ldr	r3, [pc, #292]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d11c      	bne.n	8001eec <HAL_RCC_OscConfig+0x18c>
 8001eb2:	4b46      	ldr	r3, [pc, #280]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d116      	bne.n	8001eec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x176>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e1c0      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4939      	ldr	r1, [pc, #228]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	e03a      	b.n	8001f62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef4:	4b36      	ldr	r3, [pc, #216]	@ (8001fd0 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff fb53 	bl	80015a4 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f02:	f7ff fb4f 	bl	80015a4 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e1a1      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	4b2d      	ldr	r3, [pc, #180]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4927      	ldr	r1, [pc, #156]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e015      	b.n	8001f62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f36:	4b26      	ldr	r3, [pc, #152]	@ (8001fd0 <HAL_RCC_OscConfig+0x270>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fb32 	bl	80015a4 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f44:	f7ff fb2e 	bl	80015a4 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e180      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d03a      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d019      	beq.n	8001faa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f76:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7c:	f7ff fb12 	bl	80015a4 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff fb0e 	bl	80015a4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e160      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	4b0d      	ldr	r3, [pc, #52]	@ (8001fcc <HAL_RCC_OscConfig+0x26c>)
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f000 face 	bl	8002544 <RCC_Delay>
 8001fa8:	e01c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7ff faf8 	bl	80015a4 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb6:	e00f      	b.n	8001fd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7ff faf4 	bl	80015a4 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d908      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e146      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	42420000 	.word	0x42420000
 8001fd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd8:	4b92      	ldr	r3, [pc, #584]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1e9      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a6 	beq.w	800213e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff6:	4b8b      	ldr	r3, [pc, #556]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10d      	bne.n	800201e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	4b88      	ldr	r3, [pc, #544]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	4a87      	ldr	r2, [pc, #540]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800200c:	61d3      	str	r3, [r2, #28]
 800200e:	4b85      	ldr	r3, [pc, #532]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201a:	2301      	movs	r3, #1
 800201c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	4b82      	ldr	r3, [pc, #520]	@ (8002228 <HAL_RCC_OscConfig+0x4c8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d118      	bne.n	800205c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202a:	4b7f      	ldr	r3, [pc, #508]	@ (8002228 <HAL_RCC_OscConfig+0x4c8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7e      	ldr	r2, [pc, #504]	@ (8002228 <HAL_RCC_OscConfig+0x4c8>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002036:	f7ff fab5 	bl	80015a4 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203e:	f7ff fab1 	bl	80015a4 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b64      	cmp	r3, #100	@ 0x64
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e103      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	4b75      	ldr	r3, [pc, #468]	@ (8002228 <HAL_RCC_OscConfig+0x4c8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d106      	bne.n	8002072 <HAL_RCC_OscConfig+0x312>
 8002064:	4b6f      	ldr	r3, [pc, #444]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a6e      	ldr	r2, [pc, #440]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6213      	str	r3, [r2, #32]
 8002070:	e02d      	b.n	80020ce <HAL_RCC_OscConfig+0x36e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0x334>
 800207a:	4b6a      	ldr	r3, [pc, #424]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a69      	ldr	r2, [pc, #420]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	6213      	str	r3, [r2, #32]
 8002086:	4b67      	ldr	r3, [pc, #412]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4a66      	ldr	r2, [pc, #408]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	f023 0304 	bic.w	r3, r3, #4
 8002090:	6213      	str	r3, [r2, #32]
 8002092:	e01c      	b.n	80020ce <HAL_RCC_OscConfig+0x36e>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b05      	cmp	r3, #5
 800209a:	d10c      	bne.n	80020b6 <HAL_RCC_OscConfig+0x356>
 800209c:	4b61      	ldr	r3, [pc, #388]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a60      	ldr	r2, [pc, #384]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	6213      	str	r3, [r2, #32]
 80020a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6213      	str	r3, [r2, #32]
 80020b4:	e00b      	b.n	80020ce <HAL_RCC_OscConfig+0x36e>
 80020b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6213      	str	r3, [r2, #32]
 80020c2:	4b58      	ldr	r3, [pc, #352]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a57      	ldr	r2, [pc, #348]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d015      	beq.n	8002102 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7ff fa65 	bl	80015a4 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7ff fa61 	bl	80015a4 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e0b1      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0ee      	beq.n	80020de <HAL_RCC_OscConfig+0x37e>
 8002100:	e014      	b.n	800212c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7ff fa4f 	bl	80015a4 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7ff fa4b 	bl	80015a4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e09b      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002120:	4b40      	ldr	r3, [pc, #256]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ee      	bne.n	800210a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d105      	bne.n	800213e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002132:	4b3c      	ldr	r3, [pc, #240]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a3b      	ldr	r2, [pc, #236]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800213c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8087 	beq.w	8002256 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002148:	4b36      	ldr	r3, [pc, #216]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d061      	beq.n	8002218 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d146      	bne.n	80021ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215c:	4b33      	ldr	r3, [pc, #204]	@ (800222c <HAL_RCC_OscConfig+0x4cc>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7ff fa1f 	bl	80015a4 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216a:	f7ff fa1b 	bl	80015a4 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e06d      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217c:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002190:	d108      	bne.n	80021a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002192:	4b24      	ldr	r3, [pc, #144]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4921      	ldr	r1, [pc, #132]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a19      	ldr	r1, [r3, #32]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	430b      	orrs	r3, r1
 80021b6:	491b      	ldr	r1, [pc, #108]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <HAL_RCC_OscConfig+0x4cc>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7ff f9ef 	bl	80015a4 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ca:	f7ff f9eb 	bl	80015a4 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e03d      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021dc:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x46a>
 80021e8:	e035      	b.n	8002256 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <HAL_RCC_OscConfig+0x4cc>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff f9d8 	bl	80015a4 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f8:	f7ff f9d4 	bl	80015a4 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e026      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220a:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x498>
 8002216:	e01e      	b.n	8002256 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d107      	bne.n	8002230 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e019      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
 8002224:	40021000 	.word	0x40021000
 8002228:	40007000 	.word	0x40007000
 800222c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002230:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <HAL_RCC_OscConfig+0x500>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	429a      	cmp	r2, r3
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d001      	beq.n	8002256 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000

08002264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0d0      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002278:	4b6a      	ldr	r3, [pc, #424]	@ (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d910      	bls.n	80022a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b67      	ldr	r3, [pc, #412]	@ (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 0207 	bic.w	r2, r3, #7
 800228e:	4965      	ldr	r1, [pc, #404]	@ (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b63      	ldr	r3, [pc, #396]	@ (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0b8      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c0:	4b59      	ldr	r3, [pc, #356]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a58      	ldr	r2, [pc, #352]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d8:	4b53      	ldr	r3, [pc, #332]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a52      	ldr	r2, [pc, #328]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e4:	4b50      	ldr	r3, [pc, #320]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	494d      	ldr	r1, [pc, #308]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d040      	beq.n	8002384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b47      	ldr	r3, [pc, #284]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d115      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e07f      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002322:	4b41      	ldr	r3, [pc, #260]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e073      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002332:	4b3d      	ldr	r3, [pc, #244]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06b      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002342:	4b39      	ldr	r3, [pc, #228]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4936      	ldr	r1, [pc, #216]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002354:	f7ff f926 	bl	80015a4 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	e00a      	b.n	8002372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235c:	f7ff f922 	bl	80015a4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e053      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	4b2d      	ldr	r3, [pc, #180]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 020c 	and.w	r2, r3, #12
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	429a      	cmp	r2, r3
 8002382:	d1eb      	bne.n	800235c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002384:	4b27      	ldr	r3, [pc, #156]	@ (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d210      	bcs.n	80023b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b24      	ldr	r3, [pc, #144]	@ (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 0207 	bic.w	r2, r3, #7
 800239a:	4922      	ldr	r1, [pc, #136]	@ (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e032      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c0:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4916      	ldr	r1, [pc, #88]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	490e      	ldr	r1, [pc, #56]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023f2:	f000 f821 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	490a      	ldr	r1, [pc, #40]	@ (800242c <HAL_RCC_ClockConfig+0x1c8>)
 8002404:	5ccb      	ldrb	r3, [r1, r3]
 8002406:	fa22 f303 	lsr.w	r3, r2, r3
 800240a:	4a09      	ldr	r2, [pc, #36]	@ (8002430 <HAL_RCC_ClockConfig+0x1cc>)
 800240c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_RCC_ClockConfig+0x1d0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff f884 	bl	8001520 <HAL_InitTick>

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40022000 	.word	0x40022000
 8002428:	40021000 	.word	0x40021000
 800242c:	08004f70 	.word	0x08004f70
 8002430:	20000000 	.word	0x20000000
 8002434:	20000004 	.word	0x20000004

08002438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002452:	4b1e      	ldr	r3, [pc, #120]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b04      	cmp	r3, #4
 8002460:	d002      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x30>
 8002462:	2b08      	cmp	r3, #8
 8002464:	d003      	beq.n	800246e <HAL_RCC_GetSysClockFreq+0x36>
 8002466:	e027      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800246a:	613b      	str	r3, [r7, #16]
      break;
 800246c:	e027      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	0c9b      	lsrs	r3, r3, #18
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	4a17      	ldr	r2, [pc, #92]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002478:	5cd3      	ldrb	r3, [r2, r3]
 800247a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d010      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002486:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	0c5b      	lsrs	r3, r3, #17
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	4a11      	ldr	r2, [pc, #68]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002492:	5cd3      	ldrb	r3, [r2, r3]
 8002494:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a0d      	ldr	r2, [pc, #52]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800249a:	fb03 f202 	mul.w	r2, r3, r2
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e004      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a0c      	ldr	r2, [pc, #48]	@ (80024dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	613b      	str	r3, [r7, #16]
      break;
 80024b6:	e002      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b8:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ba:	613b      	str	r3, [r7, #16]
      break;
 80024bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024be:	693b      	ldr	r3, [r7, #16]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	08004f88 	.word	0x08004f88
 80024d8:	08004f98 	.word	0x08004f98
 80024dc:	003d0900 	.word	0x003d0900

080024e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e4:	4b02      	ldr	r3, [pc, #8]	@ (80024f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	20000000 	.word	0x20000000

080024f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024f8:	f7ff fff2 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	4903      	ldr	r1, [pc, #12]	@ (8002518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	08004f80 	.word	0x08004f80

0800251c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002520:	f7ff ffde 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0adb      	lsrs	r3, r3, #11
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4903      	ldr	r1, [pc, #12]	@ (8002540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	08004f80 	.word	0x08004f80

08002544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800254c:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <RCC_Delay+0x34>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <RCC_Delay+0x38>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0a5b      	lsrs	r3, r3, #9
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002560:	bf00      	nop
  }
  while (Delay --);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	60fa      	str	r2, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f9      	bne.n	8002560 <RCC_Delay+0x1c>
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000000 	.word	0x20000000
 800257c:	10624dd3 	.word	0x10624dd3

08002580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e076      	b.n	8002680 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	2b00      	cmp	r3, #0
 8002598:	d108      	bne.n	80025ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025a2:	d009      	beq.n	80025b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
 80025aa:	e005      	b.n	80025b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fdf0 	bl	80011b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263c:	ea42 0103 	orr.w	r1, r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002644:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	0c1a      	lsrs	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f002 0204 	and.w	r2, r2, #4
 800265e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800266e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	@ 0x28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002696:	2301      	movs	r3, #1
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800269a:	f7fe ff83 	bl	80015a4 <HAL_GetTick>
 800269e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026a6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026b2:	7ffb      	ldrb	r3, [r7, #31]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d00c      	beq.n	80026d2 <HAL_SPI_TransmitReceive+0x4a>
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026be:	d106      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x46>
 80026c8:	7ffb      	ldrb	r3, [r7, #31]
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d001      	beq.n	80026d2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
 80026d0:	e17f      	b.n	80029d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x5c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x5c>
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e174      	b.n	80029d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x6e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e16d      	b.n	80029d2 <HAL_SPI_TransmitReceive+0x34a>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b04      	cmp	r3, #4
 8002708:	d003      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2205      	movs	r2, #5
 800270e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	887a      	ldrh	r2, [r7, #2]
 8002722:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	887a      	ldrh	r2, [r7, #2]
 800273a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002752:	2b40      	cmp	r3, #64	@ 0x40
 8002754:	d007      	beq.n	8002766 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800276e:	d17e      	bne.n	800286e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_SPI_TransmitReceive+0xf6>
 8002778:	8afb      	ldrh	r3, [r7, #22]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d16c      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	881a      	ldrh	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	1c9a      	adds	r2, r3, #2
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a2:	e059      	b.n	8002858 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d11b      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x162>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d016      	beq.n	80027ea <HAL_SPI_TransmitReceive+0x162>
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d113      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	1c9a      	adds	r2, r3, #2
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d119      	bne.n	800282c <HAL_SPI_TransmitReceive+0x1a4>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d014      	beq.n	800282c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280c:	b292      	uxth	r2, r2
 800280e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002814:	1c9a      	adds	r2, r3, #2
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002828:	2301      	movs	r3, #1
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800282c:	f7fe feba 	bl	80015a4 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002838:	429a      	cmp	r2, r3
 800283a:	d80d      	bhi.n	8002858 <HAL_SPI_TransmitReceive+0x1d0>
 800283c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d009      	beq.n	8002858 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0bc      	b.n	80029d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1a0      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x11c>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d19b      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x11c>
 800286c:	e082      	b.n	8002974 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_SPI_TransmitReceive+0x1f4>
 8002876:	8afb      	ldrh	r3, [r7, #22]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d171      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028a2:	e05d      	b.n	8002960 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d11c      	bne.n	80028ec <HAL_SPI_TransmitReceive+0x264>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d017      	beq.n	80028ec <HAL_SPI_TransmitReceive+0x264>
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d114      	bne.n	80028ec <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	330c      	adds	r3, #12
 80028cc:	7812      	ldrb	r2, [r2, #0]
 80028ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d119      	bne.n	800292e <HAL_SPI_TransmitReceive+0x2a6>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d014      	beq.n	800292e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800292a:	2301      	movs	r3, #1
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800292e:	f7fe fe39 	bl	80015a4 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800293a:	429a      	cmp	r2, r3
 800293c:	d803      	bhi.n	8002946 <HAL_SPI_TransmitReceive+0x2be>
 800293e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d102      	bne.n	800294c <HAL_SPI_TransmitReceive+0x2c4>
 8002946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e038      	b.n	80029d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d19c      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x21c>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d197      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002974:	6a3a      	ldr	r2, [r7, #32]
 8002976:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f8b7 	bl	8002aec <SPI_EndRxTxTransaction>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e01d      	b.n	80029d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3728      	adds	r7, #40	@ 0x28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029ec:	f7fe fdda 	bl	80015a4 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029fc:	f7fe fdd2 	bl	80015a4 <HAL_GetTick>
 8002a00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a02:	4b39      	ldr	r3, [pc, #228]	@ (8002ae8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	015b      	lsls	r3, r3, #5
 8002a08:	0d1b      	lsrs	r3, r3, #20
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a12:	e054      	b.n	8002abe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1a:	d050      	beq.n	8002abe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a1c:	f7fe fdc2 	bl	80015a4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d902      	bls.n	8002a32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d13d      	bne.n	8002aae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a4a:	d111      	bne.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a54:	d004      	beq.n	8002a60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5e:	d107      	bne.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a78:	d10f      	bne.n	8002a9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e017      	b.n	8002ade <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d19b      	bne.n	8002a14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000000 	.word	0x20000000

08002aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2201      	movs	r2, #1
 8002b00:	2102      	movs	r1, #2
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff ff6a 	bl	80029dc <SPI_WaitFlagStateUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e013      	b.n	8002b46 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2180      	movs	r1, #128	@ 0x80
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff ff57 	bl	80029dc <SPI_WaitFlagStateUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	f043 0220 	orr.w	r2, r3, #32
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e000      	b.n	8002b46 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e042      	b.n	8002be6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d106      	bne.n	8002b7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7fe fb69 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2224      	movs	r2, #36	@ 0x24
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fdee 	bl	8003774 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ba6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b08a      	sub	sp, #40	@ 0x28
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d175      	bne.n	8002cfa <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_UART_Transmit+0x2c>
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06e      	b.n	8002cfc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2221      	movs	r2, #33	@ 0x21
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fcba 	bl	80015a4 <HAL_GetTick>
 8002c30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c46:	d108      	bne.n	8002c5a <HAL_UART_Transmit+0x6c>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d104      	bne.n	8002c5a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	e003      	b.n	8002c62 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c62:	e02e      	b.n	8002cc2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2180      	movs	r1, #128	@ 0x80
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fb53 	bl	800331a <UART_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e03a      	b.n	8002cfc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c9a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	e007      	b.n	8002cb4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	781a      	ldrb	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1cb      	bne.n	8002c64 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2140      	movs	r1, #64	@ 0x40
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fb1f 	bl	800331a <UART_WaitOnFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e006      	b.n	8002cfc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e000      	b.n	8002cfc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
  }
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08c      	sub	sp, #48	@ 0x30
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d14a      	bne.n	8002db4 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e043      	b.n	8002db6 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fb43 	bl	80033cc <UART_Start_Receive_IT>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d12c      	bne.n	8002dae <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d125      	bne.n	8002da8 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	617b      	str	r3, [r7, #20]
   return(result);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f043 0310 	orr.w	r3, r3, #16
 8002d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	330c      	adds	r3, #12
 8002d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d92:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d94:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d96:	6a39      	ldr	r1, [r7, #32]
 8002d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e5      	bne.n	8002d72 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002da6:	e002      	b.n	8002dae <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002dae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002db2:	e000      	b.n	8002db6 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3730      	adds	r7, #48	@ 0x30
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b0ba      	sub	sp, #232	@ 0xe8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_UART_IRQHandler+0x66>
 8002e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fbea 	bl	80035f8 <UART_Receive_IT>
      return;
 8002e24:	e25b      	b.n	80032de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80de 	beq.w	8002fec <HAL_UART_IRQHandler+0x22c>
 8002e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80d1 	beq.w	8002fec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_UART_IRQHandler+0xae>
 8002e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_UART_IRQHandler+0xd2>
 8002e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	f043 0202 	orr.w	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_UART_IRQHandler+0xf6>
 8002e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f043 0204 	orr.w	r2, r3, #4
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d011      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x126>
 8002ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d105      	bne.n	8002eda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	f043 0208 	orr.w	r2, r3, #8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 81f2 	beq.w	80032d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_UART_IRQHandler+0x14e>
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fb75 	bl	80035f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <HAL_UART_IRQHandler+0x17a>
 8002f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d04f      	beq.n	8002fda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa7f 	bl	800343e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d041      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3314      	adds	r3, #20
 8002f54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1d9      	bne.n	8002f4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d013      	beq.n	8002fca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80031a0 <HAL_UART_IRQHandler+0x3e0>)
 8002fa8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fc6e 	bl	8001890 <HAL_DMA_Abort_IT>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	e00e      	b.n	8002fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f99c 	bl	8003308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd0:	e00a      	b.n	8002fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f998 	bl	8003308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd8:	e006      	b.n	8002fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f994 	bl	8003308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002fe6:	e175      	b.n	80032d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	bf00      	nop
    return;
 8002fea:	e173      	b.n	80032d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f040 814f 	bne.w	8003294 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8148 	beq.w	8003294 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8141 	beq.w	8003294 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80b6 	beq.w	80031a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003044:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8145 	beq.w	80032d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003056:	429a      	cmp	r2, r3
 8003058:	f080 813e 	bcs.w	80032d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003062:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b20      	cmp	r3, #32
 800306c:	f000 8088 	beq.w	8003180 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003086:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800308a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800308e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	330c      	adds	r3, #12
 8003098:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800309c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1d9      	bne.n	8003070 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3314      	adds	r3, #20
 80030c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c6:	e853 3f00 	ldrex	r3, [r3]
 80030ca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3314      	adds	r3, #20
 80030dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030e0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030ec:	e841 2300 	strex	r3, r2, [r1]
 80030f0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e1      	bne.n	80030bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3314      	adds	r3, #20
 80030fe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003100:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003102:	e853 3f00 	ldrex	r3, [r3]
 8003106:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800310a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800310e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3314      	adds	r3, #20
 8003118:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800311c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800311e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003120:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003122:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003124:	e841 2300 	strex	r3, r2, [r1]
 8003128:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800312a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1e3      	bne.n	80030f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800314e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003150:	f023 0310 	bic.w	r3, r3, #16
 8003154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003162:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003164:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003168:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e3      	bne.n	800313e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fb4d 	bl	800181a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800318e:	b29b      	uxth	r3, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	b29b      	uxth	r3, r3
 8003194:	4619      	mov	r1, r3
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fc ffe0 	bl	800015c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800319c:	e09c      	b.n	80032d8 <HAL_UART_IRQHandler+0x518>
 800319e:	bf00      	nop
 80031a0:	08003503 	.word	0x08003503
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 808e 	beq.w	80032dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8089 	beq.w	80032dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	330c      	adds	r3, #12
 80031d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	330c      	adds	r3, #12
 80031ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80031f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e3      	bne.n	80031ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	623b      	str	r3, [r7, #32]
   return(result);
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3314      	adds	r3, #20
 8003222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003226:	633a      	str	r2, [r7, #48]	@ 0x30
 8003228:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800322c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e3      	bne.n	8003202 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	e853 3f00 	ldrex	r3, [r3]
 8003256:	60fb      	str	r3, [r7, #12]
   return(result);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0310 	bic.w	r3, r3, #16
 800325e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800326c:	61fa      	str	r2, [r7, #28]
 800326e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	e841 2300 	strex	r3, r2, [r1]
 8003278:	617b      	str	r3, [r7, #20]
   return(result);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e3      	bne.n	8003248 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fc ff65 	bl	800015c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003292:	e023      	b.n	80032dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329c:	2b00      	cmp	r3, #0
 800329e:	d009      	beq.n	80032b4 <HAL_UART_IRQHandler+0x4f4>
 80032a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f93c 	bl	800352a <UART_Transmit_IT>
    return;
 80032b2:	e014      	b.n	80032de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00e      	beq.n	80032de <HAL_UART_IRQHandler+0x51e>
 80032c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f97b 	bl	80035c8 <UART_EndTransmit_IT>
    return;
 80032d2:	e004      	b.n	80032de <HAL_UART_IRQHandler+0x51e>
    return;
 80032d4:	bf00      	nop
 80032d6:	e002      	b.n	80032de <HAL_UART_IRQHandler+0x51e>
      return;
 80032d8:	bf00      	nop
 80032da:	e000      	b.n	80032de <HAL_UART_IRQHandler+0x51e>
      return;
 80032dc:	bf00      	nop
  }
}
 80032de:	37e8      	adds	r7, #232	@ 0xe8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332a:	e03b      	b.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003332:	d037      	beq.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003334:	f7fe f936 	bl	80015a4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	6a3a      	ldr	r2, [r7, #32]
 8003340:	429a      	cmp	r2, r3
 8003342:	d302      	bcc.n	800334a <UART_WaitOnFlagUntilTimeout+0x30>
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e03a      	b.n	80033c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d023      	beq.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b80      	cmp	r3, #128	@ 0x80
 8003360:	d020      	beq.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b40      	cmp	r3, #64	@ 0x40
 8003366:	d01d      	beq.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b08      	cmp	r3, #8
 8003374:	d116      	bne.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f856 	bl	800343e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2208      	movs	r2, #8
 8003396:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e00f      	b.n	80033c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4013      	ands	r3, r2
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d0b4      	beq.n	800332c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	88fa      	ldrh	r2, [r7, #6]
 80033ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2222      	movs	r2, #34	@ 0x22
 80033f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003410:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0220 	orr.w	r2, r2, #32
 8003430:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr

0800343e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800343e:	b480      	push	{r7}
 8003440:	b095      	sub	sp, #84	@ 0x54
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330c      	adds	r3, #12
 800344c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800345c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	330c      	adds	r3, #12
 8003464:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003466:	643a      	str	r2, [r7, #64]	@ 0x40
 8003468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800346c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e5      	bne.n	8003446 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3314      	adds	r3, #20
 8003480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	61fb      	str	r3, [r7, #28]
   return(result);
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800349a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800349c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a2:	e841 2300 	strex	r3, r2, [r1]
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1e5      	bne.n	800347a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d119      	bne.n	80034ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f023 0310 	bic.w	r3, r3, #16
 80034cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034d6:	61ba      	str	r2, [r7, #24]
 80034d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	6979      	ldr	r1, [r7, #20]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	e841 2300 	strex	r3, r2, [r1]
 80034e2:	613b      	str	r3, [r7, #16]
   return(result);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1e5      	bne.n	80034b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034f8:	bf00      	nop
 80034fa:	3754      	adds	r7, #84	@ 0x54
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff fef3 	bl	8003308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800352a:	b480      	push	{r7}
 800352c:	b085      	sub	sp, #20
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b21      	cmp	r3, #33	@ 0x21
 800353c:	d13e      	bne.n	80035bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003546:	d114      	bne.n	8003572 <UART_Transmit_IT+0x48>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d110      	bne.n	8003572 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003564:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	1c9a      	adds	r2, r3, #2
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	621a      	str	r2, [r3, #32]
 8003570:	e008      	b.n	8003584 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	1c59      	adds	r1, r3, #1
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6211      	str	r1, [r2, #32]
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29b      	uxth	r3, r3
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4619      	mov	r1, r3
 8003592:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10f      	bne.n	80035b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff fe7b 	bl	80032e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08c      	sub	sp, #48	@ 0x30
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b22      	cmp	r3, #34	@ 0x22
 800360a:	f040 80ae 	bne.w	800376a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003616:	d117      	bne.n	8003648 <UART_Receive_IT+0x50>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d113      	bne.n	8003648 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003620:	2300      	movs	r3, #0
 8003622:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	b29b      	uxth	r3, r3
 8003632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003636:	b29a      	uxth	r2, r3
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003640:	1c9a      	adds	r2, r3, #2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	629a      	str	r2, [r3, #40]	@ 0x28
 8003646:	e026      	b.n	8003696 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800365a:	d007      	beq.n	800366c <UART_Receive_IT+0x74>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <UART_Receive_IT+0x82>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d106      	bne.n	800367a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	b2da      	uxtb	r2, r3
 8003674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e008      	b.n	800368c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003686:	b2da      	uxtb	r2, r3
 8003688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29b      	uxth	r3, r3
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	4619      	mov	r1, r3
 80036a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d15d      	bne.n	8003766 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0220 	bic.w	r2, r2, #32
 80036b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d135      	bne.n	800375c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	613b      	str	r3, [r7, #16]
   return(result);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f023 0310 	bic.w	r3, r3, #16
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003716:	623a      	str	r2, [r7, #32]
 8003718:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	69f9      	ldr	r1, [r7, #28]
 800371c:	6a3a      	ldr	r2, [r7, #32]
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	61bb      	str	r3, [r7, #24]
   return(result);
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b10      	cmp	r3, #16
 8003736:	d10a      	bne.n	800374e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7fc fd01 	bl	800015c <HAL_UARTEx_RxEventCallback>
 800375a:	e002      	b.n	8003762 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fdca 	bl	80032f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e002      	b.n	800376c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3730      	adds	r7, #48	@ 0x30
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80037ae:	f023 030c 	bic.w	r3, r3, #12
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003888 <UART_SetConfig+0x114>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d103      	bne.n	80037e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037dc:	f7fe fe9e 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	e002      	b.n	80037ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037e4:	f7fe fe86 	bl	80024f4 <HAL_RCC_GetPCLK1Freq>
 80037e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009a      	lsls	r2, r3, #2
 80037f4:	441a      	add	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	4a22      	ldr	r2, [pc, #136]	@ (800388c <UART_SetConfig+0x118>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	0119      	lsls	r1, r3, #4
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009a      	lsls	r2, r3, #2
 8003814:	441a      	add	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003820:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <UART_SetConfig+0x118>)
 8003822:	fba3 0302 	umull	r0, r3, r3, r2
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2064      	movs	r0, #100	@ 0x64
 800382a:	fb00 f303 	mul.w	r3, r0, r3
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	3332      	adds	r3, #50	@ 0x32
 8003834:	4a15      	ldr	r2, [pc, #84]	@ (800388c <UART_SetConfig+0x118>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003840:	4419      	add	r1, r3
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	009a      	lsls	r2, r3, #2
 800384c:	441a      	add	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	fbb2 f2f3 	udiv	r2, r2, r3
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <UART_SetConfig+0x118>)
 800385a:	fba3 0302 	umull	r0, r3, r3, r2
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	2064      	movs	r0, #100	@ 0x64
 8003862:	fb00 f303 	mul.w	r3, r0, r3
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	3332      	adds	r3, #50	@ 0x32
 800386c:	4a07      	ldr	r2, [pc, #28]	@ (800388c <UART_SetConfig+0x118>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	f003 020f 	and.w	r2, r3, #15
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	440a      	add	r2, r1
 800387e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40013800 	.word	0x40013800
 800388c:	51eb851f 	.word	0x51eb851f

08003890 <ADE7758_Init>:
 * Prescaler = 8
 * First bit = MBS first
 * CPOL = Low
 */
void ADE7758_Init(ADE7758_SPI *spi, SPI_HandleTypeDef *hspi, GPIO_TypeDef *CS_PORT, uint16_t CS_PIN)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	807b      	strh	r3, [r7, #2]
    spi->hspi = hspi;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	609a      	str	r2, [r3, #8]
    spi->CS_PORT = CS_PORT;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	601a      	str	r2, [r3, #0]
    spi->CS_PIN = CS_PIN;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	887a      	ldrh	r2, [r7, #2]
 80038ae:	809a      	strh	r2, [r3, #4]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <ADE7758_Write>:
 * @note  CLK: |       7       |  6 |  5 |  4 |  3 |  2 | 1  |  0  |       |  7   | 6  |  5 | 4  | 3  | 2  | 1  | 0  |   ...
 * @note MOSI: | START BIT = 1 | A6 | A5 | A4 | A3 | A2 | A1 | A0  |       |  D7  | D6 | D5 | D4 | D3 | D2 | D1 | D0 |   ...
 * @note MISO: |       X       |  x |  x |  x |  x |  x |  x |  x  |       |  X   | X  | X  | X  | X  | X  | X  | X  |   ...
 */
void ADE7758_Write(ADE7758_SPI *spi, int32_t value, uint8_t address, uint8_t length)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b088      	sub	sp, #32
 80038be:	af02      	add	r7, sp, #8
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	4611      	mov	r1, r2
 80038c6:	461a      	mov	r2, r3
 80038c8:	460b      	mov	r3, r1
 80038ca:	71fb      	strb	r3, [r7, #7]
 80038cc:	4613      	mov	r3, r2
 80038ce:	71bb      	strb	r3, [r7, #6]
    /*Declare ADDRESS that we will send*/
    uint8_t pTxData[4] = {0};
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
    pTxData[0] = address | 0x80;
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	753b      	strb	r3, [r7, #20]

    switch (length)
 80038de:	79bb      	ldrb	r3, [r7, #6]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d012      	beq.n	800390a <ADE7758_Write+0x50>
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	dc1c      	bgt.n	8003922 <ADE7758_Write+0x68>
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d002      	beq.n	80038f2 <ADE7758_Write+0x38>
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d004      	beq.n	80038fa <ADE7758_Write+0x40>
        pTxData[1] = (uint8_t)((value >> 16) & 0xFF);
        pTxData[2] = (uint8_t)((value >> 8) & 0xFF);
        pTxData[3] = (uint8_t)(value & 0xFF);
        break;
    default:
        break;
 80038f0:	e017      	b.n	8003922 <ADE7758_Write+0x68>
        pTxData[1] = (uint8_t)(value & 0xFF);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	757b      	strb	r3, [r7, #21]
        break;
 80038f8:	e014      	b.n	8003924 <ADE7758_Write+0x6a>
        pTxData[1] = (uint8_t)((value >> 8) & 0xFF);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	121b      	asrs	r3, r3, #8
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	757b      	strb	r3, [r7, #21]
        pTxData[2] = (uint8_t)(value & 0xFF);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	75bb      	strb	r3, [r7, #22]
        break;
 8003908:	e00c      	b.n	8003924 <ADE7758_Write+0x6a>
        pTxData[1] = (uint8_t)((value >> 16) & 0xFF);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	141b      	asrs	r3, r3, #16
 800390e:	b2db      	uxtb	r3, r3
 8003910:	757b      	strb	r3, [r7, #21]
        pTxData[2] = (uint8_t)((value >> 8) & 0xFF);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	121b      	asrs	r3, r3, #8
 8003916:	b2db      	uxtb	r3, r3
 8003918:	75bb      	strb	r3, [r7, #22]
        pTxData[3] = (uint8_t)(value & 0xFF);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	75fb      	strb	r3, [r7, #23]
        break;
 8003920:	e000      	b.n	8003924 <ADE7758_Write+0x6a>
        break;
 8003922:	bf00      	nop
    }

    /*Data that we will get*/
    uint8_t pRxData[4] = {0};
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]

    /*CS low, Send and receive, CS high*/
    HAL_GPIO_WritePin(spi->CS_PORT, spi->CS_PIN, GPIO_PIN_RESET);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	889b      	ldrh	r3, [r3, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	4619      	mov	r1, r3
 8003934:	f7fe f9a8 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(spi->hspi, pTxData, pRxData, 4, 10);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6898      	ldr	r0, [r3, #8]
 800393c:	f107 0210 	add.w	r2, r7, #16
 8003940:	f107 0114 	add.w	r1, r7, #20
 8003944:	230a      	movs	r3, #10
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2304      	movs	r3, #4
 800394a:	f7fe fe9d 	bl	8002688 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(spi->CS_PORT, spi->CS_PIN, GPIO_PIN_SET);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	889b      	ldrh	r3, [r3, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	4619      	mov	r1, r3
 800395a:	f7fe f995 	bl	8001c88 <HAL_GPIO_WritePin>
}
 800395e:	bf00      	nop
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <ADE7758_Read>:

int32_t ADE7758_Read(ADE7758_SPI *spi, uint8_t address, uint8_t length)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af02      	add	r7, sp, #8
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	70fb      	strb	r3, [r7, #3]
 8003972:	4613      	mov	r3, r2
 8003974:	70bb      	strb	r3, [r7, #2]
    /*Declare ADDRESS that we will send*/
    uint8_t pTxData[4] = {0};
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
    pTxData[0] = address;
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	733b      	strb	r3, [r7, #12]

    /*Data that we will get*/
    uint8_t pRxData[4] = {0};
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]

    /*CS low, Send and receive, CS high*/
    HAL_GPIO_WritePin(spi->CS_PORT, spi->CS_PIN, GPIO_PIN_RESET);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	889b      	ldrh	r3, [r3, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	4619      	mov	r1, r3
 800398e:	f7fe f97b 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(spi->hspi, pTxData, pRxData, 4, 10);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6898      	ldr	r0, [r3, #8]
 8003996:	f107 0208 	add.w	r2, r7, #8
 800399a:	f107 010c 	add.w	r1, r7, #12
 800399e:	230a      	movs	r3, #10
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2304      	movs	r3, #4
 80039a4:	f7fe fe70 	bl	8002688 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(spi->CS_PORT, spi->CS_PIN, GPIO_PIN_SET);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	889b      	ldrh	r3, [r3, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	4619      	mov	r1, r3
 80039b4:	f7fe f968 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80039b8:	200a      	movs	r0, #10
 80039ba:	f7fd fdfd 	bl	80015b8 <HAL_Delay>

    switch (length)
 80039be:	78bb      	ldrb	r3, [r7, #2]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d00e      	beq.n	80039e2 <ADE7758_Read+0x7c>
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	dc16      	bgt.n	80039f6 <ADE7758_Read+0x90>
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d002      	beq.n	80039d2 <ADE7758_Read+0x6c>
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d002      	beq.n	80039d6 <ADE7758_Read+0x70>
    case 3: // Length = 3bytes
        /* code */
        return 0xFFFFFF & (((pRxData[1] & 0xFF) << 16) | ((pRxData[2] & 0xFF) << 8) | (pRxData[3] & 0xFF));
        break;
    default:
        break;
 80039d0:	e011      	b.n	80039f6 <ADE7758_Read+0x90>
        return 0x0000FF & (pRxData[1] & 0xFF);
 80039d2:	7a7b      	ldrb	r3, [r7, #9]
 80039d4:	e012      	b.n	80039fc <ADE7758_Read+0x96>
        return 0x00FFFF & (((pRxData[1] & 0xFF) << 8) | (pRxData[2] & 0xFF));
 80039d6:	7a7b      	ldrb	r3, [r7, #9]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	7aba      	ldrb	r2, [r7, #10]
 80039dc:	4313      	orrs	r3, r2
 80039de:	b29b      	uxth	r3, r3
 80039e0:	e00c      	b.n	80039fc <ADE7758_Read+0x96>
        return 0xFFFFFF & (((pRxData[1] & 0xFF) << 16) | ((pRxData[2] & 0xFF) << 8) | (pRxData[3] & 0xFF));
 80039e2:	7a7b      	ldrb	r3, [r7, #9]
 80039e4:	041a      	lsls	r2, r3, #16
 80039e6:	7abb      	ldrb	r3, [r7, #10]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	4313      	orrs	r3, r2
 80039ec:	7afa      	ldrb	r2, [r7, #11]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039f4:	e002      	b.n	80039fc <ADE7758_Read+0x96>
        break;
 80039f6:	bf00      	nop
    }
    return -1;
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <atoi>:
 8003a04:	220a      	movs	r2, #10
 8003a06:	2100      	movs	r1, #0
 8003a08:	f000 b87a 	b.w	8003b00 <strtol>

08003a0c <_strtol_l.constprop.0>:
 8003a0c:	2b24      	cmp	r3, #36	@ 0x24
 8003a0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a12:	4686      	mov	lr, r0
 8003a14:	4690      	mov	r8, r2
 8003a16:	d801      	bhi.n	8003a1c <_strtol_l.constprop.0+0x10>
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d106      	bne.n	8003a2a <_strtol_l.constprop.0+0x1e>
 8003a1c:	f000 f9e0 	bl	8003de0 <__errno>
 8003a20:	2316      	movs	r3, #22
 8003a22:	6003      	str	r3, [r0, #0]
 8003a24:	2000      	movs	r0, #0
 8003a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a2a:	460d      	mov	r5, r1
 8003a2c:	4833      	ldr	r0, [pc, #204]	@ (8003afc <_strtol_l.constprop.0+0xf0>)
 8003a2e:	462a      	mov	r2, r5
 8003a30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a34:	5d06      	ldrb	r6, [r0, r4]
 8003a36:	f016 0608 	ands.w	r6, r6, #8
 8003a3a:	d1f8      	bne.n	8003a2e <_strtol_l.constprop.0+0x22>
 8003a3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8003a3e:	d12d      	bne.n	8003a9c <_strtol_l.constprop.0+0x90>
 8003a40:	2601      	movs	r6, #1
 8003a42:	782c      	ldrb	r4, [r5, #0]
 8003a44:	1c95      	adds	r5, r2, #2
 8003a46:	f033 0210 	bics.w	r2, r3, #16
 8003a4a:	d109      	bne.n	8003a60 <_strtol_l.constprop.0+0x54>
 8003a4c:	2c30      	cmp	r4, #48	@ 0x30
 8003a4e:	d12a      	bne.n	8003aa6 <_strtol_l.constprop.0+0x9a>
 8003a50:	782a      	ldrb	r2, [r5, #0]
 8003a52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003a56:	2a58      	cmp	r2, #88	@ 0x58
 8003a58:	d125      	bne.n	8003aa6 <_strtol_l.constprop.0+0x9a>
 8003a5a:	2310      	movs	r3, #16
 8003a5c:	786c      	ldrb	r4, [r5, #1]
 8003a5e:	3502      	adds	r5, #2
 8003a60:	2200      	movs	r2, #0
 8003a62:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003a66:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003a6a:	fbbc f9f3 	udiv	r9, ip, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	fb03 ca19 	mls	sl, r3, r9, ip
 8003a74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003a78:	2f09      	cmp	r7, #9
 8003a7a:	d81b      	bhi.n	8003ab4 <_strtol_l.constprop.0+0xa8>
 8003a7c:	463c      	mov	r4, r7
 8003a7e:	42a3      	cmp	r3, r4
 8003a80:	dd27      	ble.n	8003ad2 <_strtol_l.constprop.0+0xc6>
 8003a82:	1c57      	adds	r7, r2, #1
 8003a84:	d007      	beq.n	8003a96 <_strtol_l.constprop.0+0x8a>
 8003a86:	4581      	cmp	r9, r0
 8003a88:	d320      	bcc.n	8003acc <_strtol_l.constprop.0+0xc0>
 8003a8a:	d101      	bne.n	8003a90 <_strtol_l.constprop.0+0x84>
 8003a8c:	45a2      	cmp	sl, r4
 8003a8e:	db1d      	blt.n	8003acc <_strtol_l.constprop.0+0xc0>
 8003a90:	2201      	movs	r2, #1
 8003a92:	fb00 4003 	mla	r0, r0, r3, r4
 8003a96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a9a:	e7eb      	b.n	8003a74 <_strtol_l.constprop.0+0x68>
 8003a9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8003a9e:	bf04      	itt	eq
 8003aa0:	782c      	ldrbeq	r4, [r5, #0]
 8003aa2:	1c95      	addeq	r5, r2, #2
 8003aa4:	e7cf      	b.n	8003a46 <_strtol_l.constprop.0+0x3a>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1da      	bne.n	8003a60 <_strtol_l.constprop.0+0x54>
 8003aaa:	2c30      	cmp	r4, #48	@ 0x30
 8003aac:	bf0c      	ite	eq
 8003aae:	2308      	moveq	r3, #8
 8003ab0:	230a      	movne	r3, #10
 8003ab2:	e7d5      	b.n	8003a60 <_strtol_l.constprop.0+0x54>
 8003ab4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003ab8:	2f19      	cmp	r7, #25
 8003aba:	d801      	bhi.n	8003ac0 <_strtol_l.constprop.0+0xb4>
 8003abc:	3c37      	subs	r4, #55	@ 0x37
 8003abe:	e7de      	b.n	8003a7e <_strtol_l.constprop.0+0x72>
 8003ac0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003ac4:	2f19      	cmp	r7, #25
 8003ac6:	d804      	bhi.n	8003ad2 <_strtol_l.constprop.0+0xc6>
 8003ac8:	3c57      	subs	r4, #87	@ 0x57
 8003aca:	e7d8      	b.n	8003a7e <_strtol_l.constprop.0+0x72>
 8003acc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad0:	e7e1      	b.n	8003a96 <_strtol_l.constprop.0+0x8a>
 8003ad2:	1c53      	adds	r3, r2, #1
 8003ad4:	d108      	bne.n	8003ae8 <_strtol_l.constprop.0+0xdc>
 8003ad6:	2322      	movs	r3, #34	@ 0x22
 8003ad8:	4660      	mov	r0, ip
 8003ada:	f8ce 3000 	str.w	r3, [lr]
 8003ade:	f1b8 0f00 	cmp.w	r8, #0
 8003ae2:	d0a0      	beq.n	8003a26 <_strtol_l.constprop.0+0x1a>
 8003ae4:	1e69      	subs	r1, r5, #1
 8003ae6:	e006      	b.n	8003af6 <_strtol_l.constprop.0+0xea>
 8003ae8:	b106      	cbz	r6, 8003aec <_strtol_l.constprop.0+0xe0>
 8003aea:	4240      	negs	r0, r0
 8003aec:	f1b8 0f00 	cmp.w	r8, #0
 8003af0:	d099      	beq.n	8003a26 <_strtol_l.constprop.0+0x1a>
 8003af2:	2a00      	cmp	r2, #0
 8003af4:	d1f6      	bne.n	8003ae4 <_strtol_l.constprop.0+0xd8>
 8003af6:	f8c8 1000 	str.w	r1, [r8]
 8003afa:	e794      	b.n	8003a26 <_strtol_l.constprop.0+0x1a>
 8003afc:	08004f9b 	.word	0x08004f9b

08003b00 <strtol>:
 8003b00:	4613      	mov	r3, r2
 8003b02:	460a      	mov	r2, r1
 8003b04:	4601      	mov	r1, r0
 8003b06:	4802      	ldr	r0, [pc, #8]	@ (8003b10 <strtol+0x10>)
 8003b08:	6800      	ldr	r0, [r0, #0]
 8003b0a:	f7ff bf7f 	b.w	8003a0c <_strtol_l.constprop.0>
 8003b0e:	bf00      	nop
 8003b10:	20000018 	.word	0x20000018

08003b14 <std>:
 8003b14:	2300      	movs	r3, #0
 8003b16:	b510      	push	{r4, lr}
 8003b18:	4604      	mov	r4, r0
 8003b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b22:	6083      	str	r3, [r0, #8]
 8003b24:	8181      	strh	r1, [r0, #12]
 8003b26:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b28:	81c2      	strh	r2, [r0, #14]
 8003b2a:	6183      	str	r3, [r0, #24]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	2208      	movs	r2, #8
 8003b30:	305c      	adds	r0, #92	@ 0x5c
 8003b32:	f000 f906 	bl	8003d42 <memset>
 8003b36:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <std+0x58>)
 8003b38:	6224      	str	r4, [r4, #32]
 8003b3a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <std+0x5c>)
 8003b3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b40:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <std+0x60>)
 8003b42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b44:	4b0c      	ldr	r3, [pc, #48]	@ (8003b78 <std+0x64>)
 8003b46:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b48:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <std+0x68>)
 8003b4a:	429c      	cmp	r4, r3
 8003b4c:	d006      	beq.n	8003b5c <std+0x48>
 8003b4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b52:	4294      	cmp	r4, r2
 8003b54:	d002      	beq.n	8003b5c <std+0x48>
 8003b56:	33d0      	adds	r3, #208	@ 0xd0
 8003b58:	429c      	cmp	r4, r3
 8003b5a:	d105      	bne.n	8003b68 <std+0x54>
 8003b5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b64:	f000 b966 	b.w	8003e34 <__retarget_lock_init_recursive>
 8003b68:	bd10      	pop	{r4, pc}
 8003b6a:	bf00      	nop
 8003b6c:	08003cbd 	.word	0x08003cbd
 8003b70:	08003cdf 	.word	0x08003cdf
 8003b74:	08003d17 	.word	0x08003d17
 8003b78:	08003d3b 	.word	0x08003d3b
 8003b7c:	200001e4 	.word	0x200001e4

08003b80 <stdio_exit_handler>:
 8003b80:	4a02      	ldr	r2, [pc, #8]	@ (8003b8c <stdio_exit_handler+0xc>)
 8003b82:	4903      	ldr	r1, [pc, #12]	@ (8003b90 <stdio_exit_handler+0x10>)
 8003b84:	4803      	ldr	r0, [pc, #12]	@ (8003b94 <stdio_exit_handler+0x14>)
 8003b86:	f000 b869 	b.w	8003c5c <_fwalk_sglue>
 8003b8a:	bf00      	nop
 8003b8c:	2000000c 	.word	0x2000000c
 8003b90:	080046cd 	.word	0x080046cd
 8003b94:	2000001c 	.word	0x2000001c

08003b98 <cleanup_stdio>:
 8003b98:	6841      	ldr	r1, [r0, #4]
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bcc <cleanup_stdio+0x34>)
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	4299      	cmp	r1, r3
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	d001      	beq.n	8003ba8 <cleanup_stdio+0x10>
 8003ba4:	f000 fd92 	bl	80046cc <_fflush_r>
 8003ba8:	68a1      	ldr	r1, [r4, #8]
 8003baa:	4b09      	ldr	r3, [pc, #36]	@ (8003bd0 <cleanup_stdio+0x38>)
 8003bac:	4299      	cmp	r1, r3
 8003bae:	d002      	beq.n	8003bb6 <cleanup_stdio+0x1e>
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f000 fd8b 	bl	80046cc <_fflush_r>
 8003bb6:	68e1      	ldr	r1, [r4, #12]
 8003bb8:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <cleanup_stdio+0x3c>)
 8003bba:	4299      	cmp	r1, r3
 8003bbc:	d004      	beq.n	8003bc8 <cleanup_stdio+0x30>
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bc4:	f000 bd82 	b.w	80046cc <_fflush_r>
 8003bc8:	bd10      	pop	{r4, pc}
 8003bca:	bf00      	nop
 8003bcc:	200001e4 	.word	0x200001e4
 8003bd0:	2000024c 	.word	0x2000024c
 8003bd4:	200002b4 	.word	0x200002b4

08003bd8 <global_stdio_init.part.0>:
 8003bd8:	b510      	push	{r4, lr}
 8003bda:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <global_stdio_init.part.0+0x30>)
 8003bdc:	4c0b      	ldr	r4, [pc, #44]	@ (8003c0c <global_stdio_init.part.0+0x34>)
 8003bde:	4a0c      	ldr	r2, [pc, #48]	@ (8003c10 <global_stdio_init.part.0+0x38>)
 8003be0:	4620      	mov	r0, r4
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	2104      	movs	r1, #4
 8003be6:	2200      	movs	r2, #0
 8003be8:	f7ff ff94 	bl	8003b14 <std>
 8003bec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	2109      	movs	r1, #9
 8003bf4:	f7ff ff8e 	bl	8003b14 <std>
 8003bf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c02:	2112      	movs	r1, #18
 8003c04:	f7ff bf86 	b.w	8003b14 <std>
 8003c08:	2000031c 	.word	0x2000031c
 8003c0c:	200001e4 	.word	0x200001e4
 8003c10:	08003b81 	.word	0x08003b81

08003c14 <__sfp_lock_acquire>:
 8003c14:	4801      	ldr	r0, [pc, #4]	@ (8003c1c <__sfp_lock_acquire+0x8>)
 8003c16:	f000 b90e 	b.w	8003e36 <__retarget_lock_acquire_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	20000325 	.word	0x20000325

08003c20 <__sfp_lock_release>:
 8003c20:	4801      	ldr	r0, [pc, #4]	@ (8003c28 <__sfp_lock_release+0x8>)
 8003c22:	f000 b909 	b.w	8003e38 <__retarget_lock_release_recursive>
 8003c26:	bf00      	nop
 8003c28:	20000325 	.word	0x20000325

08003c2c <__sinit>:
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	4604      	mov	r4, r0
 8003c30:	f7ff fff0 	bl	8003c14 <__sfp_lock_acquire>
 8003c34:	6a23      	ldr	r3, [r4, #32]
 8003c36:	b11b      	cbz	r3, 8003c40 <__sinit+0x14>
 8003c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c3c:	f7ff bff0 	b.w	8003c20 <__sfp_lock_release>
 8003c40:	4b04      	ldr	r3, [pc, #16]	@ (8003c54 <__sinit+0x28>)
 8003c42:	6223      	str	r3, [r4, #32]
 8003c44:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <__sinit+0x2c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f5      	bne.n	8003c38 <__sinit+0xc>
 8003c4c:	f7ff ffc4 	bl	8003bd8 <global_stdio_init.part.0>
 8003c50:	e7f2      	b.n	8003c38 <__sinit+0xc>
 8003c52:	bf00      	nop
 8003c54:	08003b99 	.word	0x08003b99
 8003c58:	2000031c 	.word	0x2000031c

08003c5c <_fwalk_sglue>:
 8003c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c60:	4607      	mov	r7, r0
 8003c62:	4688      	mov	r8, r1
 8003c64:	4614      	mov	r4, r2
 8003c66:	2600      	movs	r6, #0
 8003c68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c6c:	f1b9 0901 	subs.w	r9, r9, #1
 8003c70:	d505      	bpl.n	8003c7e <_fwalk_sglue+0x22>
 8003c72:	6824      	ldr	r4, [r4, #0]
 8003c74:	2c00      	cmp	r4, #0
 8003c76:	d1f7      	bne.n	8003c68 <_fwalk_sglue+0xc>
 8003c78:	4630      	mov	r0, r6
 8003c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c7e:	89ab      	ldrh	r3, [r5, #12]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d907      	bls.n	8003c94 <_fwalk_sglue+0x38>
 8003c84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	d003      	beq.n	8003c94 <_fwalk_sglue+0x38>
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	4638      	mov	r0, r7
 8003c90:	47c0      	blx	r8
 8003c92:	4306      	orrs	r6, r0
 8003c94:	3568      	adds	r5, #104	@ 0x68
 8003c96:	e7e9      	b.n	8003c6c <_fwalk_sglue+0x10>

08003c98 <iprintf>:
 8003c98:	b40f      	push	{r0, r1, r2, r3}
 8003c9a:	b507      	push	{r0, r1, r2, lr}
 8003c9c:	4906      	ldr	r1, [pc, #24]	@ (8003cb8 <iprintf+0x20>)
 8003c9e:	ab04      	add	r3, sp, #16
 8003ca0:	6808      	ldr	r0, [r1, #0]
 8003ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ca6:	6881      	ldr	r1, [r0, #8]
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	f000 f9e5 	bl	8004078 <_vfiprintf_r>
 8003cae:	b003      	add	sp, #12
 8003cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cb4:	b004      	add	sp, #16
 8003cb6:	4770      	bx	lr
 8003cb8:	20000018 	.word	0x20000018

08003cbc <__sread>:
 8003cbc:	b510      	push	{r4, lr}
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cc4:	f000 f868 	bl	8003d98 <_read_r>
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	bfab      	itete	ge
 8003ccc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003cce:	89a3      	ldrhlt	r3, [r4, #12]
 8003cd0:	181b      	addge	r3, r3, r0
 8003cd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003cd6:	bfac      	ite	ge
 8003cd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003cda:	81a3      	strhlt	r3, [r4, #12]
 8003cdc:	bd10      	pop	{r4, pc}

08003cde <__swrite>:
 8003cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce2:	461f      	mov	r7, r3
 8003ce4:	898b      	ldrh	r3, [r1, #12]
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	05db      	lsls	r3, r3, #23
 8003cea:	460c      	mov	r4, r1
 8003cec:	4616      	mov	r6, r2
 8003cee:	d505      	bpl.n	8003cfc <__swrite+0x1e>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf8:	f000 f83c 	bl	8003d74 <_lseek_r>
 8003cfc:	89a3      	ldrh	r3, [r4, #12]
 8003cfe:	4632      	mov	r2, r6
 8003d00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	4628      	mov	r0, r5
 8003d08:	463b      	mov	r3, r7
 8003d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d12:	f000 b853 	b.w	8003dbc <_write_r>

08003d16 <__sseek>:
 8003d16:	b510      	push	{r4, lr}
 8003d18:	460c      	mov	r4, r1
 8003d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d1e:	f000 f829 	bl	8003d74 <_lseek_r>
 8003d22:	1c43      	adds	r3, r0, #1
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	bf15      	itete	ne
 8003d28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d32:	81a3      	strheq	r3, [r4, #12]
 8003d34:	bf18      	it	ne
 8003d36:	81a3      	strhne	r3, [r4, #12]
 8003d38:	bd10      	pop	{r4, pc}

08003d3a <__sclose>:
 8003d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d3e:	f000 b809 	b.w	8003d54 <_close_r>

08003d42 <memset>:
 8003d42:	4603      	mov	r3, r0
 8003d44:	4402      	add	r2, r0
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d100      	bne.n	8003d4c <memset+0xa>
 8003d4a:	4770      	bx	lr
 8003d4c:	f803 1b01 	strb.w	r1, [r3], #1
 8003d50:	e7f9      	b.n	8003d46 <memset+0x4>
	...

08003d54 <_close_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	2300      	movs	r3, #0
 8003d58:	4d05      	ldr	r5, [pc, #20]	@ (8003d70 <_close_r+0x1c>)
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	f7fd fb35 	bl	80013ce <_close>
 8003d64:	1c43      	adds	r3, r0, #1
 8003d66:	d102      	bne.n	8003d6e <_close_r+0x1a>
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	b103      	cbz	r3, 8003d6e <_close_r+0x1a>
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	bd38      	pop	{r3, r4, r5, pc}
 8003d70:	20000320 	.word	0x20000320

08003d74 <_lseek_r>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4604      	mov	r4, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	4d05      	ldr	r5, [pc, #20]	@ (8003d94 <_lseek_r+0x20>)
 8003d80:	602a      	str	r2, [r5, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f7fd fb47 	bl	8001416 <_lseek>
 8003d88:	1c43      	adds	r3, r0, #1
 8003d8a:	d102      	bne.n	8003d92 <_lseek_r+0x1e>
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	b103      	cbz	r3, 8003d92 <_lseek_r+0x1e>
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	bd38      	pop	{r3, r4, r5, pc}
 8003d94:	20000320 	.word	0x20000320

08003d98 <_read_r>:
 8003d98:	b538      	push	{r3, r4, r5, lr}
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	4611      	mov	r1, r2
 8003da0:	2200      	movs	r2, #0
 8003da2:	4d05      	ldr	r5, [pc, #20]	@ (8003db8 <_read_r+0x20>)
 8003da4:	602a      	str	r2, [r5, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f7fd fad8 	bl	800135c <_read>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d102      	bne.n	8003db6 <_read_r+0x1e>
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	b103      	cbz	r3, 8003db6 <_read_r+0x1e>
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
 8003db8:	20000320 	.word	0x20000320

08003dbc <_write_r>:
 8003dbc:	b538      	push	{r3, r4, r5, lr}
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	4d05      	ldr	r5, [pc, #20]	@ (8003ddc <_write_r+0x20>)
 8003dc8:	602a      	str	r2, [r5, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f7fd fae3 	bl	8001396 <_write>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d102      	bne.n	8003dda <_write_r+0x1e>
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	b103      	cbz	r3, 8003dda <_write_r+0x1e>
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	bd38      	pop	{r3, r4, r5, pc}
 8003ddc:	20000320 	.word	0x20000320

08003de0 <__errno>:
 8003de0:	4b01      	ldr	r3, [pc, #4]	@ (8003de8 <__errno+0x8>)
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000018 	.word	0x20000018

08003dec <__libc_init_array>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	2600      	movs	r6, #0
 8003df0:	4d0c      	ldr	r5, [pc, #48]	@ (8003e24 <__libc_init_array+0x38>)
 8003df2:	4c0d      	ldr	r4, [pc, #52]	@ (8003e28 <__libc_init_array+0x3c>)
 8003df4:	1b64      	subs	r4, r4, r5
 8003df6:	10a4      	asrs	r4, r4, #2
 8003df8:	42a6      	cmp	r6, r4
 8003dfa:	d109      	bne.n	8003e10 <__libc_init_array+0x24>
 8003dfc:	f000 fdc4 	bl	8004988 <_init>
 8003e00:	2600      	movs	r6, #0
 8003e02:	4d0a      	ldr	r5, [pc, #40]	@ (8003e2c <__libc_init_array+0x40>)
 8003e04:	4c0a      	ldr	r4, [pc, #40]	@ (8003e30 <__libc_init_array+0x44>)
 8003e06:	1b64      	subs	r4, r4, r5
 8003e08:	10a4      	asrs	r4, r4, #2
 8003e0a:	42a6      	cmp	r6, r4
 8003e0c:	d105      	bne.n	8003e1a <__libc_init_array+0x2e>
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e14:	4798      	blx	r3
 8003e16:	3601      	adds	r6, #1
 8003e18:	e7ee      	b.n	8003df8 <__libc_init_array+0xc>
 8003e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e1e:	4798      	blx	r3
 8003e20:	3601      	adds	r6, #1
 8003e22:	e7f2      	b.n	8003e0a <__libc_init_array+0x1e>
 8003e24:	080050d8 	.word	0x080050d8
 8003e28:	080050d8 	.word	0x080050d8
 8003e2c:	080050d8 	.word	0x080050d8
 8003e30:	080050dc 	.word	0x080050dc

08003e34 <__retarget_lock_init_recursive>:
 8003e34:	4770      	bx	lr

08003e36 <__retarget_lock_acquire_recursive>:
 8003e36:	4770      	bx	lr

08003e38 <__retarget_lock_release_recursive>:
 8003e38:	4770      	bx	lr
	...

08003e3c <_free_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	4605      	mov	r5, r0
 8003e40:	2900      	cmp	r1, #0
 8003e42:	d040      	beq.n	8003ec6 <_free_r+0x8a>
 8003e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e48:	1f0c      	subs	r4, r1, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bfb8      	it	lt
 8003e4e:	18e4      	addlt	r4, r4, r3
 8003e50:	f000 f8de 	bl	8004010 <__malloc_lock>
 8003e54:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec8 <_free_r+0x8c>)
 8003e56:	6813      	ldr	r3, [r2, #0]
 8003e58:	b933      	cbnz	r3, 8003e68 <_free_r+0x2c>
 8003e5a:	6063      	str	r3, [r4, #4]
 8003e5c:	6014      	str	r4, [r2, #0]
 8003e5e:	4628      	mov	r0, r5
 8003e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e64:	f000 b8da 	b.w	800401c <__malloc_unlock>
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	d908      	bls.n	8003e7e <_free_r+0x42>
 8003e6c:	6820      	ldr	r0, [r4, #0]
 8003e6e:	1821      	adds	r1, r4, r0
 8003e70:	428b      	cmp	r3, r1
 8003e72:	bf01      	itttt	eq
 8003e74:	6819      	ldreq	r1, [r3, #0]
 8003e76:	685b      	ldreq	r3, [r3, #4]
 8003e78:	1809      	addeq	r1, r1, r0
 8003e7a:	6021      	streq	r1, [r4, #0]
 8003e7c:	e7ed      	b.n	8003e5a <_free_r+0x1e>
 8003e7e:	461a      	mov	r2, r3
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	b10b      	cbz	r3, 8003e88 <_free_r+0x4c>
 8003e84:	42a3      	cmp	r3, r4
 8003e86:	d9fa      	bls.n	8003e7e <_free_r+0x42>
 8003e88:	6811      	ldr	r1, [r2, #0]
 8003e8a:	1850      	adds	r0, r2, r1
 8003e8c:	42a0      	cmp	r0, r4
 8003e8e:	d10b      	bne.n	8003ea8 <_free_r+0x6c>
 8003e90:	6820      	ldr	r0, [r4, #0]
 8003e92:	4401      	add	r1, r0
 8003e94:	1850      	adds	r0, r2, r1
 8003e96:	4283      	cmp	r3, r0
 8003e98:	6011      	str	r1, [r2, #0]
 8003e9a:	d1e0      	bne.n	8003e5e <_free_r+0x22>
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4408      	add	r0, r1
 8003ea2:	6010      	str	r0, [r2, #0]
 8003ea4:	6053      	str	r3, [r2, #4]
 8003ea6:	e7da      	b.n	8003e5e <_free_r+0x22>
 8003ea8:	d902      	bls.n	8003eb0 <_free_r+0x74>
 8003eaa:	230c      	movs	r3, #12
 8003eac:	602b      	str	r3, [r5, #0]
 8003eae:	e7d6      	b.n	8003e5e <_free_r+0x22>
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	1821      	adds	r1, r4, r0
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	bf01      	itttt	eq
 8003eb8:	6819      	ldreq	r1, [r3, #0]
 8003eba:	685b      	ldreq	r3, [r3, #4]
 8003ebc:	1809      	addeq	r1, r1, r0
 8003ebe:	6021      	streq	r1, [r4, #0]
 8003ec0:	6063      	str	r3, [r4, #4]
 8003ec2:	6054      	str	r4, [r2, #4]
 8003ec4:	e7cb      	b.n	8003e5e <_free_r+0x22>
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	2000032c 	.word	0x2000032c

08003ecc <sbrk_aligned>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	4e0f      	ldr	r6, [pc, #60]	@ (8003f0c <sbrk_aligned+0x40>)
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	6831      	ldr	r1, [r6, #0]
 8003ed4:	4605      	mov	r5, r0
 8003ed6:	b911      	cbnz	r1, 8003ede <sbrk_aligned+0x12>
 8003ed8:	f000 fcb4 	bl	8004844 <_sbrk_r>
 8003edc:	6030      	str	r0, [r6, #0]
 8003ede:	4621      	mov	r1, r4
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f000 fcaf 	bl	8004844 <_sbrk_r>
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	d103      	bne.n	8003ef2 <sbrk_aligned+0x26>
 8003eea:	f04f 34ff 	mov.w	r4, #4294967295
 8003eee:	4620      	mov	r0, r4
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
 8003ef2:	1cc4      	adds	r4, r0, #3
 8003ef4:	f024 0403 	bic.w	r4, r4, #3
 8003ef8:	42a0      	cmp	r0, r4
 8003efa:	d0f8      	beq.n	8003eee <sbrk_aligned+0x22>
 8003efc:	1a21      	subs	r1, r4, r0
 8003efe:	4628      	mov	r0, r5
 8003f00:	f000 fca0 	bl	8004844 <_sbrk_r>
 8003f04:	3001      	adds	r0, #1
 8003f06:	d1f2      	bne.n	8003eee <sbrk_aligned+0x22>
 8003f08:	e7ef      	b.n	8003eea <sbrk_aligned+0x1e>
 8003f0a:	bf00      	nop
 8003f0c:	20000328 	.word	0x20000328

08003f10 <_malloc_r>:
 8003f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f14:	1ccd      	adds	r5, r1, #3
 8003f16:	f025 0503 	bic.w	r5, r5, #3
 8003f1a:	3508      	adds	r5, #8
 8003f1c:	2d0c      	cmp	r5, #12
 8003f1e:	bf38      	it	cc
 8003f20:	250c      	movcc	r5, #12
 8003f22:	2d00      	cmp	r5, #0
 8003f24:	4606      	mov	r6, r0
 8003f26:	db01      	blt.n	8003f2c <_malloc_r+0x1c>
 8003f28:	42a9      	cmp	r1, r5
 8003f2a:	d904      	bls.n	8003f36 <_malloc_r+0x26>
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	6033      	str	r3, [r6, #0]
 8003f30:	2000      	movs	r0, #0
 8003f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800400c <_malloc_r+0xfc>
 8003f3a:	f000 f869 	bl	8004010 <__malloc_lock>
 8003f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f42:	461c      	mov	r4, r3
 8003f44:	bb44      	cbnz	r4, 8003f98 <_malloc_r+0x88>
 8003f46:	4629      	mov	r1, r5
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f7ff ffbf 	bl	8003ecc <sbrk_aligned>
 8003f4e:	1c43      	adds	r3, r0, #1
 8003f50:	4604      	mov	r4, r0
 8003f52:	d158      	bne.n	8004006 <_malloc_r+0xf6>
 8003f54:	f8d8 4000 	ldr.w	r4, [r8]
 8003f58:	4627      	mov	r7, r4
 8003f5a:	2f00      	cmp	r7, #0
 8003f5c:	d143      	bne.n	8003fe6 <_malloc_r+0xd6>
 8003f5e:	2c00      	cmp	r4, #0
 8003f60:	d04b      	beq.n	8003ffa <_malloc_r+0xea>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	4639      	mov	r1, r7
 8003f66:	4630      	mov	r0, r6
 8003f68:	eb04 0903 	add.w	r9, r4, r3
 8003f6c:	f000 fc6a 	bl	8004844 <_sbrk_r>
 8003f70:	4581      	cmp	r9, r0
 8003f72:	d142      	bne.n	8003ffa <_malloc_r+0xea>
 8003f74:	6821      	ldr	r1, [r4, #0]
 8003f76:	4630      	mov	r0, r6
 8003f78:	1a6d      	subs	r5, r5, r1
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	f7ff ffa6 	bl	8003ecc <sbrk_aligned>
 8003f80:	3001      	adds	r0, #1
 8003f82:	d03a      	beq.n	8003ffa <_malloc_r+0xea>
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	442b      	add	r3, r5
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	bb62      	cbnz	r2, 8003fec <_malloc_r+0xdc>
 8003f92:	f8c8 7000 	str.w	r7, [r8]
 8003f96:	e00f      	b.n	8003fb8 <_malloc_r+0xa8>
 8003f98:	6822      	ldr	r2, [r4, #0]
 8003f9a:	1b52      	subs	r2, r2, r5
 8003f9c:	d420      	bmi.n	8003fe0 <_malloc_r+0xd0>
 8003f9e:	2a0b      	cmp	r2, #11
 8003fa0:	d917      	bls.n	8003fd2 <_malloc_r+0xc2>
 8003fa2:	1961      	adds	r1, r4, r5
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	6025      	str	r5, [r4, #0]
 8003fa8:	bf18      	it	ne
 8003faa:	6059      	strne	r1, [r3, #4]
 8003fac:	6863      	ldr	r3, [r4, #4]
 8003fae:	bf08      	it	eq
 8003fb0:	f8c8 1000 	streq.w	r1, [r8]
 8003fb4:	5162      	str	r2, [r4, r5]
 8003fb6:	604b      	str	r3, [r1, #4]
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 f82f 	bl	800401c <__malloc_unlock>
 8003fbe:	f104 000b 	add.w	r0, r4, #11
 8003fc2:	1d23      	adds	r3, r4, #4
 8003fc4:	f020 0007 	bic.w	r0, r0, #7
 8003fc8:	1ac2      	subs	r2, r0, r3
 8003fca:	bf1c      	itt	ne
 8003fcc:	1a1b      	subne	r3, r3, r0
 8003fce:	50a3      	strne	r3, [r4, r2]
 8003fd0:	e7af      	b.n	8003f32 <_malloc_r+0x22>
 8003fd2:	6862      	ldr	r2, [r4, #4]
 8003fd4:	42a3      	cmp	r3, r4
 8003fd6:	bf0c      	ite	eq
 8003fd8:	f8c8 2000 	streq.w	r2, [r8]
 8003fdc:	605a      	strne	r2, [r3, #4]
 8003fde:	e7eb      	b.n	8003fb8 <_malloc_r+0xa8>
 8003fe0:	4623      	mov	r3, r4
 8003fe2:	6864      	ldr	r4, [r4, #4]
 8003fe4:	e7ae      	b.n	8003f44 <_malloc_r+0x34>
 8003fe6:	463c      	mov	r4, r7
 8003fe8:	687f      	ldr	r7, [r7, #4]
 8003fea:	e7b6      	b.n	8003f5a <_malloc_r+0x4a>
 8003fec:	461a      	mov	r2, r3
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	42a3      	cmp	r3, r4
 8003ff2:	d1fb      	bne.n	8003fec <_malloc_r+0xdc>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	6053      	str	r3, [r2, #4]
 8003ff8:	e7de      	b.n	8003fb8 <_malloc_r+0xa8>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	6033      	str	r3, [r6, #0]
 8004000:	f000 f80c 	bl	800401c <__malloc_unlock>
 8004004:	e794      	b.n	8003f30 <_malloc_r+0x20>
 8004006:	6005      	str	r5, [r0, #0]
 8004008:	e7d6      	b.n	8003fb8 <_malloc_r+0xa8>
 800400a:	bf00      	nop
 800400c:	2000032c 	.word	0x2000032c

08004010 <__malloc_lock>:
 8004010:	4801      	ldr	r0, [pc, #4]	@ (8004018 <__malloc_lock+0x8>)
 8004012:	f7ff bf10 	b.w	8003e36 <__retarget_lock_acquire_recursive>
 8004016:	bf00      	nop
 8004018:	20000324 	.word	0x20000324

0800401c <__malloc_unlock>:
 800401c:	4801      	ldr	r0, [pc, #4]	@ (8004024 <__malloc_unlock+0x8>)
 800401e:	f7ff bf0b 	b.w	8003e38 <__retarget_lock_release_recursive>
 8004022:	bf00      	nop
 8004024:	20000324 	.word	0x20000324

08004028 <__sfputc_r>:
 8004028:	6893      	ldr	r3, [r2, #8]
 800402a:	b410      	push	{r4}
 800402c:	3b01      	subs	r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	6093      	str	r3, [r2, #8]
 8004032:	da07      	bge.n	8004044 <__sfputc_r+0x1c>
 8004034:	6994      	ldr	r4, [r2, #24]
 8004036:	42a3      	cmp	r3, r4
 8004038:	db01      	blt.n	800403e <__sfputc_r+0x16>
 800403a:	290a      	cmp	r1, #10
 800403c:	d102      	bne.n	8004044 <__sfputc_r+0x1c>
 800403e:	bc10      	pop	{r4}
 8004040:	f000 bb6c 	b.w	800471c <__swbuf_r>
 8004044:	6813      	ldr	r3, [r2, #0]
 8004046:	1c58      	adds	r0, r3, #1
 8004048:	6010      	str	r0, [r2, #0]
 800404a:	7019      	strb	r1, [r3, #0]
 800404c:	4608      	mov	r0, r1
 800404e:	bc10      	pop	{r4}
 8004050:	4770      	bx	lr

08004052 <__sfputs_r>:
 8004052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004054:	4606      	mov	r6, r0
 8004056:	460f      	mov	r7, r1
 8004058:	4614      	mov	r4, r2
 800405a:	18d5      	adds	r5, r2, r3
 800405c:	42ac      	cmp	r4, r5
 800405e:	d101      	bne.n	8004064 <__sfputs_r+0x12>
 8004060:	2000      	movs	r0, #0
 8004062:	e007      	b.n	8004074 <__sfputs_r+0x22>
 8004064:	463a      	mov	r2, r7
 8004066:	4630      	mov	r0, r6
 8004068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800406c:	f7ff ffdc 	bl	8004028 <__sfputc_r>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d1f3      	bne.n	800405c <__sfputs_r+0xa>
 8004074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004078 <_vfiprintf_r>:
 8004078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407c:	460d      	mov	r5, r1
 800407e:	4614      	mov	r4, r2
 8004080:	4698      	mov	r8, r3
 8004082:	4606      	mov	r6, r0
 8004084:	b09d      	sub	sp, #116	@ 0x74
 8004086:	b118      	cbz	r0, 8004090 <_vfiprintf_r+0x18>
 8004088:	6a03      	ldr	r3, [r0, #32]
 800408a:	b90b      	cbnz	r3, 8004090 <_vfiprintf_r+0x18>
 800408c:	f7ff fdce 	bl	8003c2c <__sinit>
 8004090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004092:	07d9      	lsls	r1, r3, #31
 8004094:	d405      	bmi.n	80040a2 <_vfiprintf_r+0x2a>
 8004096:	89ab      	ldrh	r3, [r5, #12]
 8004098:	059a      	lsls	r2, r3, #22
 800409a:	d402      	bmi.n	80040a2 <_vfiprintf_r+0x2a>
 800409c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800409e:	f7ff feca 	bl	8003e36 <__retarget_lock_acquire_recursive>
 80040a2:	89ab      	ldrh	r3, [r5, #12]
 80040a4:	071b      	lsls	r3, r3, #28
 80040a6:	d501      	bpl.n	80040ac <_vfiprintf_r+0x34>
 80040a8:	692b      	ldr	r3, [r5, #16]
 80040aa:	b99b      	cbnz	r3, 80040d4 <_vfiprintf_r+0x5c>
 80040ac:	4629      	mov	r1, r5
 80040ae:	4630      	mov	r0, r6
 80040b0:	f000 fb72 	bl	8004798 <__swsetup_r>
 80040b4:	b170      	cbz	r0, 80040d4 <_vfiprintf_r+0x5c>
 80040b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040b8:	07dc      	lsls	r4, r3, #31
 80040ba:	d504      	bpl.n	80040c6 <_vfiprintf_r+0x4e>
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295
 80040c0:	b01d      	add	sp, #116	@ 0x74
 80040c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c6:	89ab      	ldrh	r3, [r5, #12]
 80040c8:	0598      	lsls	r0, r3, #22
 80040ca:	d4f7      	bmi.n	80040bc <_vfiprintf_r+0x44>
 80040cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040ce:	f7ff feb3 	bl	8003e38 <__retarget_lock_release_recursive>
 80040d2:	e7f3      	b.n	80040bc <_vfiprintf_r+0x44>
 80040d4:	2300      	movs	r3, #0
 80040d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80040d8:	2320      	movs	r3, #32
 80040da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040de:	2330      	movs	r3, #48	@ 0x30
 80040e0:	f04f 0901 	mov.w	r9, #1
 80040e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80040e8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004294 <_vfiprintf_r+0x21c>
 80040ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040f0:	4623      	mov	r3, r4
 80040f2:	469a      	mov	sl, r3
 80040f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040f8:	b10a      	cbz	r2, 80040fe <_vfiprintf_r+0x86>
 80040fa:	2a25      	cmp	r2, #37	@ 0x25
 80040fc:	d1f9      	bne.n	80040f2 <_vfiprintf_r+0x7a>
 80040fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004102:	d00b      	beq.n	800411c <_vfiprintf_r+0xa4>
 8004104:	465b      	mov	r3, fp
 8004106:	4622      	mov	r2, r4
 8004108:	4629      	mov	r1, r5
 800410a:	4630      	mov	r0, r6
 800410c:	f7ff ffa1 	bl	8004052 <__sfputs_r>
 8004110:	3001      	adds	r0, #1
 8004112:	f000 80a7 	beq.w	8004264 <_vfiprintf_r+0x1ec>
 8004116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004118:	445a      	add	r2, fp
 800411a:	9209      	str	r2, [sp, #36]	@ 0x24
 800411c:	f89a 3000 	ldrb.w	r3, [sl]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 809f 	beq.w	8004264 <_vfiprintf_r+0x1ec>
 8004126:	2300      	movs	r3, #0
 8004128:	f04f 32ff 	mov.w	r2, #4294967295
 800412c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004130:	f10a 0a01 	add.w	sl, sl, #1
 8004134:	9304      	str	r3, [sp, #16]
 8004136:	9307      	str	r3, [sp, #28]
 8004138:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800413c:	931a      	str	r3, [sp, #104]	@ 0x68
 800413e:	4654      	mov	r4, sl
 8004140:	2205      	movs	r2, #5
 8004142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004146:	4853      	ldr	r0, [pc, #332]	@ (8004294 <_vfiprintf_r+0x21c>)
 8004148:	f000 fb8c 	bl	8004864 <memchr>
 800414c:	9a04      	ldr	r2, [sp, #16]
 800414e:	b9d8      	cbnz	r0, 8004188 <_vfiprintf_r+0x110>
 8004150:	06d1      	lsls	r1, r2, #27
 8004152:	bf44      	itt	mi
 8004154:	2320      	movmi	r3, #32
 8004156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800415a:	0713      	lsls	r3, r2, #28
 800415c:	bf44      	itt	mi
 800415e:	232b      	movmi	r3, #43	@ 0x2b
 8004160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004164:	f89a 3000 	ldrb.w	r3, [sl]
 8004168:	2b2a      	cmp	r3, #42	@ 0x2a
 800416a:	d015      	beq.n	8004198 <_vfiprintf_r+0x120>
 800416c:	4654      	mov	r4, sl
 800416e:	2000      	movs	r0, #0
 8004170:	f04f 0c0a 	mov.w	ip, #10
 8004174:	9a07      	ldr	r2, [sp, #28]
 8004176:	4621      	mov	r1, r4
 8004178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800417c:	3b30      	subs	r3, #48	@ 0x30
 800417e:	2b09      	cmp	r3, #9
 8004180:	d94b      	bls.n	800421a <_vfiprintf_r+0x1a2>
 8004182:	b1b0      	cbz	r0, 80041b2 <_vfiprintf_r+0x13a>
 8004184:	9207      	str	r2, [sp, #28]
 8004186:	e014      	b.n	80041b2 <_vfiprintf_r+0x13a>
 8004188:	eba0 0308 	sub.w	r3, r0, r8
 800418c:	fa09 f303 	lsl.w	r3, r9, r3
 8004190:	4313      	orrs	r3, r2
 8004192:	46a2      	mov	sl, r4
 8004194:	9304      	str	r3, [sp, #16]
 8004196:	e7d2      	b.n	800413e <_vfiprintf_r+0xc6>
 8004198:	9b03      	ldr	r3, [sp, #12]
 800419a:	1d19      	adds	r1, r3, #4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	9103      	str	r1, [sp, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bfbb      	ittet	lt
 80041a4:	425b      	neglt	r3, r3
 80041a6:	f042 0202 	orrlt.w	r2, r2, #2
 80041aa:	9307      	strge	r3, [sp, #28]
 80041ac:	9307      	strlt	r3, [sp, #28]
 80041ae:	bfb8      	it	lt
 80041b0:	9204      	strlt	r2, [sp, #16]
 80041b2:	7823      	ldrb	r3, [r4, #0]
 80041b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80041b6:	d10a      	bne.n	80041ce <_vfiprintf_r+0x156>
 80041b8:	7863      	ldrb	r3, [r4, #1]
 80041ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80041bc:	d132      	bne.n	8004224 <_vfiprintf_r+0x1ac>
 80041be:	9b03      	ldr	r3, [sp, #12]
 80041c0:	3402      	adds	r4, #2
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	9203      	str	r2, [sp, #12]
 80041c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041cc:	9305      	str	r3, [sp, #20]
 80041ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004298 <_vfiprintf_r+0x220>
 80041d2:	2203      	movs	r2, #3
 80041d4:	4650      	mov	r0, sl
 80041d6:	7821      	ldrb	r1, [r4, #0]
 80041d8:	f000 fb44 	bl	8004864 <memchr>
 80041dc:	b138      	cbz	r0, 80041ee <_vfiprintf_r+0x176>
 80041de:	2240      	movs	r2, #64	@ 0x40
 80041e0:	9b04      	ldr	r3, [sp, #16]
 80041e2:	eba0 000a 	sub.w	r0, r0, sl
 80041e6:	4082      	lsls	r2, r0
 80041e8:	4313      	orrs	r3, r2
 80041ea:	3401      	adds	r4, #1
 80041ec:	9304      	str	r3, [sp, #16]
 80041ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f2:	2206      	movs	r2, #6
 80041f4:	4829      	ldr	r0, [pc, #164]	@ (800429c <_vfiprintf_r+0x224>)
 80041f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041fa:	f000 fb33 	bl	8004864 <memchr>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d03f      	beq.n	8004282 <_vfiprintf_r+0x20a>
 8004202:	4b27      	ldr	r3, [pc, #156]	@ (80042a0 <_vfiprintf_r+0x228>)
 8004204:	bb1b      	cbnz	r3, 800424e <_vfiprintf_r+0x1d6>
 8004206:	9b03      	ldr	r3, [sp, #12]
 8004208:	3307      	adds	r3, #7
 800420a:	f023 0307 	bic.w	r3, r3, #7
 800420e:	3308      	adds	r3, #8
 8004210:	9303      	str	r3, [sp, #12]
 8004212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004214:	443b      	add	r3, r7
 8004216:	9309      	str	r3, [sp, #36]	@ 0x24
 8004218:	e76a      	b.n	80040f0 <_vfiprintf_r+0x78>
 800421a:	460c      	mov	r4, r1
 800421c:	2001      	movs	r0, #1
 800421e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004222:	e7a8      	b.n	8004176 <_vfiprintf_r+0xfe>
 8004224:	2300      	movs	r3, #0
 8004226:	f04f 0c0a 	mov.w	ip, #10
 800422a:	4619      	mov	r1, r3
 800422c:	3401      	adds	r4, #1
 800422e:	9305      	str	r3, [sp, #20]
 8004230:	4620      	mov	r0, r4
 8004232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004236:	3a30      	subs	r2, #48	@ 0x30
 8004238:	2a09      	cmp	r2, #9
 800423a:	d903      	bls.n	8004244 <_vfiprintf_r+0x1cc>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0c6      	beq.n	80041ce <_vfiprintf_r+0x156>
 8004240:	9105      	str	r1, [sp, #20]
 8004242:	e7c4      	b.n	80041ce <_vfiprintf_r+0x156>
 8004244:	4604      	mov	r4, r0
 8004246:	2301      	movs	r3, #1
 8004248:	fb0c 2101 	mla	r1, ip, r1, r2
 800424c:	e7f0      	b.n	8004230 <_vfiprintf_r+0x1b8>
 800424e:	ab03      	add	r3, sp, #12
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	462a      	mov	r2, r5
 8004254:	4630      	mov	r0, r6
 8004256:	4b13      	ldr	r3, [pc, #76]	@ (80042a4 <_vfiprintf_r+0x22c>)
 8004258:	a904      	add	r1, sp, #16
 800425a:	f3af 8000 	nop.w
 800425e:	4607      	mov	r7, r0
 8004260:	1c78      	adds	r0, r7, #1
 8004262:	d1d6      	bne.n	8004212 <_vfiprintf_r+0x19a>
 8004264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004266:	07d9      	lsls	r1, r3, #31
 8004268:	d405      	bmi.n	8004276 <_vfiprintf_r+0x1fe>
 800426a:	89ab      	ldrh	r3, [r5, #12]
 800426c:	059a      	lsls	r2, r3, #22
 800426e:	d402      	bmi.n	8004276 <_vfiprintf_r+0x1fe>
 8004270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004272:	f7ff fde1 	bl	8003e38 <__retarget_lock_release_recursive>
 8004276:	89ab      	ldrh	r3, [r5, #12]
 8004278:	065b      	lsls	r3, r3, #25
 800427a:	f53f af1f 	bmi.w	80040bc <_vfiprintf_r+0x44>
 800427e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004280:	e71e      	b.n	80040c0 <_vfiprintf_r+0x48>
 8004282:	ab03      	add	r3, sp, #12
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	462a      	mov	r2, r5
 8004288:	4630      	mov	r0, r6
 800428a:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <_vfiprintf_r+0x22c>)
 800428c:	a904      	add	r1, sp, #16
 800428e:	f000 f87d 	bl	800438c <_printf_i>
 8004292:	e7e4      	b.n	800425e <_vfiprintf_r+0x1e6>
 8004294:	0800509b 	.word	0x0800509b
 8004298:	080050a1 	.word	0x080050a1
 800429c:	080050a5 	.word	0x080050a5
 80042a0:	00000000 	.word	0x00000000
 80042a4:	08004053 	.word	0x08004053

080042a8 <_printf_common>:
 80042a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ac:	4616      	mov	r6, r2
 80042ae:	4698      	mov	r8, r3
 80042b0:	688a      	ldr	r2, [r1, #8]
 80042b2:	690b      	ldr	r3, [r1, #16]
 80042b4:	4607      	mov	r7, r0
 80042b6:	4293      	cmp	r3, r2
 80042b8:	bfb8      	it	lt
 80042ba:	4613      	movlt	r3, r2
 80042bc:	6033      	str	r3, [r6, #0]
 80042be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042c2:	460c      	mov	r4, r1
 80042c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042c8:	b10a      	cbz	r2, 80042ce <_printf_common+0x26>
 80042ca:	3301      	adds	r3, #1
 80042cc:	6033      	str	r3, [r6, #0]
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	0699      	lsls	r1, r3, #26
 80042d2:	bf42      	ittt	mi
 80042d4:	6833      	ldrmi	r3, [r6, #0]
 80042d6:	3302      	addmi	r3, #2
 80042d8:	6033      	strmi	r3, [r6, #0]
 80042da:	6825      	ldr	r5, [r4, #0]
 80042dc:	f015 0506 	ands.w	r5, r5, #6
 80042e0:	d106      	bne.n	80042f0 <_printf_common+0x48>
 80042e2:	f104 0a19 	add.w	sl, r4, #25
 80042e6:	68e3      	ldr	r3, [r4, #12]
 80042e8:	6832      	ldr	r2, [r6, #0]
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	42ab      	cmp	r3, r5
 80042ee:	dc2b      	bgt.n	8004348 <_printf_common+0xa0>
 80042f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042f4:	6822      	ldr	r2, [r4, #0]
 80042f6:	3b00      	subs	r3, #0
 80042f8:	bf18      	it	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	0692      	lsls	r2, r2, #26
 80042fe:	d430      	bmi.n	8004362 <_printf_common+0xba>
 8004300:	4641      	mov	r1, r8
 8004302:	4638      	mov	r0, r7
 8004304:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004308:	47c8      	blx	r9
 800430a:	3001      	adds	r0, #1
 800430c:	d023      	beq.n	8004356 <_printf_common+0xae>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	6922      	ldr	r2, [r4, #16]
 8004312:	f003 0306 	and.w	r3, r3, #6
 8004316:	2b04      	cmp	r3, #4
 8004318:	bf14      	ite	ne
 800431a:	2500      	movne	r5, #0
 800431c:	6833      	ldreq	r3, [r6, #0]
 800431e:	f04f 0600 	mov.w	r6, #0
 8004322:	bf08      	it	eq
 8004324:	68e5      	ldreq	r5, [r4, #12]
 8004326:	f104 041a 	add.w	r4, r4, #26
 800432a:	bf08      	it	eq
 800432c:	1aed      	subeq	r5, r5, r3
 800432e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004332:	bf08      	it	eq
 8004334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004338:	4293      	cmp	r3, r2
 800433a:	bfc4      	itt	gt
 800433c:	1a9b      	subgt	r3, r3, r2
 800433e:	18ed      	addgt	r5, r5, r3
 8004340:	42b5      	cmp	r5, r6
 8004342:	d11a      	bne.n	800437a <_printf_common+0xd2>
 8004344:	2000      	movs	r0, #0
 8004346:	e008      	b.n	800435a <_printf_common+0xb2>
 8004348:	2301      	movs	r3, #1
 800434a:	4652      	mov	r2, sl
 800434c:	4641      	mov	r1, r8
 800434e:	4638      	mov	r0, r7
 8004350:	47c8      	blx	r9
 8004352:	3001      	adds	r0, #1
 8004354:	d103      	bne.n	800435e <_printf_common+0xb6>
 8004356:	f04f 30ff 	mov.w	r0, #4294967295
 800435a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800435e:	3501      	adds	r5, #1
 8004360:	e7c1      	b.n	80042e6 <_printf_common+0x3e>
 8004362:	2030      	movs	r0, #48	@ 0x30
 8004364:	18e1      	adds	r1, r4, r3
 8004366:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004370:	4422      	add	r2, r4
 8004372:	3302      	adds	r3, #2
 8004374:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004378:	e7c2      	b.n	8004300 <_printf_common+0x58>
 800437a:	2301      	movs	r3, #1
 800437c:	4622      	mov	r2, r4
 800437e:	4641      	mov	r1, r8
 8004380:	4638      	mov	r0, r7
 8004382:	47c8      	blx	r9
 8004384:	3001      	adds	r0, #1
 8004386:	d0e6      	beq.n	8004356 <_printf_common+0xae>
 8004388:	3601      	adds	r6, #1
 800438a:	e7d9      	b.n	8004340 <_printf_common+0x98>

0800438c <_printf_i>:
 800438c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004390:	7e0f      	ldrb	r7, [r1, #24]
 8004392:	4691      	mov	r9, r2
 8004394:	2f78      	cmp	r7, #120	@ 0x78
 8004396:	4680      	mov	r8, r0
 8004398:	460c      	mov	r4, r1
 800439a:	469a      	mov	sl, r3
 800439c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800439e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043a2:	d807      	bhi.n	80043b4 <_printf_i+0x28>
 80043a4:	2f62      	cmp	r7, #98	@ 0x62
 80043a6:	d80a      	bhi.n	80043be <_printf_i+0x32>
 80043a8:	2f00      	cmp	r7, #0
 80043aa:	f000 80d3 	beq.w	8004554 <_printf_i+0x1c8>
 80043ae:	2f58      	cmp	r7, #88	@ 0x58
 80043b0:	f000 80ba 	beq.w	8004528 <_printf_i+0x19c>
 80043b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043bc:	e03a      	b.n	8004434 <_printf_i+0xa8>
 80043be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043c2:	2b15      	cmp	r3, #21
 80043c4:	d8f6      	bhi.n	80043b4 <_printf_i+0x28>
 80043c6:	a101      	add	r1, pc, #4	@ (adr r1, 80043cc <_printf_i+0x40>)
 80043c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043cc:	08004425 	.word	0x08004425
 80043d0:	08004439 	.word	0x08004439
 80043d4:	080043b5 	.word	0x080043b5
 80043d8:	080043b5 	.word	0x080043b5
 80043dc:	080043b5 	.word	0x080043b5
 80043e0:	080043b5 	.word	0x080043b5
 80043e4:	08004439 	.word	0x08004439
 80043e8:	080043b5 	.word	0x080043b5
 80043ec:	080043b5 	.word	0x080043b5
 80043f0:	080043b5 	.word	0x080043b5
 80043f4:	080043b5 	.word	0x080043b5
 80043f8:	0800453b 	.word	0x0800453b
 80043fc:	08004463 	.word	0x08004463
 8004400:	080044f5 	.word	0x080044f5
 8004404:	080043b5 	.word	0x080043b5
 8004408:	080043b5 	.word	0x080043b5
 800440c:	0800455d 	.word	0x0800455d
 8004410:	080043b5 	.word	0x080043b5
 8004414:	08004463 	.word	0x08004463
 8004418:	080043b5 	.word	0x080043b5
 800441c:	080043b5 	.word	0x080043b5
 8004420:	080044fd 	.word	0x080044fd
 8004424:	6833      	ldr	r3, [r6, #0]
 8004426:	1d1a      	adds	r2, r3, #4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6032      	str	r2, [r6, #0]
 800442c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004430:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004434:	2301      	movs	r3, #1
 8004436:	e09e      	b.n	8004576 <_printf_i+0x1ea>
 8004438:	6833      	ldr	r3, [r6, #0]
 800443a:	6820      	ldr	r0, [r4, #0]
 800443c:	1d19      	adds	r1, r3, #4
 800443e:	6031      	str	r1, [r6, #0]
 8004440:	0606      	lsls	r6, r0, #24
 8004442:	d501      	bpl.n	8004448 <_printf_i+0xbc>
 8004444:	681d      	ldr	r5, [r3, #0]
 8004446:	e003      	b.n	8004450 <_printf_i+0xc4>
 8004448:	0645      	lsls	r5, r0, #25
 800444a:	d5fb      	bpl.n	8004444 <_printf_i+0xb8>
 800444c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004450:	2d00      	cmp	r5, #0
 8004452:	da03      	bge.n	800445c <_printf_i+0xd0>
 8004454:	232d      	movs	r3, #45	@ 0x2d
 8004456:	426d      	negs	r5, r5
 8004458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800445c:	230a      	movs	r3, #10
 800445e:	4859      	ldr	r0, [pc, #356]	@ (80045c4 <_printf_i+0x238>)
 8004460:	e011      	b.n	8004486 <_printf_i+0xfa>
 8004462:	6821      	ldr	r1, [r4, #0]
 8004464:	6833      	ldr	r3, [r6, #0]
 8004466:	0608      	lsls	r0, r1, #24
 8004468:	f853 5b04 	ldr.w	r5, [r3], #4
 800446c:	d402      	bmi.n	8004474 <_printf_i+0xe8>
 800446e:	0649      	lsls	r1, r1, #25
 8004470:	bf48      	it	mi
 8004472:	b2ad      	uxthmi	r5, r5
 8004474:	2f6f      	cmp	r7, #111	@ 0x6f
 8004476:	6033      	str	r3, [r6, #0]
 8004478:	bf14      	ite	ne
 800447a:	230a      	movne	r3, #10
 800447c:	2308      	moveq	r3, #8
 800447e:	4851      	ldr	r0, [pc, #324]	@ (80045c4 <_printf_i+0x238>)
 8004480:	2100      	movs	r1, #0
 8004482:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004486:	6866      	ldr	r6, [r4, #4]
 8004488:	2e00      	cmp	r6, #0
 800448a:	bfa8      	it	ge
 800448c:	6821      	ldrge	r1, [r4, #0]
 800448e:	60a6      	str	r6, [r4, #8]
 8004490:	bfa4      	itt	ge
 8004492:	f021 0104 	bicge.w	r1, r1, #4
 8004496:	6021      	strge	r1, [r4, #0]
 8004498:	b90d      	cbnz	r5, 800449e <_printf_i+0x112>
 800449a:	2e00      	cmp	r6, #0
 800449c:	d04b      	beq.n	8004536 <_printf_i+0x1aa>
 800449e:	4616      	mov	r6, r2
 80044a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80044a4:	fb03 5711 	mls	r7, r3, r1, r5
 80044a8:	5dc7      	ldrb	r7, [r0, r7]
 80044aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044ae:	462f      	mov	r7, r5
 80044b0:	42bb      	cmp	r3, r7
 80044b2:	460d      	mov	r5, r1
 80044b4:	d9f4      	bls.n	80044a0 <_printf_i+0x114>
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d10b      	bne.n	80044d2 <_printf_i+0x146>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	07df      	lsls	r7, r3, #31
 80044be:	d508      	bpl.n	80044d2 <_printf_i+0x146>
 80044c0:	6923      	ldr	r3, [r4, #16]
 80044c2:	6861      	ldr	r1, [r4, #4]
 80044c4:	4299      	cmp	r1, r3
 80044c6:	bfde      	ittt	le
 80044c8:	2330      	movle	r3, #48	@ 0x30
 80044ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044d2:	1b92      	subs	r2, r2, r6
 80044d4:	6122      	str	r2, [r4, #16]
 80044d6:	464b      	mov	r3, r9
 80044d8:	4621      	mov	r1, r4
 80044da:	4640      	mov	r0, r8
 80044dc:	f8cd a000 	str.w	sl, [sp]
 80044e0:	aa03      	add	r2, sp, #12
 80044e2:	f7ff fee1 	bl	80042a8 <_printf_common>
 80044e6:	3001      	adds	r0, #1
 80044e8:	d14a      	bne.n	8004580 <_printf_i+0x1f4>
 80044ea:	f04f 30ff 	mov.w	r0, #4294967295
 80044ee:	b004      	add	sp, #16
 80044f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	f043 0320 	orr.w	r3, r3, #32
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	2778      	movs	r7, #120	@ 0x78
 80044fe:	4832      	ldr	r0, [pc, #200]	@ (80045c8 <_printf_i+0x23c>)
 8004500:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	6831      	ldr	r1, [r6, #0]
 8004508:	061f      	lsls	r7, r3, #24
 800450a:	f851 5b04 	ldr.w	r5, [r1], #4
 800450e:	d402      	bmi.n	8004516 <_printf_i+0x18a>
 8004510:	065f      	lsls	r7, r3, #25
 8004512:	bf48      	it	mi
 8004514:	b2ad      	uxthmi	r5, r5
 8004516:	6031      	str	r1, [r6, #0]
 8004518:	07d9      	lsls	r1, r3, #31
 800451a:	bf44      	itt	mi
 800451c:	f043 0320 	orrmi.w	r3, r3, #32
 8004520:	6023      	strmi	r3, [r4, #0]
 8004522:	b11d      	cbz	r5, 800452c <_printf_i+0x1a0>
 8004524:	2310      	movs	r3, #16
 8004526:	e7ab      	b.n	8004480 <_printf_i+0xf4>
 8004528:	4826      	ldr	r0, [pc, #152]	@ (80045c4 <_printf_i+0x238>)
 800452a:	e7e9      	b.n	8004500 <_printf_i+0x174>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	f023 0320 	bic.w	r3, r3, #32
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	e7f6      	b.n	8004524 <_printf_i+0x198>
 8004536:	4616      	mov	r6, r2
 8004538:	e7bd      	b.n	80044b6 <_printf_i+0x12a>
 800453a:	6833      	ldr	r3, [r6, #0]
 800453c:	6825      	ldr	r5, [r4, #0]
 800453e:	1d18      	adds	r0, r3, #4
 8004540:	6961      	ldr	r1, [r4, #20]
 8004542:	6030      	str	r0, [r6, #0]
 8004544:	062e      	lsls	r6, r5, #24
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	d501      	bpl.n	800454e <_printf_i+0x1c2>
 800454a:	6019      	str	r1, [r3, #0]
 800454c:	e002      	b.n	8004554 <_printf_i+0x1c8>
 800454e:	0668      	lsls	r0, r5, #25
 8004550:	d5fb      	bpl.n	800454a <_printf_i+0x1be>
 8004552:	8019      	strh	r1, [r3, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	4616      	mov	r6, r2
 8004558:	6123      	str	r3, [r4, #16]
 800455a:	e7bc      	b.n	80044d6 <_printf_i+0x14a>
 800455c:	6833      	ldr	r3, [r6, #0]
 800455e:	2100      	movs	r1, #0
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	6032      	str	r2, [r6, #0]
 8004564:	681e      	ldr	r6, [r3, #0]
 8004566:	6862      	ldr	r2, [r4, #4]
 8004568:	4630      	mov	r0, r6
 800456a:	f000 f97b 	bl	8004864 <memchr>
 800456e:	b108      	cbz	r0, 8004574 <_printf_i+0x1e8>
 8004570:	1b80      	subs	r0, r0, r6
 8004572:	6060      	str	r0, [r4, #4]
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	6123      	str	r3, [r4, #16]
 8004578:	2300      	movs	r3, #0
 800457a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800457e:	e7aa      	b.n	80044d6 <_printf_i+0x14a>
 8004580:	4632      	mov	r2, r6
 8004582:	4649      	mov	r1, r9
 8004584:	4640      	mov	r0, r8
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	47d0      	blx	sl
 800458a:	3001      	adds	r0, #1
 800458c:	d0ad      	beq.n	80044ea <_printf_i+0x15e>
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	079b      	lsls	r3, r3, #30
 8004592:	d413      	bmi.n	80045bc <_printf_i+0x230>
 8004594:	68e0      	ldr	r0, [r4, #12]
 8004596:	9b03      	ldr	r3, [sp, #12]
 8004598:	4298      	cmp	r0, r3
 800459a:	bfb8      	it	lt
 800459c:	4618      	movlt	r0, r3
 800459e:	e7a6      	b.n	80044ee <_printf_i+0x162>
 80045a0:	2301      	movs	r3, #1
 80045a2:	4632      	mov	r2, r6
 80045a4:	4649      	mov	r1, r9
 80045a6:	4640      	mov	r0, r8
 80045a8:	47d0      	blx	sl
 80045aa:	3001      	adds	r0, #1
 80045ac:	d09d      	beq.n	80044ea <_printf_i+0x15e>
 80045ae:	3501      	adds	r5, #1
 80045b0:	68e3      	ldr	r3, [r4, #12]
 80045b2:	9903      	ldr	r1, [sp, #12]
 80045b4:	1a5b      	subs	r3, r3, r1
 80045b6:	42ab      	cmp	r3, r5
 80045b8:	dcf2      	bgt.n	80045a0 <_printf_i+0x214>
 80045ba:	e7eb      	b.n	8004594 <_printf_i+0x208>
 80045bc:	2500      	movs	r5, #0
 80045be:	f104 0619 	add.w	r6, r4, #25
 80045c2:	e7f5      	b.n	80045b0 <_printf_i+0x224>
 80045c4:	080050ac 	.word	0x080050ac
 80045c8:	080050bd 	.word	0x080050bd

080045cc <__sflush_r>:
 80045cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	0716      	lsls	r6, r2, #28
 80045d4:	4605      	mov	r5, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	d454      	bmi.n	8004684 <__sflush_r+0xb8>
 80045da:	684b      	ldr	r3, [r1, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dc02      	bgt.n	80045e6 <__sflush_r+0x1a>
 80045e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	dd48      	ble.n	8004678 <__sflush_r+0xac>
 80045e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045e8:	2e00      	cmp	r6, #0
 80045ea:	d045      	beq.n	8004678 <__sflush_r+0xac>
 80045ec:	2300      	movs	r3, #0
 80045ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80045f2:	682f      	ldr	r7, [r5, #0]
 80045f4:	6a21      	ldr	r1, [r4, #32]
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	d030      	beq.n	800465c <__sflush_r+0x90>
 80045fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	0759      	lsls	r1, r3, #29
 8004600:	d505      	bpl.n	800460e <__sflush_r+0x42>
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	1ad2      	subs	r2, r2, r3
 8004606:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004608:	b10b      	cbz	r3, 800460e <__sflush_r+0x42>
 800460a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800460c:	1ad2      	subs	r2, r2, r3
 800460e:	2300      	movs	r3, #0
 8004610:	4628      	mov	r0, r5
 8004612:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004614:	6a21      	ldr	r1, [r4, #32]
 8004616:	47b0      	blx	r6
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	d106      	bne.n	800462c <__sflush_r+0x60>
 800461e:	6829      	ldr	r1, [r5, #0]
 8004620:	291d      	cmp	r1, #29
 8004622:	d82b      	bhi.n	800467c <__sflush_r+0xb0>
 8004624:	4a28      	ldr	r2, [pc, #160]	@ (80046c8 <__sflush_r+0xfc>)
 8004626:	410a      	asrs	r2, r1
 8004628:	07d6      	lsls	r6, r2, #31
 800462a:	d427      	bmi.n	800467c <__sflush_r+0xb0>
 800462c:	2200      	movs	r2, #0
 800462e:	6062      	str	r2, [r4, #4]
 8004630:	6922      	ldr	r2, [r4, #16]
 8004632:	04d9      	lsls	r1, r3, #19
 8004634:	6022      	str	r2, [r4, #0]
 8004636:	d504      	bpl.n	8004642 <__sflush_r+0x76>
 8004638:	1c42      	adds	r2, r0, #1
 800463a:	d101      	bne.n	8004640 <__sflush_r+0x74>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	b903      	cbnz	r3, 8004642 <__sflush_r+0x76>
 8004640:	6560      	str	r0, [r4, #84]	@ 0x54
 8004642:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004644:	602f      	str	r7, [r5, #0]
 8004646:	b1b9      	cbz	r1, 8004678 <__sflush_r+0xac>
 8004648:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800464c:	4299      	cmp	r1, r3
 800464e:	d002      	beq.n	8004656 <__sflush_r+0x8a>
 8004650:	4628      	mov	r0, r5
 8004652:	f7ff fbf3 	bl	8003e3c <_free_r>
 8004656:	2300      	movs	r3, #0
 8004658:	6363      	str	r3, [r4, #52]	@ 0x34
 800465a:	e00d      	b.n	8004678 <__sflush_r+0xac>
 800465c:	2301      	movs	r3, #1
 800465e:	4628      	mov	r0, r5
 8004660:	47b0      	blx	r6
 8004662:	4602      	mov	r2, r0
 8004664:	1c50      	adds	r0, r2, #1
 8004666:	d1c9      	bne.n	80045fc <__sflush_r+0x30>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0c6      	beq.n	80045fc <__sflush_r+0x30>
 800466e:	2b1d      	cmp	r3, #29
 8004670:	d001      	beq.n	8004676 <__sflush_r+0xaa>
 8004672:	2b16      	cmp	r3, #22
 8004674:	d11d      	bne.n	80046b2 <__sflush_r+0xe6>
 8004676:	602f      	str	r7, [r5, #0]
 8004678:	2000      	movs	r0, #0
 800467a:	e021      	b.n	80046c0 <__sflush_r+0xf4>
 800467c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004680:	b21b      	sxth	r3, r3
 8004682:	e01a      	b.n	80046ba <__sflush_r+0xee>
 8004684:	690f      	ldr	r7, [r1, #16]
 8004686:	2f00      	cmp	r7, #0
 8004688:	d0f6      	beq.n	8004678 <__sflush_r+0xac>
 800468a:	0793      	lsls	r3, r2, #30
 800468c:	bf18      	it	ne
 800468e:	2300      	movne	r3, #0
 8004690:	680e      	ldr	r6, [r1, #0]
 8004692:	bf08      	it	eq
 8004694:	694b      	ldreq	r3, [r1, #20]
 8004696:	1bf6      	subs	r6, r6, r7
 8004698:	600f      	str	r7, [r1, #0]
 800469a:	608b      	str	r3, [r1, #8]
 800469c:	2e00      	cmp	r6, #0
 800469e:	ddeb      	ble.n	8004678 <__sflush_r+0xac>
 80046a0:	4633      	mov	r3, r6
 80046a2:	463a      	mov	r2, r7
 80046a4:	4628      	mov	r0, r5
 80046a6:	6a21      	ldr	r1, [r4, #32]
 80046a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80046ac:	47e0      	blx	ip
 80046ae:	2800      	cmp	r0, #0
 80046b0:	dc07      	bgt.n	80046c2 <__sflush_r+0xf6>
 80046b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ba:	f04f 30ff 	mov.w	r0, #4294967295
 80046be:	81a3      	strh	r3, [r4, #12]
 80046c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046c2:	4407      	add	r7, r0
 80046c4:	1a36      	subs	r6, r6, r0
 80046c6:	e7e9      	b.n	800469c <__sflush_r+0xd0>
 80046c8:	dfbffffe 	.word	0xdfbffffe

080046cc <_fflush_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	690b      	ldr	r3, [r1, #16]
 80046d0:	4605      	mov	r5, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	b913      	cbnz	r3, 80046dc <_fflush_r+0x10>
 80046d6:	2500      	movs	r5, #0
 80046d8:	4628      	mov	r0, r5
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	b118      	cbz	r0, 80046e6 <_fflush_r+0x1a>
 80046de:	6a03      	ldr	r3, [r0, #32]
 80046e0:	b90b      	cbnz	r3, 80046e6 <_fflush_r+0x1a>
 80046e2:	f7ff faa3 	bl	8003c2c <__sinit>
 80046e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f3      	beq.n	80046d6 <_fflush_r+0xa>
 80046ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80046f0:	07d0      	lsls	r0, r2, #31
 80046f2:	d404      	bmi.n	80046fe <_fflush_r+0x32>
 80046f4:	0599      	lsls	r1, r3, #22
 80046f6:	d402      	bmi.n	80046fe <_fflush_r+0x32>
 80046f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046fa:	f7ff fb9c 	bl	8003e36 <__retarget_lock_acquire_recursive>
 80046fe:	4628      	mov	r0, r5
 8004700:	4621      	mov	r1, r4
 8004702:	f7ff ff63 	bl	80045cc <__sflush_r>
 8004706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004708:	4605      	mov	r5, r0
 800470a:	07da      	lsls	r2, r3, #31
 800470c:	d4e4      	bmi.n	80046d8 <_fflush_r+0xc>
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	059b      	lsls	r3, r3, #22
 8004712:	d4e1      	bmi.n	80046d8 <_fflush_r+0xc>
 8004714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004716:	f7ff fb8f 	bl	8003e38 <__retarget_lock_release_recursive>
 800471a:	e7dd      	b.n	80046d8 <_fflush_r+0xc>

0800471c <__swbuf_r>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	460e      	mov	r6, r1
 8004720:	4614      	mov	r4, r2
 8004722:	4605      	mov	r5, r0
 8004724:	b118      	cbz	r0, 800472e <__swbuf_r+0x12>
 8004726:	6a03      	ldr	r3, [r0, #32]
 8004728:	b90b      	cbnz	r3, 800472e <__swbuf_r+0x12>
 800472a:	f7ff fa7f 	bl	8003c2c <__sinit>
 800472e:	69a3      	ldr	r3, [r4, #24]
 8004730:	60a3      	str	r3, [r4, #8]
 8004732:	89a3      	ldrh	r3, [r4, #12]
 8004734:	071a      	lsls	r2, r3, #28
 8004736:	d501      	bpl.n	800473c <__swbuf_r+0x20>
 8004738:	6923      	ldr	r3, [r4, #16]
 800473a:	b943      	cbnz	r3, 800474e <__swbuf_r+0x32>
 800473c:	4621      	mov	r1, r4
 800473e:	4628      	mov	r0, r5
 8004740:	f000 f82a 	bl	8004798 <__swsetup_r>
 8004744:	b118      	cbz	r0, 800474e <__swbuf_r+0x32>
 8004746:	f04f 37ff 	mov.w	r7, #4294967295
 800474a:	4638      	mov	r0, r7
 800474c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	6922      	ldr	r2, [r4, #16]
 8004752:	b2f6      	uxtb	r6, r6
 8004754:	1a98      	subs	r0, r3, r2
 8004756:	6963      	ldr	r3, [r4, #20]
 8004758:	4637      	mov	r7, r6
 800475a:	4283      	cmp	r3, r0
 800475c:	dc05      	bgt.n	800476a <__swbuf_r+0x4e>
 800475e:	4621      	mov	r1, r4
 8004760:	4628      	mov	r0, r5
 8004762:	f7ff ffb3 	bl	80046cc <_fflush_r>
 8004766:	2800      	cmp	r0, #0
 8004768:	d1ed      	bne.n	8004746 <__swbuf_r+0x2a>
 800476a:	68a3      	ldr	r3, [r4, #8]
 800476c:	3b01      	subs	r3, #1
 800476e:	60a3      	str	r3, [r4, #8]
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	6022      	str	r2, [r4, #0]
 8004776:	701e      	strb	r6, [r3, #0]
 8004778:	6962      	ldr	r2, [r4, #20]
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	429a      	cmp	r2, r3
 800477e:	d004      	beq.n	800478a <__swbuf_r+0x6e>
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	07db      	lsls	r3, r3, #31
 8004784:	d5e1      	bpl.n	800474a <__swbuf_r+0x2e>
 8004786:	2e0a      	cmp	r6, #10
 8004788:	d1df      	bne.n	800474a <__swbuf_r+0x2e>
 800478a:	4621      	mov	r1, r4
 800478c:	4628      	mov	r0, r5
 800478e:	f7ff ff9d 	bl	80046cc <_fflush_r>
 8004792:	2800      	cmp	r0, #0
 8004794:	d0d9      	beq.n	800474a <__swbuf_r+0x2e>
 8004796:	e7d6      	b.n	8004746 <__swbuf_r+0x2a>

08004798 <__swsetup_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4b29      	ldr	r3, [pc, #164]	@ (8004840 <__swsetup_r+0xa8>)
 800479c:	4605      	mov	r5, r0
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	460c      	mov	r4, r1
 80047a2:	b118      	cbz	r0, 80047ac <__swsetup_r+0x14>
 80047a4:	6a03      	ldr	r3, [r0, #32]
 80047a6:	b90b      	cbnz	r3, 80047ac <__swsetup_r+0x14>
 80047a8:	f7ff fa40 	bl	8003c2c <__sinit>
 80047ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b0:	0719      	lsls	r1, r3, #28
 80047b2:	d422      	bmi.n	80047fa <__swsetup_r+0x62>
 80047b4:	06da      	lsls	r2, r3, #27
 80047b6:	d407      	bmi.n	80047c8 <__swsetup_r+0x30>
 80047b8:	2209      	movs	r2, #9
 80047ba:	602a      	str	r2, [r5, #0]
 80047bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	e033      	b.n	8004830 <__swsetup_r+0x98>
 80047c8:	0758      	lsls	r0, r3, #29
 80047ca:	d512      	bpl.n	80047f2 <__swsetup_r+0x5a>
 80047cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047ce:	b141      	cbz	r1, 80047e2 <__swsetup_r+0x4a>
 80047d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047d4:	4299      	cmp	r1, r3
 80047d6:	d002      	beq.n	80047de <__swsetup_r+0x46>
 80047d8:	4628      	mov	r0, r5
 80047da:	f7ff fb2f 	bl	8003e3c <_free_r>
 80047de:	2300      	movs	r3, #0
 80047e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047e8:	81a3      	strh	r3, [r4, #12]
 80047ea:	2300      	movs	r3, #0
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	6923      	ldr	r3, [r4, #16]
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	f043 0308 	orr.w	r3, r3, #8
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	6923      	ldr	r3, [r4, #16]
 80047fc:	b94b      	cbnz	r3, 8004812 <__swsetup_r+0x7a>
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004808:	d003      	beq.n	8004812 <__swsetup_r+0x7a>
 800480a:	4621      	mov	r1, r4
 800480c:	4628      	mov	r0, r5
 800480e:	f000 f85c 	bl	80048ca <__smakebuf_r>
 8004812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004816:	f013 0201 	ands.w	r2, r3, #1
 800481a:	d00a      	beq.n	8004832 <__swsetup_r+0x9a>
 800481c:	2200      	movs	r2, #0
 800481e:	60a2      	str	r2, [r4, #8]
 8004820:	6962      	ldr	r2, [r4, #20]
 8004822:	4252      	negs	r2, r2
 8004824:	61a2      	str	r2, [r4, #24]
 8004826:	6922      	ldr	r2, [r4, #16]
 8004828:	b942      	cbnz	r2, 800483c <__swsetup_r+0xa4>
 800482a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800482e:	d1c5      	bne.n	80047bc <__swsetup_r+0x24>
 8004830:	bd38      	pop	{r3, r4, r5, pc}
 8004832:	0799      	lsls	r1, r3, #30
 8004834:	bf58      	it	pl
 8004836:	6962      	ldrpl	r2, [r4, #20]
 8004838:	60a2      	str	r2, [r4, #8]
 800483a:	e7f4      	b.n	8004826 <__swsetup_r+0x8e>
 800483c:	2000      	movs	r0, #0
 800483e:	e7f7      	b.n	8004830 <__swsetup_r+0x98>
 8004840:	20000018 	.word	0x20000018

08004844 <_sbrk_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	2300      	movs	r3, #0
 8004848:	4d05      	ldr	r5, [pc, #20]	@ (8004860 <_sbrk_r+0x1c>)
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	602b      	str	r3, [r5, #0]
 8004850:	f7fc fdee 	bl	8001430 <_sbrk>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d102      	bne.n	800485e <_sbrk_r+0x1a>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	b103      	cbz	r3, 800485e <_sbrk_r+0x1a>
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	bd38      	pop	{r3, r4, r5, pc}
 8004860:	20000320 	.word	0x20000320

08004864 <memchr>:
 8004864:	4603      	mov	r3, r0
 8004866:	b510      	push	{r4, lr}
 8004868:	b2c9      	uxtb	r1, r1
 800486a:	4402      	add	r2, r0
 800486c:	4293      	cmp	r3, r2
 800486e:	4618      	mov	r0, r3
 8004870:	d101      	bne.n	8004876 <memchr+0x12>
 8004872:	2000      	movs	r0, #0
 8004874:	e003      	b.n	800487e <memchr+0x1a>
 8004876:	7804      	ldrb	r4, [r0, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	428c      	cmp	r4, r1
 800487c:	d1f6      	bne.n	800486c <memchr+0x8>
 800487e:	bd10      	pop	{r4, pc}

08004880 <__swhatbuf_r>:
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	460c      	mov	r4, r1
 8004884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004888:	4615      	mov	r5, r2
 800488a:	2900      	cmp	r1, #0
 800488c:	461e      	mov	r6, r3
 800488e:	b096      	sub	sp, #88	@ 0x58
 8004890:	da0c      	bge.n	80048ac <__swhatbuf_r+0x2c>
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	2100      	movs	r1, #0
 8004896:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800489a:	bf14      	ite	ne
 800489c:	2340      	movne	r3, #64	@ 0x40
 800489e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80048a2:	2000      	movs	r0, #0
 80048a4:	6031      	str	r1, [r6, #0]
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	b016      	add	sp, #88	@ 0x58
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	466a      	mov	r2, sp
 80048ae:	f000 f849 	bl	8004944 <_fstat_r>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	dbed      	blt.n	8004892 <__swhatbuf_r+0x12>
 80048b6:	9901      	ldr	r1, [sp, #4]
 80048b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80048bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048c0:	4259      	negs	r1, r3
 80048c2:	4159      	adcs	r1, r3
 80048c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048c8:	e7eb      	b.n	80048a2 <__swhatbuf_r+0x22>

080048ca <__smakebuf_r>:
 80048ca:	898b      	ldrh	r3, [r1, #12]
 80048cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ce:	079d      	lsls	r5, r3, #30
 80048d0:	4606      	mov	r6, r0
 80048d2:	460c      	mov	r4, r1
 80048d4:	d507      	bpl.n	80048e6 <__smakebuf_r+0x1c>
 80048d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	2301      	movs	r3, #1
 80048e0:	6163      	str	r3, [r4, #20]
 80048e2:	b003      	add	sp, #12
 80048e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e6:	466a      	mov	r2, sp
 80048e8:	ab01      	add	r3, sp, #4
 80048ea:	f7ff ffc9 	bl	8004880 <__swhatbuf_r>
 80048ee:	9f00      	ldr	r7, [sp, #0]
 80048f0:	4605      	mov	r5, r0
 80048f2:	4639      	mov	r1, r7
 80048f4:	4630      	mov	r0, r6
 80048f6:	f7ff fb0b 	bl	8003f10 <_malloc_r>
 80048fa:	b948      	cbnz	r0, 8004910 <__smakebuf_r+0x46>
 80048fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004900:	059a      	lsls	r2, r3, #22
 8004902:	d4ee      	bmi.n	80048e2 <__smakebuf_r+0x18>
 8004904:	f023 0303 	bic.w	r3, r3, #3
 8004908:	f043 0302 	orr.w	r3, r3, #2
 800490c:	81a3      	strh	r3, [r4, #12]
 800490e:	e7e2      	b.n	80048d6 <__smakebuf_r+0xc>
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800491a:	81a3      	strh	r3, [r4, #12]
 800491c:	9b01      	ldr	r3, [sp, #4]
 800491e:	6020      	str	r0, [r4, #0]
 8004920:	b15b      	cbz	r3, 800493a <__smakebuf_r+0x70>
 8004922:	4630      	mov	r0, r6
 8004924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004928:	f000 f81e 	bl	8004968 <_isatty_r>
 800492c:	b128      	cbz	r0, 800493a <__smakebuf_r+0x70>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f023 0303 	bic.w	r3, r3, #3
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	81a3      	strh	r3, [r4, #12]
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	431d      	orrs	r5, r3
 800493e:	81a5      	strh	r5, [r4, #12]
 8004940:	e7cf      	b.n	80048e2 <__smakebuf_r+0x18>
	...

08004944 <_fstat_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	2300      	movs	r3, #0
 8004948:	4d06      	ldr	r5, [pc, #24]	@ (8004964 <_fstat_r+0x20>)
 800494a:	4604      	mov	r4, r0
 800494c:	4608      	mov	r0, r1
 800494e:	4611      	mov	r1, r2
 8004950:	602b      	str	r3, [r5, #0]
 8004952:	f7fc fd47 	bl	80013e4 <_fstat>
 8004956:	1c43      	adds	r3, r0, #1
 8004958:	d102      	bne.n	8004960 <_fstat_r+0x1c>
 800495a:	682b      	ldr	r3, [r5, #0]
 800495c:	b103      	cbz	r3, 8004960 <_fstat_r+0x1c>
 800495e:	6023      	str	r3, [r4, #0]
 8004960:	bd38      	pop	{r3, r4, r5, pc}
 8004962:	bf00      	nop
 8004964:	20000320 	.word	0x20000320

08004968 <_isatty_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	2300      	movs	r3, #0
 800496c:	4d05      	ldr	r5, [pc, #20]	@ (8004984 <_isatty_r+0x1c>)
 800496e:	4604      	mov	r4, r0
 8004970:	4608      	mov	r0, r1
 8004972:	602b      	str	r3, [r5, #0]
 8004974:	f7fc fd45 	bl	8001402 <_isatty>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d102      	bne.n	8004982 <_isatty_r+0x1a>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	b103      	cbz	r3, 8004982 <_isatty_r+0x1a>
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	bd38      	pop	{r3, r4, r5, pc}
 8004984:	20000320 	.word	0x20000320

08004988 <_init>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	bf00      	nop
 800498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498e:	bc08      	pop	{r3}
 8004990:	469e      	mov	lr, r3
 8004992:	4770      	bx	lr

08004994 <_fini>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr
